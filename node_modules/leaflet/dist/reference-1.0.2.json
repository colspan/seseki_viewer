{
 "namespaces": {
  "Map": {
   "name": "Map",
   "aka": [
    "L.Map"
   ],
   "comments": [
    "The central class of the API — it is used to create a map on a page and manipulate it."
   ],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "preferCanvas": {
         "name": "preferCanvas",
         "aka": [],
         "comments": [
          "Whether `Path`s should be rendered on a `Canvas` renderer.",
          "By default, all `Path`s are rendered in a `SVG` renderer."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "map-prefercanvas"
        }
       },
       "type": "option",
       "id": "map-option"
      },
      "Control options": {
       "name": "Control options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "attributionControl": {
         "name": "attributionControl",
         "aka": [],
         "comments": [
          "Whether a [attribution control](#control-attribution) is added to the map by default."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-attributioncontrol"
        },
        "zoomControl": {
         "name": "zoomControl",
         "aka": [],
         "comments": [
          "Whether a [zoom control](#control-zoom) is added to the map by default."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-zoomcontrol"
        }
       },
       "type": "option",
       "id": "map-control-options"
      },
      "Interaction Options": {
       "name": "Interaction Options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "closePopupOnClick": {
         "name": "closePopupOnClick",
         "aka": [],
         "comments": [
          "Set it to `false` if you don't want popups to close when user clicks the map.",
          " "
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-closepopuponclick"
        },
        "zoomSnap": {
         "name": "zoomSnap",
         "aka": [],
         "comments": [
          "Forces the map's zoom level to always be a multiple of this, particularly",
          "right after a [`fitBounds()`](#map-fitbounds) or a pinch-zoom.",
          "By default, the zoom level snaps to the nearest integer; lower values",
          "(e.g. `0.5` or `0.1`) allow for greater granularity. A value of `0`",
          "means the zoom level will not be snapped after `fitBounds` or a pinch-zoom."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "1",
         "id": "map-zoomsnap"
        },
        "zoomDelta": {
         "name": "zoomDelta",
         "aka": [],
         "comments": [
          "Controls how much the map's zoom level will change after a",
          "[`zoomIn()`](#map-zoomin), [`zoomOut()`](#map-zoomout), pressing `+`",
          "or `-` on the keyboard, or using the [zoom controls](#control-zoom).",
          "Values smaller than `1` (e.g. `0.5`) allow for greater granularity."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "1",
         "id": "map-zoomdelta"
        },
        "trackResize": {
         "name": "trackResize",
         "aka": [],
         "comments": [
          "Whether the map automatically handles browser window resize to update itself."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-trackresize"
        },
        "boxZoom": {
         "name": "boxZoom",
         "aka": [],
         "comments": [
          "Whether the map can be zoomed to a rectangular area specified by",
          "dragging the mouse while pressing the shift key."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-boxzoom"
        },
        "doubleClickZoom": {
         "name": "doubleClickZoom",
         "aka": [],
         "comments": [
          "Whether the map can be zoomed in by double clicking on it and",
          "zoomed out by double clicking while holding shift. If passed",
          "`'center'`, double-click zoom will zoom to the center of the",
          " view regardless of where the mouse was."
         ],
         "params": {},
         "type": "Boolean|String",
         "optional": false,
         "defaultValue": "true",
         "id": "map-doubleclickzoom"
        },
        "dragging": {
         "name": "dragging",
         "aka": [],
         "comments": [
          "Whether the map be draggable with mouse/touch or not."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-dragging"
        }
       },
       "type": "option",
       "id": "map-interaction-options"
      },
      "Map State Options": {
       "name": "Map State Options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "crs": {
         "name": "crs",
         "aka": [],
         "comments": [
          "The [Coordinate Reference System](#crs) to use. Don't change this if you're not",
          "sure what it means."
         ],
         "params": {},
         "type": "CRS",
         "optional": false,
         "defaultValue": "L.CRS.EPSG3857",
         "id": "map-crs"
        },
        "center": {
         "name": "center",
         "aka": [],
         "comments": [
          "Initial geographic center of the map"
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": "undefined",
         "id": "map-center"
        },
        "zoom": {
         "name": "zoom",
         "aka": [],
         "comments": [
          "Initial map zoom level"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "undefined",
         "id": "map-zoom"
        },
        "minZoom": {
         "name": "minZoom",
         "aka": [],
         "comments": [
          "Minimum zoom level of the map. Overrides any `minZoom` option set on map layers."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "undefined",
         "id": "map-minzoom"
        },
        "maxZoom": {
         "name": "maxZoom",
         "aka": [],
         "comments": [
          "Maximum zoom level of the map. Overrides any `maxZoom` option set on map layers."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "undefined",
         "id": "map-maxzoom"
        },
        "layers": {
         "name": "layers",
         "aka": [],
         "comments": [
          "Array of layers that will be added to the map initially"
         ],
         "params": {},
         "type": "Layer[]",
         "optional": false,
         "defaultValue": "[]",
         "id": "map-layers"
        },
        "maxBounds": {
         "name": "maxBounds",
         "aka": [],
         "comments": [
          "When this option is set, the map restricts the view to the given",
          "geographical bounds, bouncing the user back if the user tries to pan",
          "outside the view. To set the restriction dynamically, use",
          "[`setMaxBounds`](#map-setmaxbounds) method."
         ],
         "params": {},
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": "null",
         "id": "map-maxbounds"
        },
        "renderer": {
         "name": "renderer",
         "aka": [],
         "comments": [
          "The default method for drawing vector layers on the map. `L.SVG`",
          "or `L.Canvas` by default depending on browser support."
         ],
         "params": {},
         "type": "Renderer",
         "optional": false,
         "defaultValue": "*",
         "id": "map-renderer"
        }
       },
       "type": "option",
       "id": "map-map-state-options"
      },
      "Animation Options": {
       "name": "Animation Options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "zoomAnimation": {
         "name": "zoomAnimation",
         "aka": [],
         "comments": [
          "Whether the map zoom animation is enabled. By default it's enabled",
          "in all browsers that support CSS3 Transitions except Android."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-zoomanimation"
        },
        "zoomAnimationThreshold": {
         "name": "zoomAnimationThreshold",
         "aka": [],
         "comments": [
          "Won't animate zoom if the zoom difference exceeds this value."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "4",
         "id": "map-zoomanimationthreshold"
        },
        "fadeAnimation": {
         "name": "fadeAnimation",
         "aka": [],
         "comments": [
          "Whether the tile fade animation is enabled. By default it's enabled",
          "in all browsers that support CSS3 Transitions except Android."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-fadeanimation"
        },
        "markerZoomAnimation": {
         "name": "markerZoomAnimation",
         "aka": [],
         "comments": [
          "Whether markers animate their zoom with the zoom animation, if disabled",
          "they will disappear for the length of the animation. By default it's",
          "enabled in all browsers that support CSS3 Transitions except Android."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-markerzoomanimation"
        },
        "transform3DLimit": {
         "name": "transform3DLimit",
         "aka": [],
         "comments": [
          "Defines the maximum size of a CSS translation transform. The default",
          "value should not be changed unless a web browser positions layers in",
          "the wrong place after doing a large `panBy`."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "2^23",
         "id": "map-transform3dlimit"
        }
       },
       "type": "option",
       "id": "map-animation-options"
      },
      "Panning Inertia Options": {
       "name": "Panning Inertia Options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "inertia": {
         "name": "inertia",
         "aka": [],
         "comments": [
          "If enabled, panning of the map will have an inertia effect where",
          "the map builds momentum while dragging and continues moving in",
          "the same direction for some time. Feels especially nice on touch",
          "devices. Enabled by default unless running on old Android devices."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "*",
         "id": "map-inertia"
        },
        "inertiaDeceleration": {
         "name": "inertiaDeceleration",
         "aka": [],
         "comments": [
          "The rate with which the inertial movement slows down, in pixels/second²."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "3000",
         "id": "map-inertiadeceleration"
        },
        "inertiaMaxSpeed": {
         "name": "inertiaMaxSpeed",
         "aka": [],
         "comments": [
          "Max speed of the inertial movement, in pixels/second."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "Infinity",
         "id": "map-inertiamaxspeed"
        },
        "easeLinearity": {
         "name": "easeLinearity",
         "aka": [],
         "comments": [],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0.2",
         "id": "map-easelinearity"
        },
        "worldCopyJump": {
         "name": "worldCopyJump",
         "aka": [],
         "comments": [
          "With this option enabled, the map tracks when you pan to another \"copy\"",
          "of the world and seamlessly jumps to the original one so that all overlays",
          "like markers and vector layers are still visible."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "map-worldcopyjump"
        },
        "maxBoundsViscosity": {
         "name": "maxBoundsViscosity",
         "aka": [],
         "comments": [
          "If `maxBounds` is set, this option will control how solid the bounds",
          "are when dragging the map around. The default value of `0.0` allows the",
          "user to drag outside the bounds at normal speed, higher values will",
          "slow down map dragging outside bounds, and `1.0` makes the bounds fully",
          "solid, preventing the user from dragging outside the bounds."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0.0",
         "id": "map-maxboundsviscosity"
        }
       },
       "type": "option",
       "id": "map-panning-inertia-options"
      },
      "Keyboard Navigation Options": {
       "name": "Keyboard Navigation Options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "keyboard": {
         "name": "keyboard",
         "aka": [],
         "comments": [
          "Makes the map focusable and allows users to navigate the map with keyboard",
          "arrows and `+`/`-` keys."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-keyboard"
        },
        "keyboardPanDelta": {
         "name": "keyboardPanDelta",
         "aka": [],
         "comments": [
          "Amount of pixels to pan when pressing an arrow key."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "80",
         "id": "map-keyboardpandelta"
        }
       },
       "type": "option",
       "id": "map-keyboard-navigation-options"
      },
      "Mousewheel options": {
       "name": "Mousewheel options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "scrollWheelZoom": {
         "name": "scrollWheelZoom",
         "aka": [],
         "comments": [
          "Whether the map can be zoomed by using the mouse wheel. If passed `'center'`,",
          "it will zoom to the center of the view regardless of where the mouse was."
         ],
         "params": {},
         "type": "Boolean|String",
         "optional": false,
         "defaultValue": "true",
         "id": "map-scrollwheelzoom"
        },
        "wheelDebounceTime": {
         "name": "wheelDebounceTime",
         "aka": [],
         "comments": [
          "Limits the rate at which a wheel can fire (in milliseconds). By default",
          "user can't zoom via wheel more often than once per 40 ms."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "40",
         "id": "map-wheeldebouncetime"
        },
        "wheelPxPerZoomLevel": {
         "name": "wheelPxPerZoomLevel",
         "aka": [],
         "comments": [
          "How many scroll pixels (as reported by [L.DomEvent.getWheelDelta](#domevent-getwheeldelta))",
          "mean a change of one full zoom level. Smaller values will make wheel-zooming",
          "faster (and vice versa)."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "60",
         "id": "map-wheelpxperzoomlevel"
        }
       },
       "type": "option",
       "id": "map-mousewheel-options"
      },
      "Touch interaction options": {
       "name": "Touch interaction options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "tap": {
         "name": "tap",
         "aka": [],
         "comments": [
          "Enables mobile hacks for supporting instant taps (fixing 200ms click",
          "delay on iOS/Android) and touch holds (fired as `contextmenu` events)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-tap"
        },
        "tapTolerance": {
         "name": "tapTolerance",
         "aka": [],
         "comments": [
          "The max number of pixels a user can shift his finger during touch",
          "for it to be considered a valid tap."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "15",
         "id": "map-taptolerance"
        },
        "touchZoom": {
         "name": "touchZoom",
         "aka": [],
         "comments": [
          "Whether the map can be zoomed by touch-dragging with two fingers. If",
          "passed `'center'`, it will zoom to the center of the view regardless of",
          "where the touch events (fingers) were. Enabled for touch-capable web",
          "browsers except for old Androids."
         ],
         "params": {},
         "type": "Boolean|String",
         "optional": false,
         "defaultValue": "*",
         "id": "map-touchzoom"
        },
        "bounceAtZoomLimits": {
         "name": "bounceAtZoomLimits",
         "aka": [],
         "comments": [
          "Set it to false if you don't want the map to zoom beyond min/max zoom",
          "and then bounce back when pinch-zooming."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "map-bounceatzoomlimits"
        }
       },
       "type": "option",
       "id": "map-touch-interaction-options"
      }
     },
     "id": "map-option"
    },
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "Layer events": {
       "name": "Layer events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "baselayerchange": {
         "name": "baselayerchange",
         "aka": [],
         "comments": [
          "Fired when the base layer is changed through the [layer control](#control-layers)."
         ],
         "params": {},
         "type": "LayersControlEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-baselayerchange"
        },
        "overlayadd": {
         "name": "overlayadd",
         "aka": [],
         "comments": [
          "Fired when an overlay is selected through the [layer control](#control-layers)."
         ],
         "params": {},
         "type": "LayersControlEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-overlayadd"
        },
        "overlayremove": {
         "name": "overlayremove",
         "aka": [],
         "comments": [
          "Fired when an overlay is deselected through the [layer control](#control-layers)."
         ],
         "params": {},
         "type": "LayersControlEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-overlayremove"
        },
        "layeradd": {
         "name": "layeradd",
         "aka": [],
         "comments": [
          "Fired when a new layer is added to the map."
         ],
         "params": {},
         "type": "LayerEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-layeradd"
        },
        "layerremove": {
         "name": "layerremove",
         "aka": [],
         "comments": [
          "Fired when some layer is removed from the map"
         ],
         "params": {},
         "type": "LayerEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-layerremove"
        }
       },
       "type": "event",
       "id": "map-layer-events"
      },
      "Map state change events": {
       "name": "Map state change events",
       "aka": [],
       "comments": [
        " "
       ],
       "uninheritable": false,
       "documentables": {
        "zoomlevelschange": {
         "name": "zoomlevelschange",
         "aka": [],
         "comments": [
          "Fired when the number of zoomlevels on the map is changed due",
          "to adding or removing a layer."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-zoomlevelschange"
        },
        "resize": {
         "name": "resize",
         "aka": [],
         "comments": [
          "Fired when the map is resized."
         ],
         "params": {},
         "type": "ResizeEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-resize"
        },
        "unload": {
         "name": "unload",
         "aka": [],
         "comments": [
          "Fired when the map is destroyed with [remove](#map-remove) method."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-unload"
        },
        "viewreset": {
         "name": "viewreset",
         "aka": [],
         "comments": [
          "Fired when the map needs to redraw its content (this usually happens",
          "on map zoom or load). Very useful for creating custom overlays."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-viewreset"
        },
        "load": {
         "name": "load",
         "aka": [],
         "comments": [
          "Fired when the map is initialized (when its center and zoom are set",
          "for the first time)."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-load"
        },
        "zoomstart": {
         "name": "zoomstart",
         "aka": [],
         "comments": [
          "Fired when the map zoom is about to change (e.g. before zoom animation)."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-zoomstart"
        },
        "movestart": {
         "name": "movestart",
         "aka": [],
         "comments": [
          "Fired when the view of the map starts changing (e.g. user starts dragging the map)."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-movestart"
        },
        "zoom": {
         "name": "zoom",
         "aka": [],
         "comments": [
          "Fired repeatedly during any change in zoom level, including zoom",
          "and fly animations."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-zoom"
        },
        "move": {
         "name": "move",
         "aka": [],
         "comments": [
          "Fired repeatedly during any movement of the map, including pan and",
          "fly animations."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-move"
        },
        "zoomend": {
         "name": "zoomend",
         "aka": [],
         "comments": [
          "Fired when the map has changed, after any animations."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-zoomend"
        },
        "moveend": {
         "name": "moveend",
         "aka": [],
         "comments": [
          "Fired when the center of the map stops changing (e.g. user stopped",
          "dragging the map)."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-moveend"
        }
       },
       "type": "event",
       "id": "map-map-state-change-events"
      },
      "Popup events": {
       "name": "Popup events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "popupopen": {
         "name": "popupopen",
         "aka": [],
         "comments": [
          "Fired when a popup is opened in the map"
         ],
         "params": {},
         "type": "PopupEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-popupopen"
        },
        "popupclose": {
         "name": "popupclose",
         "aka": [],
         "comments": [
          "Fired when a popup in the map is closed"
         ],
         "params": {},
         "type": "PopupEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-popupclose"
        },
        "autopanstart": {
         "name": "autopanstart",
         "aka": [],
         "comments": [
          "Fired when the map starts autopanning when opening a popup."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "map-autopanstart"
        }
       },
       "type": "event",
       "id": "map-popup-events"
      },
      "Tooltip events": {
       "name": "Tooltip events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "tooltipopen": {
         "name": "tooltipopen",
         "aka": [],
         "comments": [
          "Fired when a tooltip is opened in the map."
         ],
         "params": {},
         "type": "TooltipEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-tooltipopen"
        },
        "tooltipclose": {
         "name": "tooltipclose",
         "aka": [],
         "comments": [
          "Fired when a tooltip in the map is closed."
         ],
         "params": {},
         "type": "TooltipEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-tooltipclose"
        }
       },
       "type": "event",
       "id": "map-tooltip-events"
      },
      "Location events": {
       "name": "Location events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "locationerror": {
         "name": "locationerror",
         "aka": [],
         "comments": [
          "Fired when geolocation (using the [`locate`](#map-locate) method) failed."
         ],
         "params": {},
         "type": "ErrorEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-locationerror"
        },
        "locationfound": {
         "name": "locationfound",
         "aka": [],
         "comments": [
          "Fired when geolocation (using the [`locate`](#map-locate) method)",
          "went successfully."
         ],
         "params": {},
         "type": "LocationEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-locationfound"
        }
       },
       "type": "event",
       "id": "map-location-events"
      },
      "Interaction events": {
       "name": "Interaction events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "click": {
         "name": "click",
         "aka": [],
         "comments": [
          "Fired when the user clicks (or taps) the map."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-click"
        },
        "dblclick": {
         "name": "dblclick",
         "aka": [],
         "comments": [
          "Fired when the user double-clicks (or double-taps) the map."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-dblclick"
        },
        "mousedown": {
         "name": "mousedown",
         "aka": [],
         "comments": [
          "Fired when the user pushes the mouse button on the map."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-mousedown"
        },
        "mouseup": {
         "name": "mouseup",
         "aka": [],
         "comments": [
          "Fired when the user releases the mouse button on the map."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-mouseup"
        },
        "mouseover": {
         "name": "mouseover",
         "aka": [],
         "comments": [
          "Fired when the mouse enters the map."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-mouseover"
        },
        "mouseout": {
         "name": "mouseout",
         "aka": [],
         "comments": [
          "Fired when the mouse leaves the map."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-mouseout"
        },
        "mousemove": {
         "name": "mousemove",
         "aka": [],
         "comments": [
          "Fired while the mouse moves over the map."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-mousemove"
        },
        "contextmenu": {
         "name": "contextmenu",
         "aka": [],
         "comments": [
          "Fired when the user pushes the right mouse button on the map, prevents",
          "default browser context menu from showing if there are listeners on",
          "this event. Also fired on mobile when the user holds a single touch",
          "for a second (also called long press)."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-contextmenu"
        },
        "keypress": {
         "name": "keypress",
         "aka": [],
         "comments": [
          "Fired when the user presses a key from the keyboard while the map is focused."
         ],
         "params": {},
         "type": "KeyboardEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-keypress"
        },
        "preclick": {
         "name": "preclick",
         "aka": [],
         "comments": [
          "Fired before mouse click on the map (sometimes useful when you",
          "want something to happen on click before any existing click",
          "handlers start running)."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-preclick"
        }
       },
       "type": "event",
       "id": "map-interaction-events"
      },
      "Other Methods": {
       "name": "Other Methods",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "zoomanim": {
         "name": "zoomanim",
         "aka": [],
         "comments": [
          "Fired on every frame of a zoom animation"
         ],
         "params": {},
         "type": "ZoomAnimEvent",
         "optional": false,
         "defaultValue": null,
         "id": "map-zoomanim"
        }
       },
       "type": "event",
       "id": "map-other-methods"
      }
     },
     "id": "map-event"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "getRenderer": {
         "name": "getRenderer",
         "aka": [],
         "comments": [
          "Returns the instance of `Renderer` that should be used to render the given",
          "`Path`. It will ensure that the `renderer` options of the map and paths",
          "are respected, and that the renderers do exist on the map."
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Path"
          }
         },
         "type": "Renderer",
         "optional": false,
         "defaultValue": null,
         "id": "map-getrenderer"
        }
       },
       "type": "method",
       "id": "map-method"
      },
      "Methods for Layers and Controls": {
       "name": "Methods for Layers and Controls",
       "aka": [],
       "comments": [
        " "
       ],
       "uninheritable": false,
       "documentables": {
        "addControl": {
         "name": "addControl",
         "aka": [],
         "comments": [
          "Adds the given control to the map"
         ],
         "params": {
          "control": {
           "name": "control",
           "type": "Control"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-addcontrol"
        },
        "removeControl": {
         "name": "removeControl",
         "aka": [],
         "comments": [
          "Removes the given control from the map"
         ],
         "params": {
          "control": {
           "name": "control",
           "type": "Control"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-removecontrol"
        },
        "addLayer": {
         "name": "addLayer",
         "aka": [],
         "comments": [
          "Adds the given layer to the map"
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-addlayer"
        },
        "removeLayer": {
         "name": "removeLayer",
         "aka": [],
         "comments": [
          "Removes the given layer from the map."
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-removelayer"
        },
        "hasLayer": {
         "name": "hasLayer",
         "aka": [],
         "comments": [
          "Returns `true` if the given layer is currently added to the map"
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "map-haslayer"
        },
        "eachLayer": {
         "name": "eachLayer",
         "aka": [],
         "comments": [
          "Iterates over the layers of the map, optionally specifying context of the iterator function.",
          "```",
          "map.eachLayer(function(layer){",
          "    layer.bindPopup('Hello');",
          "});",
          "```",
          "\t "
         ],
         "params": {
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-eachlayer"
        },
        "openPopup": {
         "name": "openPopup",
         "aka": [],
         "comments": [
          "Opens the specified popup while closing the previously opened (to make sure only one is opened at one time for usability)."
         ],
         "params": {
          "popup": {
           "name": "popup",
           "type": "Popup"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-openpopup"
        },
        "openPopup-alternative-1": {
         "name": "openPopup",
         "aka": [],
         "comments": [
          "Creates a popup with the specified content and options and opens it in the given point on a map."
         ],
         "params": {
          "content": {
           "name": "content",
           "type": "String|HTMLElement"
          },
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "options?": {
           "name": "options?",
           "type": "Popup options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-openpopup"
        },
        "closePopup": {
         "name": "closePopup",
         "aka": [],
         "comments": [
          "Closes the popup previously opened with [openPopup](#map-openpopup) (or the given one)."
         ],
         "params": {
          "popup?": {
           "name": "popup?",
           "type": "Popup"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-closepopup"
        },
        "openTooltip": {
         "name": "openTooltip",
         "aka": [],
         "comments": [
          "Opens the specified tooltip."
         ],
         "params": {
          "tooltip": {
           "name": "tooltip",
           "type": "Tooltip"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-opentooltip"
        },
        "openTooltip-alternative-1": {
         "name": "openTooltip",
         "aka": [],
         "comments": [
          "Creates a tooltip with the specified content and options and open it."
         ],
         "params": {
          "content": {
           "name": "content",
           "type": "String|HTMLElement"
          },
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "options?": {
           "name": "options?",
           "type": "Tooltip options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-opentooltip"
        },
        "closeTooltip": {
         "name": "closeTooltip",
         "aka": [],
         "comments": [
          "Closes the tooltip given as parameter."
         ],
         "params": {
          "tooltip?": {
           "name": "tooltip?",
           "type": "Tooltip"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-closetooltip"
        }
       },
       "type": "method",
       "id": "map-methods-for-layers-and-controls"
      },
      "Methods for modifying map state": {
       "name": "Methods for modifying map state",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "setView": {
         "name": "setView",
         "aka": [],
         "comments": [
          "Sets the view of the map (geographical center and zoom) with the given",
          "animation options."
         ],
         "params": {
          "center": {
           "name": "center",
           "type": "LatLng"
          },
          "zoom": {
           "name": "zoom",
           "type": "Number"
          },
          "options?": {
           "name": "options?",
           "type": "Zoom/pan options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-setview"
        },
        "setZoom": {
         "name": "setZoom",
         "aka": [],
         "comments": [
          "Sets the zoom of the map."
         ],
         "params": {
          "zoom": {
           "name": "zoom",
           "type": "Number"
          },
          "options": {
           "name": "options",
           "type": "Zoom/pan options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-setzoom"
        },
        "zoomIn": {
         "name": "zoomIn",
         "aka": [],
         "comments": [
          "Increases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default)."
         ],
         "params": {
          "delta?": {
           "name": "delta?",
           "type": "Number"
          },
          "options?": {
           "name": "options?",
           "type": "Zoom options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-zoomin"
        },
        "zoomOut": {
         "name": "zoomOut",
         "aka": [],
         "comments": [
          "Decreases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default)."
         ],
         "params": {
          "delta?": {
           "name": "delta?",
           "type": "Number"
          },
          "options?": {
           "name": "options?",
           "type": "Zoom options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-zoomout"
        },
        "setZoomAround": {
         "name": "setZoomAround",
         "aka": [],
         "comments": [
          "Zooms the map while keeping a specified geographical point on the map",
          "stationary (e.g. used internally for scroll zoom and double-click zoom)."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "zoom": {
           "name": "zoom",
           "type": "Number"
          },
          "options": {
           "name": "options",
           "type": "Zoom options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-setzoomaround"
        },
        "setZoomAround-alternative-1": {
         "name": "setZoomAround",
         "aka": [],
         "comments": [
          "Zooms the map while keeping a specified pixel on the map (relative to the top-left corner) stationary."
         ],
         "params": {
          "offset": {
           "name": "offset",
           "type": "Point"
          },
          "zoom": {
           "name": "zoom",
           "type": "Number"
          },
          "options": {
           "name": "options",
           "type": "Zoom options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-setzoomaround"
        },
        "fitBounds": {
         "name": "fitBounds",
         "aka": [],
         "comments": [
          "Sets a map view that contains the given geographical bounds with the",
          "maximum zoom level possible."
         ],
         "params": {
          "bounds": {
           "name": "bounds",
           "type": "LatLngBounds"
          },
          "options?": {
           "name": "options?",
           "type": "fitBounds options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-fitbounds"
        },
        "fitWorld": {
         "name": "fitWorld",
         "aka": [],
         "comments": [
          "Sets a map view that mostly contains the whole world with the maximum",
          "zoom level possible."
         ],
         "params": {
          "options?": {
           "name": "options?",
           "type": "fitBounds options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-fitworld"
        },
        "panTo": {
         "name": "panTo",
         "aka": [],
         "comments": [
          "Pans the map to a given center."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "options?": {
           "name": "options?",
           "type": "Pan options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-panto"
        },
        "panBy": {
         "name": "panBy",
         "aka": [],
         "comments": [
          "Pans the map by a given number of pixels (animated)."
         ],
         "params": {
          "offset": {
           "name": "offset",
           "type": "Point"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-panby"
        },
        "flyTo": {
         "name": "flyTo",
         "aka": [],
         "comments": [
          "Sets the view of the map (geographical center and zoom) performing a smooth",
          "pan-zoom animation."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "zoom?": {
           "name": "zoom?",
           "type": "Number"
          },
          "options?": {
           "name": "options?",
           "type": "Zoom/pan options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-flyto"
        },
        "flyToBounds": {
         "name": "flyToBounds",
         "aka": [],
         "comments": [
          "Sets the view of the map with a smooth animation like [`flyTo`](#map-flyto),",
          "but takes a bounds parameter like [`fitBounds`](#map-fitbounds)."
         ],
         "params": {
          "bounds": {
           "name": "bounds",
           "type": "LatLngBounds"
          },
          "options?": {
           "name": "options?",
           "type": "fitBounds options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-flytobounds"
        },
        "setMaxBounds": {
         "name": "setMaxBounds",
         "aka": [],
         "comments": [
          "Restricts the map view to the given bounds (see the [maxBounds](#map-maxbounds) option)."
         ],
         "params": {
          "bounds": {
           "name": "bounds",
           "type": "Bounds"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-setmaxbounds"
        },
        "setMinZoom": {
         "name": "setMinZoom",
         "aka": [],
         "comments": [
          "Sets the lower limit for the available zoom levels (see the [minZoom](#map-minzoom) option)."
         ],
         "params": {
          "zoom": {
           "name": "zoom",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-setminzoom"
        },
        "setMaxZoom": {
         "name": "setMaxZoom",
         "aka": [],
         "comments": [
          "Sets the upper limit for the available zoom levels (see the [maxZoom](#map-maxzoom) option)."
         ],
         "params": {
          "zoom": {
           "name": "zoom",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-setmaxzoom"
        },
        "panInsideBounds": {
         "name": "panInsideBounds",
         "aka": [],
         "comments": [
          "Pans the map to the closest view that would lie inside the given bounds (if it's not already), controlling the animation using the options specific, if any."
         ],
         "params": {
          "bounds": {
           "name": "bounds",
           "type": "LatLngBounds"
          },
          "options?": {
           "name": "options?",
           "type": "Pan options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-paninsidebounds"
        },
        "invalidateSize": {
         "name": "invalidateSize",
         "aka": [],
         "comments": [
          "Checks if the map container size changed and updates the map if so —",
          "call it after you've changed the map size dynamically, also animating",
          "pan by default. If `options.pan` is `false`, panning will not occur.",
          "If `options.debounceMoveend` is `true`, it will delay `moveend` event so",
          "that it doesn't happen often even if the method is called many",
          "times in a row."
         ],
         "params": {
          "options": {
           "name": "options",
           "type": "Zoom/Pan options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-invalidatesize"
        },
        "invalidateSize-alternative-1": {
         "name": "invalidateSize",
         "aka": [],
         "comments": [
          "Checks if the map container size changed and updates the map if so —",
          "call it after you've changed the map size dynamically, also animating",
          "pan by default."
         ],
         "params": {
          "animate": {
           "name": "animate",
           "type": "Boolean"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-invalidatesize"
        },
        "stop": {
         "name": "stop",
         "aka": [],
         "comments": [
          "Stops the currently running `panTo` or `flyTo` animation, if any."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-stop"
        }
       },
       "type": "method",
       "id": "map-methods-for-modifying-map-state"
      },
      "Geolocation methods": {
       "name": "Geolocation methods",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "locate": {
         "name": "locate",
         "aka": [],
         "comments": [
          "Tries to locate the user using the Geolocation API, firing a [`locationfound`](#map-locationfound)",
          "event with location data on success or a [`locationerror`](#map-locationerror) event on failure,",
          "and optionally sets the map view to the user's location with respect to",
          "detection accuracy (or to the world view if geolocation failed).",
          "Note that, if your page doesn't use HTTPS, this method will fail in",
          "modern browsers ([Chrome 50 and newer](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins))",
          "See `Locate options` for more details."
         ],
         "params": {
          "options?": {
           "name": "options?",
           "type": "Locate options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-locate"
        },
        "stopLocate": {
         "name": "stopLocate",
         "aka": [],
         "comments": [
          "Stops watching location previously initiated by `map.locate({watch: true})`",
          "and aborts resetting the map view if map.locate was called with",
          "`{setView: true}`."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-stoplocate"
        }
       },
       "type": "method",
       "id": "map-geolocation-methods"
      },
      "Other Methods": {
       "name": "Other Methods",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "addHandler": {
         "name": "addHandler",
         "aka": [],
         "comments": [
          "Adds a new `Handler` to the map, given its name and constructor function."
         ],
         "params": {
          "name": {
           "name": "name",
           "type": "String"
          },
          "HandlerClass": {
           "name": "HandlerClass",
           "type": "Function"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-addhandler"
        },
        "remove": {
         "name": "remove",
         "aka": [],
         "comments": [
          "Destroys the map and clears all related event listeners."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-remove"
        },
        "createPane": {
         "name": "createPane",
         "aka": [],
         "comments": [
          "Creates a new [map pane](#map-pane) with the given name if it doesn't exist already,",
          "then returns it. The pane is created as a children of `container`, or",
          "as a children of the main map pane if not set."
         ],
         "params": {
          "name": {
           "name": "name",
           "type": "String"
          },
          "container?": {
           "name": "container?",
           "type": "HTMLElement"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "map-createpane"
        },
        "getPane": {
         "name": "getPane",
         "aka": [],
         "comments": [
          "Returns a [map pane](#map-pane), given its name or its HTML element (its identity)."
         ],
         "params": {
          "pane": {
           "name": "pane",
           "type": "String|HTMLElement"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "map-getpane"
        },
        "getPanes": {
         "name": "getPanes",
         "aka": [],
         "comments": [
          "Returns a plain object containing the names of all [panes](#map-pane) as keys and",
          "the panes as values."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "map-getpanes"
        },
        "getContainer": {
         "name": "getContainer",
         "aka": [],
         "comments": [
          "Returns the HTML element that contains the map."
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "map-getcontainer"
        },
        "whenReady": {
         "name": "whenReady",
         "aka": [],
         "comments": [
          "Runs the given function `fn` when the map gets initialized with",
          "a view (center and zoom) and at least one layer, or immediately",
          "if it's already initialized, optionally passing a function context."
         ],
         "params": {
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "map-whenready"
        }
       },
       "type": "method",
       "id": "map-other-methods"
      },
      "Methods for Getting Map State": {
       "name": "Methods for Getting Map State",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "getCenter": {
         "name": "getCenter",
         "aka": [],
         "comments": [
          "Returns the geographical center of the map view"
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "map-getcenter"
        },
        "getZoom": {
         "name": "getZoom",
         "aka": [],
         "comments": [
          "Returns the current zoom level of the map view"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "map-getzoom"
        },
        "getBounds": {
         "name": "getBounds",
         "aka": [],
         "comments": [
          "Returns the geographical bounds visible in the current map view"
         ],
         "params": {},
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": null,
         "id": "map-getbounds"
        },
        "getMinZoom": {
         "name": "getMinZoom",
         "aka": [],
         "comments": [
          "Returns the minimum zoom level of the map (if set in the `minZoom` option of the map or of any layers), or `0` by default."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "map-getminzoom"
        },
        "getMaxZoom": {
         "name": "getMaxZoom",
         "aka": [],
         "comments": [
          "Returns the maximum zoom level of the map (if set in the `maxZoom` option of the map or of any layers)."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "map-getmaxzoom"
        },
        "getBoundsZoom": {
         "name": "getBoundsZoom",
         "aka": [],
         "comments": [
          "Returns the maximum zoom level on which the given bounds fit to the map",
          "view in its entirety. If `inside` (optional) is set to `true`, the method",
          "instead returns the minimum zoom level on which the map view fits into",
          "the given bounds in its entirety."
         ],
         "params": {
          "bounds": {
           "name": "bounds",
           "type": "LatLngBounds"
          },
          "inside?": {
           "name": "inside?",
           "type": "Boolean"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "map-getboundszoom"
        },
        "getSize": {
         "name": "getSize",
         "aka": [],
         "comments": [
          "Returns the current size of the map container (in pixels)."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-getsize"
        },
        "getPixelBounds": {
         "name": "getPixelBounds",
         "aka": [],
         "comments": [
          "Returns the bounds of the current map view in projected pixel",
          "coordinates (sometimes useful in layer and overlay implementations)."
         ],
         "params": {},
         "type": "Bounds",
         "optional": false,
         "defaultValue": null,
         "id": "map-getpixelbounds"
        },
        "getPixelOrigin": {
         "name": "getPixelOrigin",
         "aka": [],
         "comments": [
          "Returns the projected pixel coordinates of the top left point of",
          "the map layer (useful in custom layer and overlay implementations)."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-getpixelorigin"
        },
        "getPixelWorldBounds": {
         "name": "getPixelWorldBounds",
         "aka": [],
         "comments": [
          "Returns the world's bounds in pixel coordinates for zoom level `zoom`.",
          "If `zoom` is omitted, the map's current zoom level is used."
         ],
         "params": {
          "zoom?": {
           "name": "zoom?",
           "type": "Number"
          }
         },
         "type": "Bounds",
         "optional": false,
         "defaultValue": null,
         "id": "map-getpixelworldbounds"
        }
       },
       "type": "method",
       "id": "map-methods-for-getting-map-state"
      },
      "Conversion Methods": {
       "name": "Conversion Methods",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "getZoomScale": {
         "name": "getZoomScale",
         "aka": [],
         "comments": [
          "Returns the scale factor to be applied to a map transition from zoom level",
          "`fromZoom` to `toZoom`. Used internally to help with zoom animations."
         ],
         "params": {
          "toZoom": {
           "name": "toZoom",
           "type": "Number"
          },
          "fromZoom": {
           "name": "fromZoom",
           "type": "Number"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "map-getzoomscale"
        },
        "getScaleZoom": {
         "name": "getScaleZoom",
         "aka": [],
         "comments": [
          "Returns the zoom level that the map would end up at, if it is at `fromZoom`",
          "level and everything is scaled by a factor of `scale`. Inverse of",
          "[`getZoomScale`](#map-getZoomScale)."
         ],
         "params": {
          "scale": {
           "name": "scale",
           "type": "Number"
          },
          "fromZoom": {
           "name": "fromZoom",
           "type": "Number"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "map-getscalezoom"
        },
        "project": {
         "name": "project",
         "aka": [],
         "comments": [
          "Projects a geographical coordinate `LatLng` according to the projection",
          "of the map's CRS, then scales it according to `zoom` and the CRS's",
          "`Transformation`. The result is pixel coordinate relative to",
          "the CRS origin."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "zoom": {
           "name": "zoom",
           "type": "Number"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-project"
        },
        "unproject": {
         "name": "unproject",
         "aka": [],
         "comments": [
          "Inverse of [`project`](#map-project)."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          },
          "zoom": {
           "name": "zoom",
           "type": "Number"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "map-unproject"
        },
        "layerPointToLatLng": {
         "name": "layerPointToLatLng",
         "aka": [],
         "comments": [
          "Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin),",
          "returns the corresponding geographical coordinate (for the current zoom level)."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "map-layerpointtolatlng"
        },
        "latLngToLayerPoint": {
         "name": "latLngToLayerPoint",
         "aka": [],
         "comments": [
          "Given a geographical coordinate, returns the corresponding pixel coordinate",
          "relative to the [origin pixel](#map-getpixelorigin)."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-latlngtolayerpoint"
        },
        "wrapLatLng": {
         "name": "wrapLatLng",
         "aka": [],
         "comments": [
          "Returns a `LatLng` where `lat` and `lng` has been wrapped according to the",
          "map's CRS's `wrapLat` and `wrapLng` properties, if they are outside the",
          "CRS's bounds.",
          "By default this means longitude is wrapped around the dateline so its",
          "value is between -180 and +180 degrees."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "map-wraplatlng"
        },
        "distance": {
         "name": "distance",
         "aka": [],
         "comments": [
          "Returns the distance between two geographical coordinates according to",
          "the map's CRS. By default this measures distance in meters."
         ],
         "params": {
          "latlng1": {
           "name": "latlng1",
           "type": "LatLng"
          },
          "latlng2": {
           "name": "latlng2",
           "type": "LatLng"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "map-distance"
        },
        "containerPointToLayerPoint": {
         "name": "containerPointToLayerPoint",
         "aka": [],
         "comments": [
          "Given a pixel coordinate relative to the map container, returns the corresponding",
          "pixel coordinate relative to the [origin pixel](#map-getpixelorigin)."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-containerpointtolayerpoint"
        },
        "layerPointToContainerPoint": {
         "name": "layerPointToContainerPoint",
         "aka": [],
         "comments": [
          "Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin),",
          "returns the corresponding pixel coordinate relative to the map container."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-layerpointtocontainerpoint"
        },
        "containerPointToLatLng": {
         "name": "containerPointToLatLng",
         "aka": [],
         "comments": [
          "Given a pixel coordinate relative to the map container, returns",
          "the corresponding geographical coordinate (for the current zoom level)."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "map-containerpointtolatlng"
        },
        "latLngToContainerPoint": {
         "name": "latLngToContainerPoint",
         "aka": [],
         "comments": [
          "Given a geographical coordinate, returns the corresponding pixel coordinate",
          "relative to the map container."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-latlngtocontainerpoint"
        },
        "mouseEventToContainerPoint": {
         "name": "mouseEventToContainerPoint",
         "aka": [],
         "comments": [
          "Given a MouseEvent object, returns the pixel coordinate relative to the",
          "map container where the event took place."
         ],
         "params": {
          "ev": {
           "name": "ev",
           "type": "MouseEvent"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-mouseeventtocontainerpoint"
        },
        "mouseEventToLayerPoint": {
         "name": "mouseEventToLayerPoint",
         "aka": [],
         "comments": [
          "Given a MouseEvent object, returns the pixel coordinate relative to",
          "the [origin pixel](#map-getpixelorigin) where the event took place."
         ],
         "params": {
          "ev": {
           "name": "ev",
           "type": "MouseEvent"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "map-mouseeventtolayerpoint"
        },
        "mouseEventToLatLng": {
         "name": "mouseEventToLatLng",
         "aka": [],
         "comments": [
          "Given a MouseEvent object, returns geographical coordinate where the",
          "event took place."
         ],
         "params": {
          "ev": {
           "name": "ev",
           "type": "MouseEvent"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "map-mouseeventtolatlng"
        }
       },
       "type": "method",
       "id": "map-conversion-methods"
      }
     },
     "id": "map-method"
    },
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "// initialize the map on the \"map\" div with a given center and zoom",
          "var map = L.map('map', {",
          "\tcenter: [51.505, -0.09],",
          "\tzoom: 13",
          "});",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "map-example"
      }
     },
     "id": "map-example"
    },
    "pane": {
     "name": "pane",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "Panes are DOM elements used to control the ordering of layers on the map. You",
        "can access panes with [`map.getPane`](#map-getpane) or",
        "[`map.getPanes`](#map-getpanes) methods. New panes can be created with the",
        "[`map.createPane`](#map-createpane) method.",
        "Every map has the following default panes that differ only in zIndex."
       ],
       "uninheritable": false,
       "documentables": {
        "mapPane": {
         "name": "mapPane",
         "aka": [],
         "comments": [
          "Pane that contains all other map panes"
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": "'auto'",
         "id": "map-mappane"
        },
        "tilePane": {
         "name": "tilePane",
         "aka": [],
         "comments": [
          "Pane for `GridLayer`s and `TileLayer`s"
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": "200",
         "id": "map-tilepane"
        },
        "overlayPane": {
         "name": "overlayPane",
         "aka": [],
         "comments": [
          "Pane for vector overlays (`Path`s), like `Polyline`s and `Polygon`s"
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": "400",
         "id": "map-overlaypane"
        },
        "shadowPane": {
         "name": "shadowPane",
         "aka": [],
         "comments": [
          "Pane for overlay shadows (e.g. `Marker` shadows)"
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": "500",
         "id": "map-shadowpane"
        },
        "markerPane": {
         "name": "markerPane",
         "aka": [],
         "comments": [
          "Pane for `Icon`s of `Marker`s"
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": "600",
         "id": "map-markerpane"
        },
        "tooltipPane": {
         "name": "tooltipPane",
         "aka": [],
         "comments": [
          "Pane for tooltip."
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": "650",
         "id": "map-tooltippane"
        },
        "popupPane": {
         "name": "popupPane",
         "aka": [],
         "comments": [
          "Pane for `Popup`s."
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": "700",
         "id": "map-popuppane"
        }
       },
       "type": "pane",
       "id": "map-pane"
      }
     },
     "id": "map-pane"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.map": {
         "name": "L.map",
         "aka": [],
         "comments": [
          "Instantiates a map object given the DOM ID of a `<div>` element",
          "and optionally an object literal with `Map options`."
         ],
         "params": {
          "id": {
           "name": "id",
           "type": "String"
          },
          "options?": {
           "name": "options?",
           "type": "Map options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "map-l-map"
        },
        "L.map-alternative-1": {
         "name": "L.map",
         "aka": [],
         "comments": [
          "Instantiates a map object given an instance of a `<div>` HTML element",
          "and optionally an object literal with `Map options`."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "options?": {
           "name": "options?",
           "type": "Map options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "map-l-map"
        }
       },
       "type": "factory",
       "id": "map-factory"
      }
     },
     "id": "map-factory"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "Handlers": {
       "name": "Handlers",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "boxZoom": {
         "name": "boxZoom",
         "aka": [],
         "comments": [
          "Box (shift-drag with mouse) zoom handler."
         ],
         "params": {},
         "type": "Handler",
         "optional": false,
         "defaultValue": null,
         "id": "map-boxzoom"
        },
        "doubleClickZoom": {
         "name": "doubleClickZoom",
         "aka": [],
         "comments": [
          "Double click zoom handler."
         ],
         "params": {},
         "type": "Handler",
         "optional": false,
         "defaultValue": null,
         "id": "map-doubleclickzoom"
        },
        "dragging": {
         "name": "dragging",
         "aka": [],
         "comments": [
          "Map dragging handler (by both mouse and touch)."
         ],
         "params": {},
         "type": "Handler",
         "optional": false,
         "defaultValue": null,
         "id": "map-dragging"
        },
        "keyboard": {
         "name": "keyboard",
         "aka": [],
         "comments": [
          "Keyboard navigation handler."
         ],
         "params": {},
         "type": "Handler",
         "optional": false,
         "defaultValue": null,
         "id": "map-keyboard"
        },
        "scrollWheelZoom": {
         "name": "scrollWheelZoom",
         "aka": [],
         "comments": [
          "Scroll wheel zoom handler."
         ],
         "params": {},
         "type": "Handler",
         "optional": false,
         "defaultValue": null,
         "id": "map-scrollwheelzoom"
        },
        "tap": {
         "name": "tap",
         "aka": [],
         "comments": [
          "Mobile touch hacks (quick tap and touch hold) handler."
         ],
         "params": {},
         "type": "Handler",
         "optional": false,
         "defaultValue": null,
         "id": "map-tap"
        },
        "touchZoom": {
         "name": "touchZoom",
         "aka": [],
         "comments": [
          "Touch zoom handler."
         ],
         "params": {},
         "type": "Handler",
         "optional": false,
         "defaultValue": null,
         "id": "map-touchzoom"
        }
       },
       "type": "property",
       "id": "map-handlers"
      }
     },
     "id": "map-property"
    }
   },
   "inherits": [
    "Evented"
   ],
   "id": "map"
  },
  "Marker": {
   "name": "Marker",
   "aka": [
    "L.Marker"
   ],
   "comments": [
    "L.Marker is used to display clickable/draggable icons on the map. Extends `Layer`."
   ],
   "supersections": {
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "toGeoJSON": {
         "name": "toGeoJSON",
         "aka": [],
         "comments": [
          "Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the marker (as a GeoJSON `Point` Feature)."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "marker-togeojson"
        },
        "getLatLng": {
         "name": "getLatLng",
         "aka": [],
         "comments": [
          "Returns the current geographical position of the marker."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "marker-getlatlng"
        },
        "setLatLng": {
         "name": "setLatLng",
         "aka": [],
         "comments": [
          "Changes the marker position to the given point."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "marker-setlatlng"
        },
        "setZIndexOffset": {
         "name": "setZIndexOffset",
         "aka": [],
         "comments": [
          "Changes the [zIndex offset](#marker-zindexoffset) of the marker."
         ],
         "params": {
          "offset": {
           "name": "offset",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "marker-setzindexoffset"
        },
        "setIcon": {
         "name": "setIcon",
         "aka": [],
         "comments": [
          "Changes the marker icon."
         ],
         "params": {
          "icon": {
           "name": "icon",
           "type": "Icon"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "marker-seticon"
        },
        "setOpacity": {
         "name": "setOpacity",
         "aka": [],
         "comments": [
          "Changes the opacity of the marker."
         ],
         "params": {
          "opacity": {
           "name": "opacity",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "marker-setopacity"
        }
       },
       "type": "method",
       "id": "marker-method"
      }
     },
     "id": "marker-method"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "Interaction handlers": {
       "name": "Interaction handlers",
       "aka": [],
       "comments": [
        "Interaction handlers are properties of a marker instance that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging (see `Handler` methods). Example:",
        "```js",
        "marker.dragging.disable();",
        "```"
       ],
       "uninheritable": false,
       "documentables": {
        "dragging": {
         "name": "dragging",
         "aka": [],
         "comments": [
          "Marker dragging handler (by both mouse and touch).",
          " "
         ],
         "params": {},
         "type": "Handler",
         "optional": false,
         "defaultValue": null,
         "id": "marker-dragging"
        }
       },
       "type": "property",
       "id": "marker-interaction-handlers"
      }
     },
     "id": "marker-property"
    },
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "In addition to [shared layer methods](#Layer) like `addTo()` and `remove()` and [popup methods](#Popup) like bindPopup() you can also use the following methods:",
        "\t "
       ],
       "uninheritable": false,
       "documentables": {
        "move": {
         "name": "move",
         "aka": [],
         "comments": [
          "Fired when the marker is moved via [`setLatLng`](#marker-setlatlng) or by [dragging](#marker-dragging). Old and new coordinates are included in event arguments as `oldLatLng`, `latlng`."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "marker-move"
        }
       },
       "type": "event",
       "id": "marker-event"
      },
      "Dragging events": {
       "name": "Dragging events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "dragstart": {
         "name": "dragstart",
         "aka": [],
         "comments": [
          "Fired when the user starts dragging the marker."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "marker-dragstart"
        },
        "movestart": {
         "name": "movestart",
         "aka": [],
         "comments": [
          "Fired when the marker starts moving (because of dragging)."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "marker-movestart"
        },
        "drag": {
         "name": "drag",
         "aka": [],
         "comments": [
          "Fired repeatedly while the user drags the marker."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "marker-drag"
        },
        "dragend": {
         "name": "dragend",
         "aka": [],
         "comments": [
          "Fired when the user stops dragging the marker."
         ],
         "params": {},
         "type": "DragEndEvent",
         "optional": false,
         "defaultValue": null,
         "id": "marker-dragend"
        },
        "moveend": {
         "name": "moveend",
         "aka": [],
         "comments": [
          "Fired when the marker stops moving (because of dragging)."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "marker-moveend"
        }
       },
       "type": "event",
       "id": "marker-dragging-events"
      }
     },
     "id": "marker-event"
    },
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "L.marker([50.5, 30.5]).addTo(map);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "marker-example"
      }
     },
     "id": "marker-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Marker options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "icon": {
         "name": "icon",
         "aka": [],
         "comments": [
          "Icon class to use for rendering the marker. See [Icon documentation](#L.Icon) for details on how to customize the marker icon. If not specified, a new `L.Icon.Default` is used."
         ],
         "params": {},
         "type": "Icon",
         "optional": false,
         "defaultValue": "*",
         "id": "marker-icon"
        },
        "draggable": {
         "name": "draggable",
         "aka": [],
         "comments": [
          "Whether the marker is draggable with mouse/touch or not."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "marker-draggable"
        },
        "keyboard": {
         "name": "keyboard",
         "aka": [],
         "comments": [
          "Whether the marker can be tabbed to with a keyboard and clicked by pressing enter."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "marker-keyboard"
        },
        "title": {
         "name": "title",
         "aka": [],
         "comments": [
          "Text for the browser tooltip that appear on marker hover (no tooltip by default)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "marker-title"
        },
        "alt": {
         "name": "alt",
         "aka": [],
         "comments": [
          "Text for the `alt` attribute of the icon image (useful for accessibility)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "marker-alt"
        },
        "zIndexOffset": {
         "name": "zIndexOffset",
         "aka": [],
         "comments": [
          "By default, marker images zIndex is set automatically based on its latitude. Use this option if you want to put the marker on top of all others (or below), specifying a high value like `1000` (or high negative value, respectively)."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0",
         "id": "marker-zindexoffset"
        },
        "opacity": {
         "name": "opacity",
         "aka": [],
         "comments": [
          "The opacity of the marker."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "1.0",
         "id": "marker-opacity"
        },
        "riseOnHover": {
         "name": "riseOnHover",
         "aka": [],
         "comments": [
          "If `true`, the marker will get on top of others when you hover the mouse over it."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "marker-riseonhover"
        },
        "riseOffset": {
         "name": "riseOffset",
         "aka": [],
         "comments": [
          "The z-index offset used for the `riseOnHover` feature."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "250",
         "id": "marker-riseoffset"
        },
        "pane": {
         "name": "pane",
         "aka": [],
         "comments": [
          "`Map pane` where the markers icon will be added."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'markerPane'",
         "id": "marker-pane"
        }
       },
       "type": "option",
       "id": "marker-option"
      }
     },
     "id": "marker-option"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.marker": {
         "name": "L.marker",
         "aka": [],
         "comments": [
          "Instantiates a Marker object given a geographical point and optionally an options object."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "options?": {
           "name": "options?",
           "type": "Marker options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "marker-l-marker"
        }
       },
       "type": "factory",
       "id": "marker-factory"
      }
     },
     "id": "marker-factory"
    }
   },
   "inherits": [
    "Interactive layer"
   ],
   "id": "marker"
  },
  "Popup": {
   "name": "Popup",
   "aka": [
    "L.Popup"
   ],
   "comments": [
    "Used to open popups in certain places of the map. Use [Map.openPopup](#map-openpopup) to",
    "open popups while making sure that only one popup is open at one time",
    "(recommended for usability), or use [Map.addLayer](#map-addlayer) to open as many as you want."
   ],
   "supersections": {
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "getLatLng": {
         "name": "getLatLng",
         "aka": [],
         "comments": [
          "Returns the geographical point of popup."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "popup-getlatlng"
        },
        "setLatLng": {
         "name": "setLatLng",
         "aka": [],
         "comments": [
          "Sets the geographical point where the popup will open."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "popup-setlatlng"
        },
        "getContent": {
         "name": "getContent",
         "aka": [],
         "comments": [
          "Returns the content of the popup."
         ],
         "params": {},
         "type": "String|HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "popup-getcontent"
        },
        "setContent": {
         "name": "setContent",
         "aka": [],
         "comments": [
          "Sets the HTML content of the popup. If a function is passed the source layer will be passed to the function. The function should return a `String` or `HTMLElement` to be used in the popup."
         ],
         "params": {
          "htmlContent": {
           "name": "htmlContent",
           "type": "String|HTMLElement|Function"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "popup-setcontent"
        },
        "getElement": {
         "name": "getElement",
         "aka": [],
         "comments": [
          "Alias for [getContent()](#popup-getcontent)"
         ],
         "params": {},
         "type": "String|HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "popup-getelement"
        },
        "update": {
         "name": "update",
         "aka": [],
         "comments": [
          "Updates the popup content, layout and position. Useful for updating the popup after something inside changed, e.g. image loaded."
         ],
         "params": {},
         "type": "null",
         "optional": false,
         "defaultValue": null,
         "id": "popup-update"
        },
        "isOpen": {
         "name": "isOpen",
         "aka": [],
         "comments": [
          "Returns `true` when the popup is visible on the map."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "popup-isopen"
        },
        "bringToFront": {
         "name": "bringToFront",
         "aka": [],
         "comments": [
          "Brings this popup in front of other popups (in the same map pane)."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "popup-bringtofront"
        },
        "bringToBack": {
         "name": "bringToBack",
         "aka": [],
         "comments": [
          "Brings this popup to the back of other popups (in the same map pane)."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "popup-bringtoback"
        },
        "openOn": {
         "name": "openOn",
         "aka": [],
         "comments": [
          "Adds the popup to the map and closes the previous one. The same as `map.openPopup(popup)`."
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "popup-openon"
        }
       },
       "type": "method",
       "id": "popup-method"
      }
     },
     "id": "popup-method"
    },
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "If you want to just bind a popup to marker click and then open it, it's really easy:",
          "```js",
          "marker.bindPopup(popupContent).openPopup();",
          "```",
          "Path overlays like polylines also have a `bindPopup` method.",
          "Here's a more complicated way to open a popup on a map:",
          "```js",
          "var popup = L.popup()",
          "\t.setLatLng(latlng)",
          "\t.setContent('<p>Hello world!<br />This is a nice popup.</p>')",
          "\t.openOn(map);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "popup-example"
      }
     },
     "id": "popup-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Popup options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "maxWidth": {
         "name": "maxWidth",
         "aka": [],
         "comments": [
          "Max width of the popup, in pixels."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "300",
         "id": "popup-maxwidth"
        },
        "minWidth": {
         "name": "minWidth",
         "aka": [],
         "comments": [
          "Min width of the popup, in pixels."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "50",
         "id": "popup-minwidth"
        },
        "maxHeight": {
         "name": "maxHeight",
         "aka": [],
         "comments": [
          "If set, creates a scrollable container of the given height",
          "inside a popup if its content exceeds it."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "null",
         "id": "popup-maxheight"
        },
        "autoPan": {
         "name": "autoPan",
         "aka": [],
         "comments": [
          "Set it to `false` if you don't want the map to do panning animation",
          "to fit the opened popup."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "popup-autopan"
        },
        "autoPanPaddingTopLeft": {
         "name": "autoPanPaddingTopLeft",
         "aka": [],
         "comments": [
          "The margin between the popup and the top left corner of the map",
          "view after autopanning was performed."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "null",
         "id": "popup-autopanpaddingtopleft"
        },
        "autoPanPaddingBottomRight": {
         "name": "autoPanPaddingBottomRight",
         "aka": [],
         "comments": [
          "The margin between the popup and the bottom right corner of the map",
          "view after autopanning was performed."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "null",
         "id": "popup-autopanpaddingbottomright"
        },
        "autoPanPadding": {
         "name": "autoPanPadding",
         "aka": [],
         "comments": [
          "Equivalent of setting both top left and bottom right autopan padding to the same value."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "Point(5, 5)",
         "id": "popup-autopanpadding"
        },
        "keepInView": {
         "name": "keepInView",
         "aka": [],
         "comments": [
          "Set it to `true` if you want to prevent users from panning the popup",
          "off of the screen while it is open."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "popup-keepinview"
        },
        "closeButton": {
         "name": "closeButton",
         "aka": [],
         "comments": [
          "Controls the presence of a close button in the popup."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "popup-closebutton"
        },
        "autoClose": {
         "name": "autoClose",
         "aka": [],
         "comments": [
          "Set it to `false` if you want to override the default behavior of",
          "the popup closing when user clicks the map (set globally by",
          "the Map's [closePopupOnClick](#map-closepopuponclick) option)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "popup-autoclose"
        },
        "className": {
         "name": "className",
         "aka": [],
         "comments": [
          "A custom CSS class name to assign to the popup."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "popup-classname"
        }
       },
       "type": "option",
       "id": "popup-option"
      }
     },
     "id": "popup-option"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.popup": {
         "name": "L.popup",
         "aka": [],
         "comments": [
          "Instantiates a `Popup` object given an optional `options` object that describes its appearance and location and an optional `source` object that is used to tag the popup with a reference to the Layer to which it refers."
         ],
         "params": {
          "options?": {
           "name": "options?",
           "type": "Popup options"
          },
          "source?": {
           "name": "source?",
           "type": "Layer"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "popup-l-popup"
        }
       },
       "type": "factory",
       "id": "popup-factory"
      }
     },
     "id": "popup-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "popup-event"
    }
   },
   "inherits": [
    "DivOverlay"
   ],
   "id": "popup"
  },
  "Tooltip": {
   "name": "Tooltip",
   "aka": [
    "L.Tooltip"
   ],
   "comments": [
    "Used to display small texts on top of map layers."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "marker.bindTooltip(\"my tooltip text\").openTooltip();",
          "```",
          "Note about tooltip offset. Leaflet takes two options in consideration",
          "for computing tooltip offseting:",
          "- the `offset` Tooltip option: it defaults to [0, 0], and it's specific to one tooltip.",
          "  Add a positive x offset to move the tooltip to the right, and a positive y offset to",
          "  move it to the bottom. Negatives will move to the left and top.",
          "- the `tooltipAnchor` Icon option: this will only be considered for Marker. You",
          "  should adapt this value if you use a custom icon.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "tooltip-example"
      }
     },
     "id": "tooltip-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Tooltip options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "pane": {
         "name": "pane",
         "aka": [],
         "comments": [
          "`Map pane` where the tooltip will be added."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'tooltipPane'",
         "id": "tooltip-pane"
        },
        "offset": {
         "name": "offset",
         "aka": [],
         "comments": [
          "Optional offset of the tooltip position."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "Point(0, 0)",
         "id": "tooltip-offset"
        },
        "direction": {
         "name": "direction",
         "aka": [],
         "comments": [
          "Direction where to open the tooltip. Possible values are: `right`, `left`,",
          "`top`, `bottom`, `center`, `auto`.",
          "`auto` will dynamicaly switch between `right` and `left` according to the tooltip",
          "position on the map."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'auto'",
         "id": "tooltip-direction"
        },
        "permanent": {
         "name": "permanent",
         "aka": [],
         "comments": [
          "Whether to open the tooltip permanently or only on mouseover."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tooltip-permanent"
        },
        "sticky": {
         "name": "sticky",
         "aka": [],
         "comments": [
          "If true, the tooltip will follow the mouse instead of being fixed at the feature center."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tooltip-sticky"
        },
        "interactive": {
         "name": "interactive",
         "aka": [],
         "comments": [
          "If true, the tooltip will listen to the feature events."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tooltip-interactive"
        },
        "opacity": {
         "name": "opacity",
         "aka": [],
         "comments": [
          "Tooltip container opacity."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0.9",
         "id": "tooltip-opacity"
        }
       },
       "type": "option",
       "id": "tooltip-option"
      }
     },
     "id": "tooltip-option"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.tooltip": {
         "name": "L.tooltip",
         "aka": [],
         "comments": [
          "Instantiates a Tooltip object given an optional `options` object that describes its appearance and location and an optional `source` object that is used to tag the tooltip with a reference to the Layer to which it refers."
         ],
         "params": {
          "options?": {
           "name": "options?",
           "type": "Tooltip options"
          },
          "source?": {
           "name": "source?",
           "type": "Layer"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "tooltip-l-tooltip"
        }
       },
       "type": "factory",
       "id": "tooltip-factory"
      }
     },
     "id": "tooltip-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "tooltip-event"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "tooltip-method"
    }
   },
   "inherits": [
    "DivOverlay"
   ],
   "id": "tooltip"
  },
  "TileLayer": {
   "name": "TileLayer",
   "aka": [
    "L.TileLayer"
   ],
   "comments": [
    "Used to load and display tile layers on the map. Extends `GridLayer`."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?{foo}', {foo: 'bar'}).addTo(map);",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "tilelayer-example"
      },
      "URL template": {
       "name": "URL template",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "A string of the following form:",
          "```",
          "'http://{s}.somedomain.com/blabla/{z}/{x}/{y}{r}.png'",
          "```",
          "You can use custom keys in the template, which will be [evaluated](#util-template) from TileLayer options, like this:",
          "```",
          "L.tileLayer('http://{s}.somedomain.com/{foo}/{z}/{x}/{y}.png', {foo: 'bar'});",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "tilelayer-url-template"
      }
     },
     "id": "tilelayer-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "TileLayer options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "minZoom": {
         "name": "minZoom",
         "aka": [],
         "comments": [
          "Minimum zoom number."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0",
         "id": "tilelayer-minzoom"
        },
        "maxZoom": {
         "name": "maxZoom",
         "aka": [],
         "comments": [
          "Maximum zoom number."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "18",
         "id": "tilelayer-maxzoom"
        },
        "maxNativeZoom": {
         "name": "maxNativeZoom",
         "aka": [],
         "comments": [
          "Maximum zoom number the tile source has available. If it is specified,",
          "the tiles on all zoom levels higher than `maxNativeZoom` will be loaded",
          "from `maxNativeZoom` level and auto-scaled."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "null",
         "id": "tilelayer-maxnativezoom"
        },
        "minNativeZoom": {
         "name": "minNativeZoom",
         "aka": [],
         "comments": [
          "Minimum zoom number the tile source has available. If it is specified,",
          "the tiles on all zoom levels lower than `minNativeZoom` will be loaded",
          "from `minNativeZoom` level and auto-scaled."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "null",
         "id": "tilelayer-minnativezoom"
        },
        "subdomains": {
         "name": "subdomains",
         "aka": [],
         "comments": [
          "Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings."
         ],
         "params": {},
         "type": "String|String[]",
         "optional": false,
         "defaultValue": "'abc'",
         "id": "tilelayer-subdomains"
        },
        "errorTileUrl": {
         "name": "errorTileUrl",
         "aka": [],
         "comments": [
          "URL to the tile image to show in place of the tile that failed to load."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "tilelayer-errortileurl"
        },
        "zoomOffset": {
         "name": "zoomOffset",
         "aka": [],
         "comments": [
          "The zoom number used in tile URLs will be offset with this value."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0",
         "id": "tilelayer-zoomoffset"
        },
        "tms": {
         "name": "tms",
         "aka": [],
         "comments": [
          "If `true`, inverses Y axis numbering for tiles (turn this on for [TMS](https://en.wikipedia.org/wiki/Tile_Map_Service) services)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tilelayer-tms"
        },
        "zoomReverse": {
         "name": "zoomReverse",
         "aka": [],
         "comments": [
          "If set to true, the zoom number used in tile URLs will be reversed (`maxZoom - zoom` instead of `zoom`)"
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tilelayer-zoomreverse"
        },
        "detectRetina": {
         "name": "detectRetina",
         "aka": [],
         "comments": [
          "If `true` and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tilelayer-detectretina"
        },
        "crossOrigin": {
         "name": "crossOrigin",
         "aka": [],
         "comments": [
          "If true, all tiles will have their crossOrigin attribute set to ''. This is needed if you want to access tile pixel data."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tilelayer-crossorigin"
        }
       },
       "type": "option",
       "id": "tilelayer-option"
      }
     },
     "id": "tilelayer-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "setUrl": {
         "name": "setUrl",
         "aka": [],
         "comments": [
          "Updates the layer's URL template and redraws it (unless `noRedraw` is set to `true`)."
         ],
         "params": {
          "url": {
           "name": "url",
           "type": "String"
          },
          "noRedraw?": {
           "name": "noRedraw?",
           "type": "Boolean"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "tilelayer-seturl"
        },
        "createTile": {
         "name": "createTile",
         "aka": [],
         "comments": [
          "Called only internally, overrides GridLayer's [`createTile()`](#gridlayer-createtile)",
          "to return an `<img>` HTML element with the appropiate image URL given `coords`. The `done`",
          "callback is called when the tile has been loaded."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Object"
          },
          "done?": {
           "name": "done?",
           "type": "Function"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "tilelayer-createtile"
        }
       },
       "type": "method",
       "id": "tilelayer-method"
      },
      "Extension methods": {
       "name": "Extension methods",
       "aka": [],
       "comments": [
        "Layers extending `TileLayer` might reimplement the following method."
       ],
       "uninheritable": true,
       "documentables": {
        "getTileUrl": {
         "name": "getTileUrl",
         "aka": [],
         "comments": [
          "Called only internally, returns the URL for a tile given its coordinates.",
          "Classes extending `TileLayer` can override this function to provide custom tile URL naming schemes."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Object"
          }
         },
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "tilelayer-gettileurl"
        }
       },
       "type": "method",
       "id": "tilelayer-extension-methods"
      }
     },
     "id": "tilelayer-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "Extension methods": {
       "name": "Extension methods",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.tilelayer": {
         "name": "L.tilelayer",
         "aka": [],
         "comments": [
          "Instantiates a tile layer object given a `URL template` and optionally an options object."
         ],
         "params": {
          "urlTemplate": {
           "name": "urlTemplate",
           "type": "String"
          },
          "options?": {
           "name": "options?",
           "type": "TileLayer options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "tilelayer-l-tilelayer"
        }
       },
       "type": "factory",
       "id": "tilelayer-extension-methods"
      }
     },
     "id": "tilelayer-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "tilelayer-event"
    }
   },
   "inherits": [
    "GridLayer"
   ],
   "id": "tilelayer"
  },
  "TileLayer.WMS": {
   "name": "TileLayer.WMS",
   "aka": [
    "L.TileLayer.WMS"
   ],
   "comments": [
    "Used to display [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) services as tile layers on the map. Extends `TileLayer`."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var nexrad = L.tileLayer.wms(\"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi\", {",
          "\tlayers: 'nexrad-n0r-900913',",
          "\tformat: 'image/png',",
          "\ttransparent: true,",
          "\tattribution: \"Weather data © 2012 IEM Nexrad\"",
          "});",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "tilelayer-wms-example"
      }
     },
     "id": "tilelayer-wms-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "TileLayer.WMS options"
       ],
       "comments": [
        "If any custom options not documented here are used, they will be sent to the",
        "WMS server as extra parameters in each request URL. This can be useful for",
        "[non-standard vendor WMS parameters](http://docs.geoserver.org/stable/en/user/services/wms/vendor.html)."
       ],
       "uninheritable": false,
       "documentables": {
        "layers": {
         "name": "layers",
         "aka": [],
         "comments": [
          "**(required)** Comma-separated list of WMS layers to show."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "tilelayer-wms-layers"
        },
        "styles": {
         "name": "styles",
         "aka": [],
         "comments": [
          "Comma-separated list of WMS styles."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "tilelayer-wms-styles"
        },
        "format": {
         "name": "format",
         "aka": [],
         "comments": [
          "WMS image format (use `'image/png'` for layers with transparency)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'image/jpeg'",
         "id": "tilelayer-wms-format"
        },
        "transparent": {
         "name": "transparent",
         "aka": [],
         "comments": [
          "If `true`, the WMS service will return images with transparency."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tilelayer-wms-transparent"
        },
        "version": {
         "name": "version",
         "aka": [],
         "comments": [
          "Version of the WMS service to use"
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'1.1.1'",
         "id": "tilelayer-wms-version"
        },
        "crs": {
         "name": "crs",
         "aka": [],
         "comments": [
          "Coordinate Reference System to use for the WMS requests, defaults to",
          "map CRS. Don't change this if you're not sure what it means."
         ],
         "params": {},
         "type": "CRS",
         "optional": false,
         "defaultValue": "null",
         "id": "tilelayer-wms-crs"
        },
        "uppercase": {
         "name": "uppercase",
         "aka": [],
         "comments": [
          "If `true`, WMS request parameter keys will be uppercase."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "tilelayer-wms-uppercase"
        }
       },
       "type": "option",
       "id": "tilelayer-wms-option"
      }
     },
     "id": "tilelayer-wms-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "setParams": {
         "name": "setParams",
         "aka": [],
         "comments": [
          "Merges an object with the new parameters and re-requests tiles on the current screen (unless `noRedraw` was set to true)."
         ],
         "params": {
          "params": {
           "name": "params",
           "type": "Object"
          },
          "noRedraw?": {
           "name": "noRedraw?",
           "type": "Boolean"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "tilelayer-wms-setparams"
        }
       },
       "type": "method",
       "id": "tilelayer-wms-method"
      }
     },
     "id": "tilelayer-wms-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.tileLayer.wms": {
         "name": "L.tileLayer.wms",
         "aka": [],
         "comments": [
          "Instantiates a WMS tile layer object given a base URL of the WMS service and a WMS parameters/options object."
         ],
         "params": {
          "baseUrl": {
           "name": "baseUrl",
           "type": "String"
          },
          "options": {
           "name": "options",
           "type": "TileLayer.WMS options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "tilelayer-wms-l-tilelayer-wms"
        }
       },
       "type": "factory",
       "id": "tilelayer-wms-factory"
      }
     },
     "id": "tilelayer-wms-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "tilelayer-wms-event"
    }
   },
   "inherits": [
    "TileLayer"
   ],
   "id": "tilelayer-wms"
  },
  "ImageOverlay": {
   "name": "ImageOverlay",
   "aka": [
    "L.ImageOverlay"
   ],
   "comments": [
    "Used to load and display a single image over specific bounds of the map. Extends `Layer`."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var imageUrl = 'http://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg',",
          "\timageBounds = [[40.712216, -74.22655], [40.773941, -74.12544]];",
          "L.imageOverlay(imageUrl, imageBounds).addTo(map);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "imageoverlay-example"
      }
     },
     "id": "imageoverlay-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "ImageOverlay options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "opacity": {
         "name": "opacity",
         "aka": [],
         "comments": [
          "The opacity of the image overlay."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "1.0",
         "id": "imageoverlay-opacity"
        },
        "alt": {
         "name": "alt",
         "aka": [],
         "comments": [
          "Text for the `alt` attribute of the image (useful for accessibility)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "imageoverlay-alt"
        },
        "interactive": {
         "name": "interactive",
         "aka": [],
         "comments": [
          "If `true`, the image overlay will emit [mouse events](#interactive-layer) when clicked or hovered."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "imageoverlay-interactive"
        },
        "crossOrigin": {
         "name": "crossOrigin",
         "aka": [],
         "comments": [
          "If true, the image will have its crossOrigin attribute set to ''. This is needed if you want to access image pixel data."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "imageoverlay-crossorigin"
        }
       },
       "type": "option",
       "id": "imageoverlay-option"
      }
     },
     "id": "imageoverlay-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "setOpacity": {
         "name": "setOpacity",
         "aka": [],
         "comments": [
          "Sets the opacity of the overlay."
         ],
         "params": {
          "opacity": {
           "name": "opacity",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "imageoverlay-setopacity"
        },
        "bringToFront": {
         "name": "bringToFront",
         "aka": [],
         "comments": [
          "Brings the layer to the top of all overlays."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "imageoverlay-bringtofront"
        },
        "bringToBack": {
         "name": "bringToBack",
         "aka": [],
         "comments": [
          "Brings the layer to the bottom of all overlays."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "imageoverlay-bringtoback"
        },
        "setUrl": {
         "name": "setUrl",
         "aka": [],
         "comments": [
          "Changes the URL of the image."
         ],
         "params": {
          "url": {
           "name": "url",
           "type": "String"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "imageoverlay-seturl"
        },
        "setBounds": {
         "name": "setBounds",
         "aka": [],
         "comments": [
          "Update the bounds that this ImageOverlay covers"
         ],
         "params": {
          "bounds": {
           "name": "bounds",
           "type": "LatLngBounds"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "imageoverlay-setbounds"
        },
        "getBounds": {
         "name": "getBounds",
         "aka": [],
         "comments": [
          "Get the bounds that this ImageOverlay covers"
         ],
         "params": {},
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": null,
         "id": "imageoverlay-getbounds"
        },
        "getElement": {
         "name": "getElement",
         "aka": [],
         "comments": [
          "Get the img element that represents the ImageOverlay on the map"
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "imageoverlay-getelement"
        }
       },
       "type": "method",
       "id": "imageoverlay-method"
      }
     },
     "id": "imageoverlay-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.imageOverlay": {
         "name": "L.imageOverlay",
         "aka": [],
         "comments": [
          "Instantiates an image overlay object given the URL of the image and the",
          "geographical bounds it is tied to."
         ],
         "params": {
          "imageUrl": {
           "name": "imageUrl",
           "type": "String"
          },
          "bounds": {
           "name": "bounds",
           "type": "LatLngBounds"
          },
          "options?": {
           "name": "options?",
           "type": "ImageOverlay options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "imageoverlay-l-imageoverlay"
        }
       },
       "type": "factory",
       "id": "imageoverlay-factory"
      }
     },
     "id": "imageoverlay-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "imageoverlay-event"
    }
   },
   "inherits": [
    "Interactive layer"
   ],
   "id": "imageoverlay"
  },
  "Path": {
   "name": "Path",
   "aka": [
    "L.Path"
   ],
   "comments": [
    "An abstract class that contains options and constants shared between vector",
    "overlays (Polygon, Polyline, Circle). Do not use it directly. Extends `Layer`.",
    " "
   ],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Path options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "stroke": {
         "name": "stroke",
         "aka": [],
         "comments": [
          "Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "path-stroke"
        },
        "color": {
         "name": "color",
         "aka": [],
         "comments": [
          "Stroke color"
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'#3388ff'",
         "id": "path-color"
        },
        "weight": {
         "name": "weight",
         "aka": [],
         "comments": [
          "Stroke width in pixels"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "3",
         "id": "path-weight"
        },
        "opacity": {
         "name": "opacity",
         "aka": [],
         "comments": [
          "Stroke opacity"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "1.0",
         "id": "path-opacity"
        },
        "lineCap": {
         "name": "lineCap",
         "aka": [],
         "comments": [
          "A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'round'",
         "id": "path-linecap"
        },
        "lineJoin": {
         "name": "lineJoin",
         "aka": [],
         "comments": [
          "A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'round'",
         "id": "path-linejoin"
        },
        "dashArray": {
         "name": "dashArray",
         "aka": [],
         "comments": [
          "A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on `Canvas`-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "null",
         "id": "path-dasharray"
        },
        "dashOffset": {
         "name": "dashOffset",
         "aka": [],
         "comments": [
          "A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on `Canvas`-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "null",
         "id": "path-dashoffset"
        },
        "fill": {
         "name": "fill",
         "aka": [],
         "comments": [
          "Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "depends",
         "id": "path-fill"
        },
        "fillColor": {
         "name": "fillColor",
         "aka": [],
         "comments": [
          "Fill color. Defaults to the value of the [`color`](#path-color) option"
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "*",
         "id": "path-fillcolor"
        },
        "fillOpacity": {
         "name": "fillOpacity",
         "aka": [],
         "comments": [
          "Fill opacity."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0.2",
         "id": "path-fillopacity"
        },
        "fillRule": {
         "name": "fillRule",
         "aka": [],
         "comments": [
          "A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'evenodd'",
         "id": "path-fillrule"
        },
        "renderer": {
         "name": "renderer",
         "aka": [],
         "comments": [
          "Use this specific instance of `Renderer` for this path. Takes",
          "precedence over the map's [default renderer](#map-renderer)."
         ],
         "params": {},
         "type": "Renderer",
         "optional": false,
         "defaultValue": null,
         "id": "path-renderer"
        },
        "className": {
         "name": "className",
         "aka": [],
         "comments": [
          "Custom class name set on an element. Only for SVG renderer."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "null",
         "id": "path-classname"
        }
       },
       "type": "option",
       "id": "path-option"
      }
     },
     "id": "path-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "redraw": {
         "name": "redraw",
         "aka": [],
         "comments": [
          "Redraws the layer. Sometimes useful after you changed the coordinates that the path uses."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "path-redraw"
        },
        "setStyle": {
         "name": "setStyle",
         "aka": [],
         "comments": [
          "Changes the appearance of a Path based on the options in the `Path options` object."
         ],
         "params": {
          "style": {
           "name": "style",
           "type": "Path options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "path-setstyle"
        },
        "bringToFront": {
         "name": "bringToFront",
         "aka": [],
         "comments": [
          "Brings the layer to the top of all path layers."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "path-bringtofront"
        },
        "bringToBack": {
         "name": "bringToBack",
         "aka": [],
         "comments": [
          "Brings the layer to the bottom of all path layers."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "path-bringtoback"
        }
       },
       "type": "method",
       "id": "path-method"
      }
     },
     "id": "path-method"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "path-event"
    }
   },
   "inherits": [
    "Interactive layer"
   ],
   "id": "path"
  },
  "Polyline": {
   "name": "Polyline",
   "aka": [
    "L.Polyline"
   ],
   "comments": [
    "A class for drawing polyline overlays on a map. Extends `Path`."
   ],
   "supersections": {
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "toGeoJSON": {
         "name": "toGeoJSON",
         "aka": [],
         "comments": [
          "Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the polyline (as a GeoJSON `LineString` or `MultiLineString` Feature)."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "polyline-togeojson"
        },
        "getLatLngs": {
         "name": "getLatLngs",
         "aka": [],
         "comments": [
          "Returns an array of the points in the path, or nested arrays of points in case of multi-polyline."
         ],
         "params": {},
         "type": "LatLng[]",
         "optional": false,
         "defaultValue": null,
         "id": "polyline-getlatlngs"
        },
        "setLatLngs": {
         "name": "setLatLngs",
         "aka": [],
         "comments": [
          "Replaces all the points in the polyline with the given array of geographical points."
         ],
         "params": {
          "latlngs": {
           "name": "latlngs",
           "type": "LatLng[]"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "polyline-setlatlngs"
        },
        "isEmpty": {
         "name": "isEmpty",
         "aka": [],
         "comments": [
          "Returns `true` if the Polyline has no LatLngs."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "polyline-isempty"
        },
        "getCenter": {
         "name": "getCenter",
         "aka": [],
         "comments": [
          "Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the polyline."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "polyline-getcenter"
        },
        "getBounds": {
         "name": "getBounds",
         "aka": [],
         "comments": [
          "Returns the `LatLngBounds` of the path."
         ],
         "params": {},
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": null,
         "id": "polyline-getbounds"
        },
        "addLatLng": {
         "name": "addLatLng",
         "aka": [],
         "comments": [
          "Adds a given point to the polyline. By default, adds to the first ring of",
          "the polyline in case of a multi-polyline, but can be overridden by passing",
          "a specific ring as a LatLng array (that you can earlier access with [`getLatLngs`](#polyline-getlatlngs))."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "polyline-addlatlng"
        }
       },
       "type": "method",
       "id": "polyline-method"
      }
     },
     "id": "polyline-method"
    },
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "// create a red polyline from an array of LatLng points",
          "var latlngs = [",
          "\t[45.51, -122.68],",
          "\t[37.77, -122.43],",
          "\t[34.04, -118.2]",
          "];",
          "var polyline = L.polyline(latlngs, {color: 'red'}).addTo(map);",
          "// zoom the map to the polyline",
          "map.fitBounds(polyline.getBounds());",
          "```",
          "You can also pass a multi-dimensional array to represent a `MultiPolyline` shape:",
          "```js",
          "// create a red polyline from an array of arrays of LatLng points",
          "var latlngs = [",
          "\t[[45.51, -122.68],",
          "\t [37.77, -122.43],",
          "\t [34.04, -118.2]],",
          "\t[[40.78, -73.91],",
          "\t [41.83, -87.62],",
          "\t [32.76, -96.72]]",
          "];",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "polyline-example"
      }
     },
     "id": "polyline-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Polyline options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "smoothFactor": {
         "name": "smoothFactor",
         "aka": [],
         "comments": [
          "How much to simplify the polyline on each zoom level. More means",
          "better performance and smoother look, and less means more accurate representation."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "1.0",
         "id": "polyline-smoothfactor"
        },
        "noClip": {
         "name": "noClip",
         "aka": [],
         "comments": [
          "Disable polyline clipping."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "polyline-noclip"
        }
       },
       "type": "option",
       "id": "polyline-option"
      }
     },
     "id": "polyline-option"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.polyline": {
         "name": "L.polyline",
         "aka": [],
         "comments": [
          "Instantiates a polyline object given an array of geographical points and",
          "optionally an options object. You can create a `Polyline` object with",
          "multiple separate lines (`MultiPolyline`) by passing an array of arrays",
          "of geographic points."
         ],
         "params": {
          "latlngs": {
           "name": "latlngs",
           "type": "LatLng[]"
          },
          "options?": {
           "name": "options?",
           "type": "Polyline options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "polyline-l-polyline"
        }
       },
       "type": "factory",
       "id": "polyline-factory"
      }
     },
     "id": "polyline-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "polyline-event"
    }
   },
   "inherits": [
    "Path"
   ],
   "id": "polyline"
  },
  "Polygon": {
   "name": "Polygon",
   "aka": [
    "L.Polygon"
   ],
   "comments": [
    "A class for drawing polygon overlays on a map. Extends `Polyline`.",
    "Note that points you pass when creating a polygon shouldn't have an additional last point equal to the first one — it's better to filter out such points."
   ],
   "supersections": {
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "toGeoJSON": {
         "name": "toGeoJSON",
         "aka": [],
         "comments": [
          "Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the polygon (as a GeoJSON `Polygon` or `MultiPolygon` Feature)."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "polygon-togeojson"
        }
       },
       "type": "method",
       "id": "polygon-method"
      }
     },
     "id": "polygon-method"
    },
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "// create a red polygon from an array of LatLng points",
          "var latlngs = [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]];",
          "var polygon = L.polygon(latlngs, {color: 'red'}).addTo(map);",
          "// zoom the map to the polygon",
          "map.fitBounds(polygon.getBounds());",
          "```",
          "You can also pass an array of arrays of latlngs, with the first array representing the outer shape and the other arrays representing holes in the outer shape:",
          "```js",
          "var latlngs = [",
          "  [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]], // outer ring",
          "  [[37.29, -108.58],[40.71, -108.58],[40.71, -102.50],[37.29, -102.50]] // hole",
          "];",
          "```",
          "Additionally, you can pass a multi-dimensional array to represent a MultiPolygon shape.",
          "```js",
          "var latlngs = [",
          "  [ // first polygon",
          "    [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]], // outer ring",
          "    [[37.29, -108.58],[40.71, -108.58],[40.71, -102.50],[37.29, -102.50]] // hole",
          "  ],",
          "  [ // second polygon",
          "    [[41, -111.03],[45, -111.04],[45, -104.05],[41, -104.05]]",
          "  ]",
          "];",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "polygon-example"
      }
     },
     "id": "polygon-example"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.polygon": {
         "name": "L.polygon",
         "aka": [],
         "comments": [],
         "params": {
          "latlngs": {
           "name": "latlngs",
           "type": "LatLng[]"
          },
          "options?": {
           "name": "options?",
           "type": "Polyline options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "polygon-l-polygon"
        }
       },
       "type": "factory",
       "id": "polygon-factory"
      }
     },
     "id": "polygon-factory"
    },
    "option": {
     "name": "option",
     "sections": {},
     "id": "polygon-option"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "polygon-event"
    }
   },
   "inherits": [
    "Polyline"
   ],
   "id": "polygon"
  },
  "Rectangle": {
   "name": "Rectangle",
   "aka": [
    "L.Retangle"
   ],
   "comments": [
    "A class for drawing rectangle overlays on a map. Extends `Polygon`."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "// define rectangle geographical bounds",
          "var bounds = [[54.559322, -5.767822], [56.1210604, -3.021240]];",
          "// create an orange rectangle",
          "L.rectangle(bounds, {color: \"#ff7800\", weight: 1}).addTo(map);",
          "// zoom the map to the rectangle bounds",
          "map.fitBounds(bounds);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "rectangle-example"
      }
     },
     "id": "rectangle-example"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "setBounds": {
         "name": "setBounds",
         "aka": [],
         "comments": [
          "Redraws the rectangle with the passed bounds."
         ],
         "params": {
          "latLngBounds": {
           "name": "latLngBounds",
           "type": "LatLngBounds"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "rectangle-setbounds"
        }
       },
       "type": "method",
       "id": "rectangle-method"
      }
     },
     "id": "rectangle-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.rectangle": {
         "name": "L.rectangle",
         "aka": [],
         "comments": [],
         "params": {
          "latLngBounds": {
           "name": "latLngBounds",
           "type": "LatLngBounds"
          },
          "options?": {
           "name": "options?",
           "type": "Polyline options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "rectangle-l-rectangle"
        }
       },
       "type": "factory",
       "id": "rectangle-factory"
      }
     },
     "id": "rectangle-factory"
    },
    "option": {
     "name": "option",
     "sections": {},
     "id": "rectangle-option"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "rectangle-event"
    }
   },
   "inherits": [
    "Polygon"
   ],
   "id": "rectangle"
  },
  "Circle": {
   "name": "Circle",
   "aka": [
    "L.Circle"
   ],
   "comments": [
    "A class for drawing circle overlays on a map. Extends `CircleMarker`.",
    "It's an approximation and starts to diverge from a real circle closer to poles (due to projection distortion)."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "L.circle([50.5, 30.5], {radius: 200}).addTo(map);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "circle-example"
      }
     },
     "id": "circle-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Circle options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "radius": {
         "name": "radius",
         "aka": [],
         "comments": [
          "Radius of the circle, in meters."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "circle-radius"
        }
       },
       "type": "option",
       "id": "circle-option"
      }
     },
     "id": "circle-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "setRadius": {
         "name": "setRadius",
         "aka": [],
         "comments": [
          "Sets the radius of a circle. Units are in meters."
         ],
         "params": {
          "radius": {
           "name": "radius",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "circle-setradius"
        },
        "getRadius": {
         "name": "getRadius",
         "aka": [],
         "comments": [
          "Returns the current radius of a circle. Units are in meters."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "circle-getradius"
        },
        "getBounds": {
         "name": "getBounds",
         "aka": [],
         "comments": [
          "Returns the `LatLngBounds` of the path."
         ],
         "params": {},
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": null,
         "id": "circle-getbounds"
        }
       },
       "type": "method",
       "id": "circle-method"
      }
     },
     "id": "circle-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.circle": {
         "name": "L.circle",
         "aka": [],
         "comments": [
          "Instantiates a circle object given a geographical point, and an options object",
          "which contains the circle radius."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "options?": {
           "name": "options?",
           "type": "Circle options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "circle-l-circle"
        },
        "L.circle-alternative-1": {
         "name": "L.circle",
         "aka": [],
         "comments": [
          "Obsolete way of instantiating a circle, for compatibility with 0.7.x code.",
          "Do not use in new applications or plugins."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "radius": {
           "name": "radius",
           "type": "Number"
          },
          "options?": {
           "name": "options?",
           "type": "Circle options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "circle-l-circle"
        }
       },
       "type": "factory",
       "id": "circle-factory"
      }
     },
     "id": "circle-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "circle-event"
    }
   },
   "inherits": [
    "CircleMarker"
   ],
   "id": "circle"
  },
  "CircleMarker": {
   "name": "CircleMarker",
   "aka": [
    "L.CircleMarker"
   ],
   "comments": [
    "A circle of a fixed size with radius specified in pixels. Extends `Path`.",
    " "
   ],
   "supersections": {
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "toGeoJSON": {
         "name": "toGeoJSON",
         "aka": [],
         "comments": [
          "Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the circle marker (as a GeoJSON `Point` Feature)."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "circlemarker-togeojson"
        },
        "setLatLng": {
         "name": "setLatLng",
         "aka": [],
         "comments": [
          "Sets the position of a circle marker to a new location."
         ],
         "params": {
          "latLng": {
           "name": "latLng",
           "type": "LatLng"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "circlemarker-setlatlng"
        },
        "getLatLng": {
         "name": "getLatLng",
         "aka": [],
         "comments": [
          "Returns the current geographical position of the circle marker"
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "circlemarker-getlatlng"
        },
        "setRadius": {
         "name": "setRadius",
         "aka": [],
         "comments": [
          "Sets the radius of a circle marker. Units are in pixels."
         ],
         "params": {
          "radius": {
           "name": "radius",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "circlemarker-setradius"
        },
        "getRadius": {
         "name": "getRadius",
         "aka": [],
         "comments": [
          "Returns the current radius of the circle"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "circlemarker-getradius"
        }
       },
       "type": "method",
       "id": "circlemarker-method"
      }
     },
     "id": "circlemarker-method"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "CircleMarker options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "radius": {
         "name": "radius",
         "aka": [],
         "comments": [
          "Radius of the circle marker, in pixels"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "10",
         "id": "circlemarker-radius"
        }
       },
       "type": "option",
       "id": "circlemarker-option"
      }
     },
     "id": "circlemarker-option"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.circleMarker": {
         "name": "L.circleMarker",
         "aka": [],
         "comments": [
          "Instantiates a circle marker object given a geographical point, and an optional options object."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "options?": {
           "name": "options?",
           "type": "CircleMarker options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "circlemarker-l-circlemarker"
        }
       },
       "type": "factory",
       "id": "circlemarker-factory"
      }
     },
     "id": "circlemarker-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "circlemarker-event"
    }
   },
   "inherits": [
    "Path"
   ],
   "id": "circlemarker"
  },
  "SVG": {
   "name": "SVG",
   "aka": [
    "L.SVG"
   ],
   "comments": [
    "Although SVG is not available on IE7 and IE8, these browsers support [VML](https://en.wikipedia.org/wiki/Vector_Markup_Language), and the SVG renderer will fall back to VML in this case.",
    "VML was deprecated in 2012, which means VML functionality exists only for backwards compatibility",
    "with old versions of Internet Explorer.",
    " ",
    "Allows vector layers to be displayed with [SVG](https://developer.mozilla.org/docs/Web/SVG).",
    "Inherits `Renderer`.",
    "Due to [technical limitations](http://caniuse.com/#search=svg), SVG is not",
    "available in all web browsers, notably Android 2.x and 3.x.",
    "Although SVG is not available on IE7 and IE8, these browsers support",
    "[VML](https://en.wikipedia.org/wiki/Vector_Markup_Language)",
    "(a now deprecated technology), and the SVG renderer will fall back to VML in",
    "this case."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "Use SVG by default for all paths in the map:",
          "```js",
          "var map = L.map('map', {",
          "\trenderer: L.svg()",
          "});",
          "```",
          "Use a SVG renderer with extra padding for specific vector geometries:",
          "```js",
          "var map = L.map('map');",
          "var myRenderer = L.svg({ padding: 0.5 });",
          "var line = L.polyline( coordinates, { renderer: myRenderer } );",
          "var circle = L.circle( center, { renderer: myRenderer } );",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "svg-example"
      }
     },
     "id": "svg-example"
    },
    "function": {
     "name": "function",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "There are several static functions which can be called without instantiating L.SVG:"
       ],
       "uninheritable": false,
       "documentables": {
        "create": {
         "name": "create",
         "aka": [],
         "comments": [
          "Returns a instance of [SVGElement](https://developer.mozilla.org/docs/Web/API/SVGElement),",
          "corresponding to the class name passed. For example, using 'line' will return",
          "an instance of [SVGLineElement](https://developer.mozilla.org/docs/Web/API/SVGLineElement)."
         ],
         "params": {
          "name": {
           "name": "name",
           "type": "String"
          }
         },
         "type": "SVGElement",
         "optional": false,
         "defaultValue": null,
         "id": "svg-create"
        },
        "pointsToPath": {
         "name": "pointsToPath",
         "aka": [],
         "comments": [
          "Generates a SVG path string for multiple rings, with each ring turning",
          "into \"M..L..L..\" instructions"
         ],
         "params": {
          "rings": {
           "name": "rings",
           "type": "Point[]"
          },
          "closed": {
           "name": "closed",
           "type": "Boolean"
          }
         },
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "svg-pointstopath"
        }
       },
       "type": "function",
       "id": "svg-function"
      }
     },
     "id": "svg-function"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.svg": {
         "name": "L.svg",
         "aka": [],
         "comments": [
          "Creates a SVG renderer with the given options."
         ],
         "params": {
          "options?": {
           "name": "options?",
           "type": "Renderer options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "svg-l-svg"
        }
       },
       "type": "factory",
       "id": "svg-factory"
      }
     },
     "id": "svg-factory"
    },
    "option": {
     "name": "option",
     "sections": {},
     "id": "svg-option"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "svg-event"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "svg-method"
    }
   },
   "inherits": [
    "Renderer"
   ],
   "id": "svg"
  },
  "Canvas": {
   "name": "Canvas",
   "aka": [
    "L.Canvas"
   ],
   "comments": [
    "Allows vector layers to be displayed with [`<canvas>`](https://developer.mozilla.org/docs/Web/API/Canvas_API).",
    "Inherits `Renderer`.",
    "Due to [technical limitations](http://caniuse.com/#search=canvas), Canvas is not",
    "available in all web browsers, notably IE8, and overlapping geometries might",
    "not display properly in some edge cases."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "Use Canvas by default for all paths in the map:",
          "```js",
          "var map = L.map('map', {",
          "\trenderer: L.canvas()",
          "});",
          "```",
          "Use a Canvas renderer with extra padding for specific vector geometries:",
          "```js",
          "var map = L.map('map');",
          "var myRenderer = L.canvas({ padding: 0.5 });",
          "var line = L.polyline( coordinates, { renderer: myRenderer } );",
          "var circle = L.circle( center, { renderer: myRenderer } );",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "canvas-example"
      }
     },
     "id": "canvas-example"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.canvas": {
         "name": "L.canvas",
         "aka": [],
         "comments": [
          "Creates a Canvas renderer with the given options."
         ],
         "params": {
          "options?": {
           "name": "options?",
           "type": "Renderer options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "canvas-l-canvas"
        }
       },
       "type": "factory",
       "id": "canvas-factory"
      }
     },
     "id": "canvas-factory"
    },
    "option": {
     "name": "option",
     "sections": {},
     "id": "canvas-option"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "canvas-event"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "canvas-method"
    }
   },
   "inherits": [
    "Renderer"
   ],
   "id": "canvas"
  },
  "LayerGroup": {
   "name": "LayerGroup",
   "aka": [
    "L.LayerGroup"
   ],
   "comments": [
    "Used to group several layers and handle them as one. If you add it to the map,",
    "any layers added or removed from the group will be added/removed on the map as",
    "well. Extends `Layer`."
   ],
   "supersections": {
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "toGeoJSON": {
         "name": "toGeoJSON",
         "aka": [],
         "comments": [
          "Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the layer group (as a GeoJSON `GeometryCollection`)."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-togeojson"
        },
        "addLayer": {
         "name": "addLayer",
         "aka": [],
         "comments": [
          "Adds the given layer to the group."
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-addlayer"
        },
        "removeLayer": {
         "name": "removeLayer",
         "aka": [],
         "comments": [
          "Removes the given layer from the group."
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-removelayer"
        },
        "removeLayer-alternative-1": {
         "name": "removeLayer",
         "aka": [],
         "comments": [
          "Removes the layer with the given internal ID from the group."
         ],
         "params": {
          "id": {
           "name": "id",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-removelayer"
        },
        "hasLayer": {
         "name": "hasLayer",
         "aka": [],
         "comments": [
          "Returns `true` if the given layer is currently added to the group."
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-haslayer"
        },
        "clearLayers": {
         "name": "clearLayers",
         "aka": [],
         "comments": [
          "Removes all the layers from the group."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-clearlayers"
        },
        "invoke": {
         "name": "invoke",
         "aka": [],
         "comments": [
          "Calls `methodName` on every layer contained in this group, passing any",
          "additional parameters. Has no effect if the layers contained do not",
          "implement `methodName`."
         ],
         "params": {
          "methodName": {
           "name": "methodName",
           "type": "String"
          },
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-invoke"
        },
        "eachLayer": {
         "name": "eachLayer",
         "aka": [],
         "comments": [
          "Iterates over the layers of the group, optionally specifying context of the iterator function.",
          "```js",
          "group.eachLayer(function (layer) {",
          "\tlayer.bindPopup('Hello');",
          "});",
          "```"
         ],
         "params": {
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-eachlayer"
        },
        "getLayer": {
         "name": "getLayer",
         "aka": [],
         "comments": [
          "Returns the layer with the given internal ID."
         ],
         "params": {
          "id": {
           "name": "id",
           "type": "Number"
          }
         },
         "type": "Layer",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-getlayer"
        },
        "getLayers": {
         "name": "getLayers",
         "aka": [],
         "comments": [
          "Returns an array of all the layers added to the group."
         ],
         "params": {},
         "type": "Layer[]",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-getlayers"
        },
        "setZIndex": {
         "name": "setZIndex",
         "aka": [],
         "comments": [
          "Calls `setZIndex` on every layer contained in this group, passing the z-index."
         ],
         "params": {
          "zIndex": {
           "name": "zIndex",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-setzindex"
        },
        "getLayerId": {
         "name": "getLayerId",
         "aka": [],
         "comments": [
          "Returns the internal ID for a layer"
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-getlayerid"
        }
       },
       "type": "method",
       "id": "layergroup-method"
      }
     },
     "id": "layergroup-method"
    },
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "L.layerGroup([marker1, marker2])",
          "\t.addLayer(polyline)",
          "\t.addTo(map);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "layergroup-example"
      }
     },
     "id": "layergroup-example"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.layerGroup": {
         "name": "L.layerGroup",
         "aka": [],
         "comments": [
          "Create a layer group, optionally given an initial set of layers."
         ],
         "params": {
          "layers": {
           "name": "layers",
           "type": "Layer[]"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "layergroup-l-layergroup"
        }
       },
       "type": "factory",
       "id": "layergroup-factory"
      }
     },
     "id": "layergroup-factory"
    },
    "option": {
     "name": "option",
     "sections": {},
     "id": "layergroup-option"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "layergroup-event"
    }
   },
   "inherits": [
    "Layer"
   ],
   "id": "layergroup"
  },
  "FeatureGroup": {
   "name": "FeatureGroup",
   "aka": [
    "L.FeatureGroup"
   ],
   "comments": [
    "Extended `LayerGroup` that makes it easier to do the same thing to all its member layers:",
    " * [`bindPopup`](#layer-bindpopup) binds a popup to all of the layers at once (likewise with [`bindTooltip`](#layer-bindtooltip))",
    " * Events are propagated to the `FeatureGroup`, so if the group has an event",
    "handler, it will handle events from any of the layers. This includes mouse events",
    "and custom events.",
    " * Has `layeradd` and `layerremove` events"
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "L.featureGroup([marker1, marker2, polyline])",
          "\t.bindPopup('Hello world!')",
          "\t.on('click', function() { alert('Clicked on a member of the group!'); })",
          "\t.addTo(map);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "featuregroup-example"
      }
     },
     "id": "featuregroup-example"
    },
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "layeradd": {
         "name": "layeradd",
         "aka": [],
         "comments": [
          "Fired when a layer is added to this `FeatureGroup`"
         ],
         "params": {},
         "type": "LayerEvent",
         "optional": false,
         "defaultValue": null,
         "id": "featuregroup-layeradd"
        },
        "layerremove": {
         "name": "layerremove",
         "aka": [],
         "comments": [
          "Fired when a layer is removed from this `FeatureGroup`"
         ],
         "params": {},
         "type": "LayerEvent",
         "optional": false,
         "defaultValue": null,
         "id": "featuregroup-layerremove"
        }
       },
       "type": "event",
       "id": "featuregroup-event"
      }
     },
     "id": "featuregroup-event"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "setStyle": {
         "name": "setStyle",
         "aka": [],
         "comments": [
          "Sets the given path options to each layer of the group that has a `setStyle` method."
         ],
         "params": {
          "style": {
           "name": "style",
           "type": "Path options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "featuregroup-setstyle"
        },
        "bringToFront": {
         "name": "bringToFront",
         "aka": [],
         "comments": [
          "Brings the layer group to the top of all other layers"
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "featuregroup-bringtofront"
        },
        "bringToBack": {
         "name": "bringToBack",
         "aka": [],
         "comments": [
          "Brings the layer group to the top of all other layers"
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "featuregroup-bringtoback"
        },
        "getBounds": {
         "name": "getBounds",
         "aka": [],
         "comments": [
          "Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children)."
         ],
         "params": {},
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": null,
         "id": "featuregroup-getbounds"
        }
       },
       "type": "method",
       "id": "featuregroup-method"
      }
     },
     "id": "featuregroup-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.featureGroup": {
         "name": "L.featureGroup",
         "aka": [],
         "comments": [
          "Create a feature group, optionally given an initial set of layers."
         ],
         "params": {
          "layers": {
           "name": "layers",
           "type": "Layer[]"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "featuregroup-l-featuregroup"
        }
       },
       "type": "factory",
       "id": "featuregroup-factory"
      }
     },
     "id": "featuregroup-factory"
    },
    "option": {
     "name": "option",
     "sections": {},
     "id": "featuregroup-option"
    }
   },
   "inherits": [
    "LayerGroup"
   ],
   "id": "featuregroup"
  },
  "GeoJSON": {
   "name": "GeoJSON",
   "aka": [
    "L.GeoJSON"
   ],
   "comments": [
    "Represents a GeoJSON object or an array of GeoJSON objects. Allows you to parse",
    "GeoJSON data and display it on the map. Extends `FeatureGroup`."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "L.geoJSON(data, {",
          "\tstyle: function (feature) {",
          "\t\treturn {color: feature.properties.color};",
          "\t}",
          "}).bindPopup(function (layer) {",
          "\treturn layer.feature.properties.description;",
          "}).addTo(map);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "geojson-example"
      }
     },
     "id": "geojson-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "GeoJSON options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "pointToLayer": {
         "name": "pointToLayer",
         "aka": [],
         "comments": [
          "A `Function` defining how GeoJSON points spawn Leaflet layers. It is internally",
          "called when data is added, passing the GeoJSON point feature and its `LatLng`.",
          "The default is to spawn a default `Marker`:",
          "```js",
          "function(geoJsonPoint, latlng) {",
          "\treturn L.marker(latlng);",
          "}",
          "```"
         ],
         "params": {},
         "type": "Function",
         "optional": false,
         "defaultValue": "*",
         "id": "geojson-pointtolayer"
        },
        "style": {
         "name": "style",
         "aka": [],
         "comments": [
          "A `Function` defining the `Path options` for styling GeoJSON lines and polygons,",
          "called internally when data is added.",
          "The default value is to not override any defaults:",
          "```js",
          "function (geoJsonFeature) {",
          "\treturn {}",
          "}",
          "```"
         ],
         "params": {},
         "type": "Function",
         "optional": false,
         "defaultValue": "*",
         "id": "geojson-style"
        },
        "onEachFeature": {
         "name": "onEachFeature",
         "aka": [],
         "comments": [
          "A `Function` that will be called once for each created `Feature`, after it has",
          "been created and styled. Useful for attaching events and popups to features.",
          "The default is to do nothing with the newly created layers:",
          "```js",
          "function (feature, layer) {}",
          "```"
         ],
         "params": {},
         "type": "Function",
         "optional": false,
         "defaultValue": "*",
         "id": "geojson-oneachfeature"
        },
        "filter": {
         "name": "filter",
         "aka": [],
         "comments": [
          "A `Function` that will be used to decide whether to include a feature or not.",
          "The default is to include all features:",
          "```js",
          "function (geoJsonFeature) {",
          "\treturn true;",
          "}",
          "```",
          "Note: dynamically changing the `filter` option will have effect only on newly",
          "added data. It will _not_ re-evaluate already included features."
         ],
         "params": {},
         "type": "Function",
         "optional": false,
         "defaultValue": "*",
         "id": "geojson-filter"
        },
        "coordsToLatLng": {
         "name": "coordsToLatLng",
         "aka": [],
         "comments": [
          "A `Function` that will be used for converting GeoJSON coordinates to `LatLng`s.",
          "The default is the `coordsToLatLng` static method.",
          "\t "
         ],
         "params": {},
         "type": "Function",
         "optional": false,
         "defaultValue": "*",
         "id": "geojson-coordstolatlng"
        }
       },
       "type": "option",
       "id": "geojson-option"
      }
     },
     "id": "geojson-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "addData": {
         "name": "addData",
         "aka": [],
         "comments": [
          "Adds a GeoJSON object to the layer."
         ],
         "params": {
          "data": {
           "name": "data"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-adddata"
        },
        "resetStyle": {
         "name": "resetStyle",
         "aka": [],
         "comments": [
          "Resets the given vector layer's style to the original GeoJSON style, useful for resetting style after hover events."
         ],
         "params": {
          "layer": {
           "name": "layer"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-resetstyle"
        },
        "setStyle": {
         "name": "setStyle",
         "aka": [],
         "comments": [
          "Changes styles of GeoJSON vector layers with the given style function."
         ],
         "params": {
          "style": {
           "name": "style"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-setstyle"
        }
       },
       "type": "method",
       "id": "geojson-method"
      }
     },
     "id": "geojson-method"
    },
    "function": {
     "name": "function",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "There are several static functions which can be called without instantiating L.GeoJSON:"
       ],
       "uninheritable": false,
       "documentables": {
        "geometryToLayer": {
         "name": "geometryToLayer",
         "aka": [],
         "comments": [
          "Creates a `Layer` from a given GeoJSON feature. Can use a custom",
          "[`pointToLayer`](#geojson-pointtolayer) and/or [`coordsToLatLng`](#geojson-coordstolatlng)",
          "functions if provided as options."
         ],
         "params": {
          "featureData": {
           "name": "featureData",
           "type": "Object"
          },
          "options?": {
           "name": "options?",
           "type": "GeoJSON options"
          }
         },
         "type": "Layer",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-geometrytolayer"
        },
        "coordsToLatLng": {
         "name": "coordsToLatLng",
         "aka": [],
         "comments": [
          "Creates a `LatLng` object from an array of 2 numbers (longitude, latitude)",
          "or 3 numbers (longitude, latitude, altitude) used in GeoJSON for points."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Array"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-coordstolatlng"
        },
        "coordsToLatLngs": {
         "name": "coordsToLatLngs",
         "aka": [],
         "comments": [
          "Creates a multidimensional array of `LatLng`s from a GeoJSON coordinates array.",
          "`levelsDeep` specifies the nesting level (0 is for an array of points, 1 for an array of arrays of points, etc., 0 by default).",
          "Can use a custom [`coordsToLatLng`](#geojson-coordstolatlng) function."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Array"
          },
          "levelsDeep?": {
           "name": "levelsDeep?",
           "type": "Number"
          },
          "coordsToLatLng?": {
           "name": "coordsToLatLng?",
           "type": "Function"
          }
         },
         "type": "Array",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-coordstolatlngs"
        },
        "latLngToCoords": {
         "name": "latLngToCoords",
         "aka": [],
         "comments": [
          "Reverse of [`coordsToLatLng`](#geojson-coordstolatlng)"
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "Array",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-latlngtocoords"
        },
        "latLngsToCoords": {
         "name": "latLngsToCoords",
         "aka": [],
         "comments": [
          "Reverse of [`coordsToLatLngs`](#geojson-coordstolatlngs)",
          "`closed` determines whether the first point should be appended to the end of the array to close the feature, only used when `levelsDeep` is 0. False by default."
         ],
         "params": {
          "latlngs": {
           "name": "latlngs",
           "type": "Array"
          },
          "levelsDeep?": {
           "name": "levelsDeep?",
           "type": "Number"
          },
          "closed?": {
           "name": "closed?",
           "type": "Boolean"
          }
         },
         "type": "Array",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-latlngstocoords"
        },
        "asFeature": {
         "name": "asFeature",
         "aka": [],
         "comments": [
          "Normalize GeoJSON geometries/features into GeoJSON features."
         ],
         "params": {
          "geojson": {
           "name": "geojson",
           "type": "Object"
          }
         },
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "geojson-asfeature"
        }
       },
       "type": "function",
       "id": "geojson-function"
      }
     },
     "id": "geojson-function"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.geoJSON": {
         "name": "L.geoJSON",
         "aka": [],
         "comments": [
          "Creates a GeoJSON layer. Optionally accepts an object in",
          "[GeoJSON format](http://geojson.org/geojson-spec.html) to display on the map",
          "(you can alternatively add it later with `addData` method) and an `options` object."
         ],
         "params": {
          "geojson?": {
           "name": "geojson?",
           "type": "Object"
          },
          "options?": {
           "name": "options?",
           "type": "GeoJSON options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "geojson-l-geojson"
        }
       },
       "type": "factory",
       "id": "geojson-factory"
      }
     },
     "id": "geojson-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "geojson-event"
    }
   },
   "inherits": [
    "FeatureGroup"
   ],
   "id": "geojson"
  },
  "GridLayer": {
   "name": "GridLayer",
   "aka": [
    "L.GridLayer"
   ],
   "comments": [
    "Generic class for handling a tiled grid of HTML elements. This is the base class for all tile layers and replaces `TileLayer.Canvas`.",
    "GridLayer can be extended to create a tiled grid of HTML elements like `<canvas>`, `<img>` or `<div>`. GridLayer will handle creating and animating these DOM elements for you."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "Synchronous usage": {
       "name": "Synchronous usage",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "To create a custom layer, extend GridLayer and implement the `createTile()` method, which will be passed a `Point` object with the `x`, `y`, and `z` (zoom level) coordinates to draw your tile.",
          "```js",
          "var CanvasLayer = L.GridLayer.extend({",
          "    createTile: function(coords){",
          "        // create a <canvas> element for drawing",
          "        var tile = L.DomUtil.create('canvas', 'leaflet-tile');",
          "        // setup tile width and height according to the options",
          "        var size = this.getTileSize();",
          "        tile.width = size.x;",
          "        tile.height = size.y;",
          "        // get a canvas context and draw something on it using coords.x, coords.y and coords.z",
          "        var ctx = tile.getContext('2d');",
          "        // return the tile so it can be rendered on screen",
          "        return tile;",
          "    }",
          "});",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "gridlayer-synchronous-usage"
      },
      "Asynchronous usage": {
       "name": "Asynchronous usage",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "Tile creation can also be asynchronous, this is useful when using a third-party drawing library. Once the tile is finished drawing it can be passed to the `done()` callback.",
          "```js",
          "var CanvasLayer = L.GridLayer.extend({",
          "    createTile: function(coords, done){",
          "        var error;",
          "        // create a <canvas> element for drawing",
          "        var tile = L.DomUtil.create('canvas', 'leaflet-tile');",
          "        // setup tile width and height according to the options",
          "        var size = this.getTileSize();",
          "        tile.width = size.x;",
          "        tile.height = size.y;",
          "        // draw something asynchronously and pass the tile to the done() callback",
          "        setTimeout(function() {",
          "            done(error, tile);",
          "        }, 1000);",
          "        return tile;",
          "    }",
          "});",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "gridlayer-asynchronous-usage"
      }
     },
     "id": "gridlayer-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "GridLayer options"
       ],
       "comments": [
        " "
       ],
       "uninheritable": false,
       "documentables": {
        "tileSize": {
         "name": "tileSize",
         "aka": [],
         "comments": [
          "Width and height of tiles in the grid. Use a number if width and height are equal, or `L.point(width, height)` otherwise."
         ],
         "params": {},
         "type": "Number|Point",
         "optional": false,
         "defaultValue": "256",
         "id": "gridlayer-tilesize"
        },
        "opacity": {
         "name": "opacity",
         "aka": [],
         "comments": [
          "Opacity of the tiles. Can be used in the `createTile()` function."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "1.0",
         "id": "gridlayer-opacity"
        },
        "updateWhenIdle": {
         "name": "updateWhenIdle",
         "aka": [],
         "comments": [
          "If `false`, new tiles are loaded during panning, otherwise only after it (for better performance). `true` by default on mobile browsers, otherwise `false`."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "depends",
         "id": "gridlayer-updatewhenidle"
        },
        "updateWhenZooming": {
         "name": "updateWhenZooming",
         "aka": [],
         "comments": [
          "By default, a smooth zoom animation (during a [touch zoom](#map-touchzoom) or a [`flyTo()`](#map-flyto)) will update grid layers every integer zoom level. Setting this option to `false` will update the grid layer only when the smooth animation ends."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "gridlayer-updatewhenzooming"
        },
        "updateInterval": {
         "name": "updateInterval",
         "aka": [],
         "comments": [
          "Tiles will not update more than once every `updateInterval` milliseconds when panning."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "200",
         "id": "gridlayer-updateinterval"
        },
        "zIndex": {
         "name": "zIndex",
         "aka": [],
         "comments": [
          "The explicit zIndex of the tile layer."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "1",
         "id": "gridlayer-zindex"
        },
        "bounds": {
         "name": "bounds",
         "aka": [],
         "comments": [
          "If set, tiles will only be loaded inside the set `LatLngBounds`."
         ],
         "params": {},
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": "undefined",
         "id": "gridlayer-bounds"
        },
        "minZoom": {
         "name": "minZoom",
         "aka": [],
         "comments": [
          "The minimum zoom level that tiles will be loaded at. By default the entire map."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0",
         "id": "gridlayer-minzoom"
        },
        "maxZoom": {
         "name": "maxZoom",
         "aka": [],
         "comments": [
          "The maximum zoom level that tiles will be loaded at."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "undefined",
         "id": "gridlayer-maxzoom"
        },
        "noWrap": {
         "name": "noWrap",
         "aka": [],
         "comments": [
          "Whether the layer is wrapped around the antimeridian. If `true`, the",
          "GridLayer will only be displayed once at low zoom levels. Has no",
          "effect when the [map CRS](#map-crs) doesn't wrap around. Can be used",
          "in combination with [`bounds`](#gridlayer-bounds) to prevent requesting",
          "tiles outside the CRS limits."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "gridlayer-nowrap"
        },
        "pane": {
         "name": "pane",
         "aka": [],
         "comments": [
          "`Map pane` where the grid layer will be added."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'tilePane'",
         "id": "gridlayer-pane"
        },
        "className": {
         "name": "className",
         "aka": [],
         "comments": [
          "A custom class name to assign to the tile layer. Empty by default."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "gridlayer-classname"
        },
        "keepBuffer": {
         "name": "keepBuffer",
         "aka": [],
         "comments": [
          "When panning the map, keep this many rows and columns of tiles before unloading them."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "2",
         "id": "gridlayer-keepbuffer"
        }
       },
       "type": "option",
       "id": "gridlayer-option"
      }
     },
     "id": "gridlayer-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "bringToFront": {
         "name": "bringToFront",
         "aka": [],
         "comments": [
          "Brings the tile layer to the top of all tile layers."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-bringtofront"
        },
        "bringToBack": {
         "name": "bringToBack",
         "aka": [],
         "comments": [
          "Brings the tile layer to the bottom of all tile layers."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-bringtoback"
        },
        "getContainer": {
         "name": "getContainer",
         "aka": [],
         "comments": [
          "Returns the HTML element that contains the tiles for this layer."
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-getcontainer"
        },
        "setOpacity": {
         "name": "setOpacity",
         "aka": [],
         "comments": [
          "Changes the [opacity](#gridlayer-opacity) of the grid layer."
         ],
         "params": {
          "opacity": {
           "name": "opacity",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-setopacity"
        },
        "setZIndex": {
         "name": "setZIndex",
         "aka": [],
         "comments": [
          "Changes the [zIndex](#gridlayer-zindex) of the grid layer."
         ],
         "params": {
          "zIndex": {
           "name": "zIndex",
           "type": "Number"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-setzindex"
        },
        "isLoading": {
         "name": "isLoading",
         "aka": [],
         "comments": [
          "Returns `true` if any tile in the grid layer has not finished loading."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-isloading"
        },
        "redraw": {
         "name": "redraw",
         "aka": [],
         "comments": [
          "Causes the layer to clear all the tiles and request them again."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-redraw"
        },
        "getTileSize": {
         "name": "getTileSize",
         "aka": [],
         "comments": [
          "Normalizes the [tileSize option](#gridlayer-tilesize) into a point. Used by the `createTile()` method."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-gettilesize"
        }
       },
       "type": "method",
       "id": "gridlayer-method"
      },
      "Extension methods": {
       "name": "Extension methods",
       "aka": [],
       "comments": [
        "Layers extending `GridLayer` shall reimplement the following method."
       ],
       "uninheritable": false,
       "documentables": {
        "createTile": {
         "name": "createTile",
         "aka": [],
         "comments": [
          "Called only internally, must be overriden by classes extending `GridLayer`.",
          "Returns the `HTMLElement` corresponding to the given `coords`. If the `done` callback",
          "is specified, it must be called when the tile has finished loading and drawing."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Object"
          },
          "done?": {
           "name": "done?",
           "type": "Function"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-createtile"
        }
       },
       "type": "method",
       "id": "gridlayer-extension-methods"
      }
     },
     "id": "gridlayer-method"
    },
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "loading": {
         "name": "loading",
         "aka": [],
         "comments": [
          "Fired when the grid layer starts loading tiles."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-loading"
        },
        "tileunload": {
         "name": "tileunload",
         "aka": [],
         "comments": [
          "Fired when a tile is removed (e.g. when a tile goes off the screen)."
         ],
         "params": {},
         "type": "TileEvent",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-tileunload"
        },
        "tileloadstart": {
         "name": "tileloadstart",
         "aka": [],
         "comments": [
          "Fired when a tile is requested and starts loading."
         ],
         "params": {},
         "type": "TileEvent",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-tileloadstart"
        },
        "tileerror": {
         "name": "tileerror",
         "aka": [],
         "comments": [
          "Fired when there is an error loading a tile."
         ],
         "params": {},
         "type": "TileErrorEvent",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-tileerror"
        },
        "tileload": {
         "name": "tileload",
         "aka": [],
         "comments": [
          "Fired when a tile loads."
         ],
         "params": {},
         "type": "TileEvent",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-tileload"
        },
        "load": {
         "name": "load",
         "aka": [],
         "comments": [
          "Fired when the grid layer loaded all visible tiles."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-load"
        }
       },
       "type": "event",
       "id": "gridlayer-event"
      }
     },
     "id": "gridlayer-event"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.gridLayer": {
         "name": "L.gridLayer",
         "aka": [],
         "comments": [
          "Creates a new instance of GridLayer with the supplied options."
         ],
         "params": {
          "options?": {
           "name": "options?",
           "type": "GridLayer options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "gridlayer-l-gridlayer"
        }
       },
       "type": "factory",
       "id": "gridlayer-factory"
      }
     },
     "id": "gridlayer-factory"
    }
   },
   "inherits": [
    "Layer"
   ],
   "id": "gridlayer"
  },
  "LatLng": {
   "name": "LatLng",
   "aka": [
    "L.LatLng"
   ],
   "comments": [
    "Represents a geographical point with a certain latitude and longitude."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```",
          "var latlng = L.latLng(50.5, 30.5);",
          "```",
          "All Leaflet methods that accept LatLng objects also accept them in a simple Array form and simple object form (unless noted otherwise), so these lines are equivalent:",
          "```",
          "map.panTo([50, 30]);",
          "map.panTo({lon: 30, lat: 50});",
          "map.panTo({lat: 50, lng: 30});",
          "map.panTo(L.latLng(50, 30));",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "latlng-example"
      }
     },
     "id": "latlng-example"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "lat": {
         "name": "lat",
         "aka": [],
         "comments": [
          "Latitude in degrees"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-lat"
        },
        "lng": {
         "name": "lng",
         "aka": [],
         "comments": [
          "Longitude in degrees"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-lng"
        },
        "alt": {
         "name": "alt",
         "aka": [],
         "comments": [
          "Altitude in meters (optional)"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-alt"
        }
       },
       "type": "property",
       "id": "latlng-property"
      }
     },
     "id": "latlng-property"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "equals": {
         "name": "equals",
         "aka": [],
         "comments": [
          "Returns `true` if the given `LatLng` point is at the same position (within a small margin of error). The margin of error can be overriden by setting `maxMargin` to a small number."
         ],
         "params": {
          "otherLatLng": {
           "name": "otherLatLng",
           "type": "LatLng"
          },
          "maxMargin?": {
           "name": "maxMargin?",
           "type": "Number"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-equals"
        },
        "toString": {
         "name": "toString",
         "aka": [],
         "comments": [
          "Returns a string representation of the point (for debugging purposes)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-tostring"
        },
        "distanceTo": {
         "name": "distanceTo",
         "aka": [],
         "comments": [
          "Returns the distance (in meters) to the given `LatLng` calculated using the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula)."
         ],
         "params": {
          "otherLatLng": {
           "name": "otherLatLng",
           "type": "LatLng"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-distanceto"
        },
        "wrap": {
         "name": "wrap",
         "aka": [],
         "comments": [
          "Returns a new `LatLng` object with the longitude wrapped so it's always between -180 and +180 degrees."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-wrap"
        },
        "toBounds": {
         "name": "toBounds",
         "aka": [],
         "comments": [
          "Returns a new `LatLngBounds` object in which each boundary is `sizeInMeters/2` meters apart from the `LatLng`."
         ],
         "params": {
          "sizeInMeters": {
           "name": "sizeInMeters",
           "type": "Number"
          }
         },
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-tobounds"
        }
       },
       "type": "method",
       "id": "latlng-method"
      }
     },
     "id": "latlng-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.latLng": {
         "name": "L.latLng",
         "aka": [],
         "comments": [
          "Creates an object representing a geographical point with the given latitude and longitude (and optionally altitude)."
         ],
         "params": {
          "latitude": {
           "name": "latitude",
           "type": "Number"
          },
          "longitude": {
           "name": "longitude",
           "type": "Number"
          },
          "altitude?": {
           "name": "altitude?",
           "type": "Number"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-l-latlng"
        },
        "L.latLng-alternative-1": {
         "name": "L.latLng",
         "aka": [],
         "comments": [
          "Expects an array of the form `[Number, Number]` or `[Number, Number, Number]` instead."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Array"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-l-latlng"
        },
        "L.latLng-alternative-2": {
         "name": "L.latLng",
         "aka": [],
         "comments": [
          "Expects an plain object of the form `{lat: Number, lng: Number}` or `{lat: Number, lng: Number, alt: Number}` instead."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Object"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlng-l-latlng"
        }
       },
       "type": "factory",
       "id": "latlng-factory"
      }
     },
     "id": "latlng-factory"
    }
   },
   "inherits": [],
   "id": "latlng"
  },
  "LatLngBounds": {
   "name": "LatLngBounds",
   "aka": [
    "L.LatLngBounds"
   ],
   "comments": [
    "Represents a rectangular geographical area on a map."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var corner1 = L.latLng(40.712, -74.227),",
          "corner2 = L.latLng(40.774, -74.125),",
          "bounds = L.latLngBounds(corner1, corner2);",
          "```",
          "All Leaflet methods that accept LatLngBounds objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:",
          "```js",
          "map.fitBounds([",
          "\t[40.712, -74.227],",
          "\t[40.774, -74.125]",
          "]);",
          "```",
          "Caution: if the area crosses the antimeridian (often confused with the International Date Line), you must specify corners _outside_ the [-180, 180] degrees longitude range.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "latlngbounds-example"
      }
     },
     "id": "latlngbounds-example"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "extend": {
         "name": "extend",
         "aka": [],
         "comments": [
          "Extend the bounds to contain the given point"
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-extend"
        },
        "extend-alternative-1": {
         "name": "extend",
         "aka": [],
         "comments": [
          "Extend the bounds to contain the given bounds"
         ],
         "params": {
          "otherBounds": {
           "name": "otherBounds",
           "type": "LatLngBounds"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-extend"
        },
        "pad": {
         "name": "pad",
         "aka": [],
         "comments": [
          "Returns bigger bounds created by extending the current bounds by a given percentage in each direction."
         ],
         "params": {
          "bufferRatio": {
           "name": "bufferRatio",
           "type": "Number"
          }
         },
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-pad"
        },
        "getCenter": {
         "name": "getCenter",
         "aka": [],
         "comments": [
          "Returns the center point of the bounds."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-getcenter"
        },
        "getSouthWest": {
         "name": "getSouthWest",
         "aka": [],
         "comments": [
          "Returns the south-west point of the bounds."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-getsouthwest"
        },
        "getNorthEast": {
         "name": "getNorthEast",
         "aka": [],
         "comments": [
          "Returns the north-east point of the bounds."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-getnortheast"
        },
        "getNorthWest": {
         "name": "getNorthWest",
         "aka": [],
         "comments": [
          "Returns the north-west point of the bounds."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-getnorthwest"
        },
        "getSouthEast": {
         "name": "getSouthEast",
         "aka": [],
         "comments": [
          "Returns the south-east point of the bounds."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-getsoutheast"
        },
        "getWest": {
         "name": "getWest",
         "aka": [],
         "comments": [
          "Returns the west longitude of the bounds"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-getwest"
        },
        "getSouth": {
         "name": "getSouth",
         "aka": [],
         "comments": [
          "Returns the south latitude of the bounds"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-getsouth"
        },
        "getEast": {
         "name": "getEast",
         "aka": [],
         "comments": [
          "Returns the east longitude of the bounds"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-geteast"
        },
        "getNorth": {
         "name": "getNorth",
         "aka": [],
         "comments": [
          "Returns the north latitude of the bounds"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-getnorth"
        },
        "contains": {
         "name": "contains",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle contains the given one."
         ],
         "params": {
          "otherBounds": {
           "name": "otherBounds",
           "type": "LatLngBounds"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-contains"
        },
        "contains-alternative-1": {
         "name": "contains",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle contains the given point."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-contains"
        },
        "intersects": {
         "name": "intersects",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle intersects the given bounds. Two bounds intersect if they have at least one point in common."
         ],
         "params": {
          "otherBounds": {
           "name": "otherBounds",
           "type": "LatLngBounds"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-intersects"
        },
        "overlaps": {
         "name": "overlaps",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle overlaps the given bounds. Two bounds overlap if their intersection is an area."
         ],
         "params": {
          "otherBounds": {
           "name": "otherBounds",
           "type": "Bounds"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-overlaps"
        },
        "toBBoxString": {
         "name": "toBBoxString",
         "aka": [],
         "comments": [
          "Returns a string with bounding box coordinates in a 'southwest_lng,southwest_lat,northeast_lng,northeast_lat' format. Useful for sending requests to web services that return geo data."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-tobboxstring"
        },
        "equals": {
         "name": "equals",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle is equivalent (within a small margin of error) to the given bounds."
         ],
         "params": {
          "otherBounds": {
           "name": "otherBounds",
           "type": "LatLngBounds"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-equals"
        },
        "isValid": {
         "name": "isValid",
         "aka": [],
         "comments": [
          "Returns `true` if the bounds are properly initialized."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-isvalid"
        }
       },
       "type": "method",
       "id": "latlngbounds-method"
      }
     },
     "id": "latlngbounds-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.latLngBounds": {
         "name": "L.latLngBounds",
         "aka": [],
         "comments": [
          "Creates a `LatLngBounds` object by defining two diagonally opposite corners of the rectangle."
         ],
         "params": {
          "corner1": {
           "name": "corner1",
           "type": "LatLng"
          },
          "corner2": {
           "name": "corner2",
           "type": "LatLng"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-l-latlngbounds"
        },
        "L.latLngBounds-alternative-1": {
         "name": "L.latLngBounds",
         "aka": [],
         "comments": [
          "Creates a `LatLngBounds` object defined by the geographical points it contains. Very useful for zooming the map to fit a particular set of locations with [`fitBounds`](#map-fitbounds)."
         ],
         "params": {
          "latlngs": {
           "name": "latlngs",
           "type": "LatLng[]"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "latlngbounds-l-latlngbounds"
        }
       },
       "type": "factory",
       "id": "latlngbounds-factory"
      }
     },
     "id": "latlngbounds-factory"
    }
   },
   "inherits": [],
   "id": "latlngbounds"
  },
  "Point": {
   "name": "Point",
   "aka": [
    "L.Point"
   ],
   "comments": [
    "Represents a point with `x` and `y` coordinates in pixels."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var point = L.point(200, 300);",
          "```",
          "All Leaflet methods and options that accept `Point` objects also accept them in a simple Array form (unless noted otherwise), so these lines are equivalent:",
          "```js",
          "map.panBy([200, 300]);",
          "map.panBy(L.point(200, 300));",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "point-example"
      }
     },
     "id": "point-example"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "x": {
         "name": "x",
         "aka": [],
         "comments": [
          "The `x` coordinate of the point"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "point-x"
        },
        "y": {
         "name": "y",
         "aka": [],
         "comments": [
          "The `y` coordinate of the point"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "point-y"
        }
       },
       "type": "property",
       "id": "point-property"
      }
     },
     "id": "point-property"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "clone": {
         "name": "clone",
         "aka": [],
         "comments": [
          "Returns a copy of the current point."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-clone"
        },
        "add": {
         "name": "add",
         "aka": [],
         "comments": [
          "Returns the result of addition of the current and the given points."
         ],
         "params": {
          "otherPoint": {
           "name": "otherPoint",
           "type": "Point"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-add"
        },
        "subtract": {
         "name": "subtract",
         "aka": [],
         "comments": [
          "Returns the result of subtraction of the given point from the current."
         ],
         "params": {
          "otherPoint": {
           "name": "otherPoint",
           "type": "Point"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-subtract"
        },
        "divideBy": {
         "name": "divideBy",
         "aka": [],
         "comments": [
          "Returns the result of division of the current point by the given number."
         ],
         "params": {
          "num": {
           "name": "num",
           "type": "Number"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-divideby"
        },
        "multiplyBy": {
         "name": "multiplyBy",
         "aka": [],
         "comments": [
          "Returns the result of multiplication of the current point by the given number."
         ],
         "params": {
          "num": {
           "name": "num",
           "type": "Number"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-multiplyby"
        },
        "scaleBy": {
         "name": "scaleBy",
         "aka": [],
         "comments": [
          "Multiply each coordinate of the current point by each coordinate of",
          "`scale`. In linear algebra terms, multiply the point by the",
          "[scaling matrix](https://en.wikipedia.org/wiki/Scaling_%28geometry%29#Matrix_representation)",
          "defined by `scale`."
         ],
         "params": {
          "scale": {
           "name": "scale",
           "type": "Point"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-scaleby"
        },
        "unscaleBy": {
         "name": "unscaleBy",
         "aka": [],
         "comments": [
          "Inverse of `scaleBy`. Divide each coordinate of the current point by",
          "each coordinate of `scale`."
         ],
         "params": {
          "scale": {
           "name": "scale",
           "type": "Point"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-unscaleby"
        },
        "round": {
         "name": "round",
         "aka": [],
         "comments": [
          "Returns a copy of the current point with rounded coordinates."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-round"
        },
        "floor": {
         "name": "floor",
         "aka": [],
         "comments": [
          "Returns a copy of the current point with floored coordinates (rounded down)."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-floor"
        },
        "ceil": {
         "name": "ceil",
         "aka": [],
         "comments": [
          "Returns a copy of the current point with ceiled coordinates (rounded up)."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "point-ceil"
        },
        "distanceTo": {
         "name": "distanceTo",
         "aka": [],
         "comments": [
          "Returns the cartesian distance between the current and the given points."
         ],
         "params": {
          "otherPoint": {
           "name": "otherPoint",
           "type": "Point"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "point-distanceto"
        },
        "equals": {
         "name": "equals",
         "aka": [],
         "comments": [
          "Returns `true` if the given point has the same coordinates."
         ],
         "params": {
          "otherPoint": {
           "name": "otherPoint",
           "type": "Point"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "point-equals"
        },
        "contains": {
         "name": "contains",
         "aka": [],
         "comments": [
          "Returns `true` if both coordinates of the given point are less than the corresponding current point coordinates (in absolute values)."
         ],
         "params": {
          "otherPoint": {
           "name": "otherPoint",
           "type": "Point"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "point-contains"
        },
        "toString": {
         "name": "toString",
         "aka": [],
         "comments": [
          "Returns a string representation of the point for debugging purposes."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "point-tostring"
        }
       },
       "type": "method",
       "id": "point-method"
      }
     },
     "id": "point-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.point": {
         "name": "L.point",
         "aka": [],
         "comments": [
          "Creates a Point object with the given `x` and `y` coordinates. If optional `round` is set to true, rounds the `x` and `y` values."
         ],
         "params": {
          "x": {
           "name": "x",
           "type": "Number"
          },
          "y": {
           "name": "y",
           "type": "Number"
          },
          "round?": {
           "name": "round?",
           "type": "Boolean"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "point-l-point"
        },
        "L.point-alternative-1": {
         "name": "L.point",
         "aka": [],
         "comments": [
          "Expects an array of the form `[x, y]` instead."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Number[]"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "point-l-point"
        },
        "L.point-alternative-2": {
         "name": "L.point",
         "aka": [],
         "comments": [
          "Expects a plain object of the form `{x: Number, y: Number}` instead."
         ],
         "params": {
          "coords": {
           "name": "coords",
           "type": "Object"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "point-l-point"
        }
       },
       "type": "factory",
       "id": "point-factory"
      }
     },
     "id": "point-factory"
    }
   },
   "inherits": [],
   "id": "point"
  },
  "Bounds": {
   "name": "Bounds",
   "aka": [
    "L.Bounds"
   ],
   "comments": [
    "Represents a rectangular area in pixel coordinates."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var p1 = L.point(10, 10),",
          "p2 = L.point(40, 60),",
          "bounds = L.bounds(p1, p2);",
          "```",
          "All Leaflet methods that accept `Bounds` objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:",
          "```js",
          "otherBounds.intersects([[10, 10], [40, 60]]);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "bounds-example"
      }
     },
     "id": "bounds-example"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "extend": {
         "name": "extend",
         "aka": [],
         "comments": [
          "Extends the bounds to contain the given point."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-extend"
        },
        "getCenter": {
         "name": "getCenter",
         "aka": [],
         "comments": [
          "Returns the center point of the bounds."
         ],
         "params": {
          "round?": {
           "name": "round?",
           "type": "Boolean"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-getcenter"
        },
        "getBottomLeft": {
         "name": "getBottomLeft",
         "aka": [],
         "comments": [
          "Returns the bottom-left point of the bounds."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-getbottomleft"
        },
        "getTopRight": {
         "name": "getTopRight",
         "aka": [],
         "comments": [
          "Returns the top-right point of the bounds."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-gettopright"
        },
        "getSize": {
         "name": "getSize",
         "aka": [],
         "comments": [
          "Returns the size of the given bounds"
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-getsize"
        },
        "contains": {
         "name": "contains",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle contains the given one."
         ],
         "params": {
          "otherBounds": {
           "name": "otherBounds",
           "type": "Bounds"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-contains"
        },
        "contains-alternative-1": {
         "name": "contains",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle contains the given point."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-contains"
        },
        "intersects": {
         "name": "intersects",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle intersects the given bounds. Two bounds",
          "intersect if they have at least one point in common."
         ],
         "params": {
          "otherBounds": {
           "name": "otherBounds",
           "type": "Bounds"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-intersects"
        },
        "overlaps": {
         "name": "overlaps",
         "aka": [],
         "comments": [
          "Returns `true` if the rectangle overlaps the given bounds. Two bounds",
          "overlap if their intersection is an area."
         ],
         "params": {
          "otherBounds": {
           "name": "otherBounds",
           "type": "Bounds"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-overlaps"
        }
       },
       "type": "method",
       "id": "bounds-method"
      }
     },
     "id": "bounds-method"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "min": {
         "name": "min",
         "aka": [],
         "comments": [
          "The top left corner of the rectangle."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-min"
        },
        "max": {
         "name": "max",
         "aka": [],
         "comments": [
          "The bottom right corner of the rectangle."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "bounds-max"
        }
       },
       "type": "property",
       "id": "bounds-property"
      }
     },
     "id": "bounds-property"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.bounds": {
         "name": "L.bounds",
         "aka": [],
         "comments": [
          "Creates a Bounds object from two coordinates (usually top-left and bottom-right corners)."
         ],
         "params": {
          "topLeft": {
           "name": "topLeft",
           "type": "Point"
          },
          "bottomRight": {
           "name": "bottomRight",
           "type": "Point"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "bounds-l-bounds"
        },
        "L.bounds-alternative-1": {
         "name": "L.bounds",
         "aka": [],
         "comments": [
          "Creates a Bounds object from the points it contains"
         ],
         "params": {
          "points": {
           "name": "points",
           "type": "Point[]"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "bounds-l-bounds"
        }
       },
       "type": "factory",
       "id": "bounds-factory"
      }
     },
     "id": "bounds-factory"
    }
   },
   "inherits": [],
   "id": "bounds"
  },
  "Icon": {
   "name": "Icon",
   "aka": [
    "L.Icon"
   ],
   "comments": [
    "Represents an icon to provide when creating a marker."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var myIcon = L.icon({",
          "    iconUrl: 'my-icon.png',",
          "    iconSize: [38, 95],",
          "    iconAnchor: [22, 94],",
          "    popupAnchor: [-3, -76],",
          "    shadowUrl: 'my-icon-shadow.png',",
          "    shadowSize: [68, 95],",
          "    shadowAnchor: [22, 94]",
          "});",
          "L.marker([50.505, 30.57], {icon: myIcon}).addTo(map);",
          "```",
          "`L.Icon.Default` extends `L.Icon` and is the blue icon Leaflet uses for markers by default.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "icon-example"
      }
     },
     "id": "icon-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Icon options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "iconUrl": {
         "name": "iconUrl",
         "aka": [],
         "comments": [
          "**(required)** The URL to the icon image (absolute or relative to your script path)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-iconurl"
        },
        "iconRetinaUrl": {
         "name": "iconRetinaUrl",
         "aka": [],
         "comments": [
          "The URL to a retina sized version of the icon image (absolute or relative to your",
          "script path). Used for Retina screen devices."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-iconretinaurl"
        },
        "iconSize": {
         "name": "iconSize",
         "aka": [],
         "comments": [
          "Size of the icon image in pixels."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-iconsize"
        },
        "iconAnchor": {
         "name": "iconAnchor",
         "aka": [],
         "comments": [
          "The coordinates of the \"tip\" of the icon (relative to its top left corner). The icon",
          "will be aligned so that this point is at the marker's geographical location. Centered",
          "by default if size is specified, also can be set in CSS with negative margins."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-iconanchor"
        },
        "popupAnchor": {
         "name": "popupAnchor",
         "aka": [],
         "comments": [
          "The coordinates of the point from which popups will \"open\", relative to the icon anchor."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-popupanchor"
        },
        "shadowUrl": {
         "name": "shadowUrl",
         "aka": [],
         "comments": [
          "The URL to the icon shadow image. If not specified, no shadow image will be created."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-shadowurl"
        },
        "shadowRetinaUrl": {
         "name": "shadowRetinaUrl",
         "aka": [],
         "comments": [],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-shadowretinaurl"
        },
        "shadowSize": {
         "name": "shadowSize",
         "aka": [],
         "comments": [
          "Size of the shadow image in pixels."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-shadowsize"
        },
        "shadowAnchor": {
         "name": "shadowAnchor",
         "aka": [],
         "comments": [
          "The coordinates of the \"tip\" of the shadow (relative to its top left corner) (the same",
          "as iconAnchor if not specified)."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "null",
         "id": "icon-shadowanchor"
        },
        "className": {
         "name": "className",
         "aka": [],
         "comments": [
          "A custom class name to assign to both icon and shadow images. Empty by default.",
          "\t "
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "icon-classname"
        }
       },
       "type": "option",
       "id": "icon-option"
      }
     },
     "id": "icon-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "createIcon": {
         "name": "createIcon",
         "aka": [],
         "comments": [
          "Called internally when the icon has to be shown, returns a `<img>` HTML element",
          "styled according to the options."
         ],
         "params": {
          "oldIcon?": {
           "name": "oldIcon?",
           "type": "HTMLElement"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "icon-createicon"
        },
        "createShadow": {
         "name": "createShadow",
         "aka": [],
         "comments": [
          "As `createIcon`, but for the shadow beneath it."
         ],
         "params": {
          "oldIcon?": {
           "name": "oldIcon?",
           "type": "HTMLElement"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "icon-createshadow"
        }
       },
       "type": "method",
       "id": "icon-method"
      }
     },
     "id": "icon-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.icon": {
         "name": "L.icon",
         "aka": [],
         "comments": [
          "Creates an icon instance with the given options."
         ],
         "params": {
          "options": {
           "name": "options",
           "type": "Icon options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "icon-l-icon"
        }
       },
       "type": "factory",
       "id": "icon-factory"
      }
     },
     "id": "icon-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "icon-event"
    }
   },
   "inherits": [
    "Layer"
   ],
   "id": "icon"
  },
  "DivIcon": {
   "name": "DivIcon",
   "aka": [
    "L.DivIcon"
   ],
   "comments": [
    "Represents a lightweight icon for markers that uses a simple `<div>`",
    "element instead of an image. Inherits from `Icon` but ignores the `iconUrl` and shadow options."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var myIcon = L.divIcon({className: 'my-div-icon'});",
          "// you can set .my-div-icon styles in CSS",
          "L.marker([50.505, 30.57], {icon: myIcon}).addTo(map);",
          "```",
          "By default, it has a 'leaflet-div-icon' CSS class and is styled as a little white square with a shadow.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "divicon-example"
      }
     },
     "id": "divicon-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "DivIcon options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "html": {
         "name": "html",
         "aka": [],
         "comments": [
          "Custom HTML code to put inside the div element, empty by default."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "divicon-html"
        },
        "bgPos": {
         "name": "bgPos",
         "aka": [],
         "comments": [
          "Optional relative position of the background, in pixels"
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "[0, 0]",
         "id": "divicon-bgpos"
        }
       },
       "type": "option",
       "id": "divicon-option"
      }
     },
     "id": "divicon-option"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.divIcon": {
         "name": "L.divIcon",
         "aka": [],
         "comments": [
          "Creates a `DivIcon` instance with the given options."
         ],
         "params": {
          "options": {
           "name": "options",
           "type": "DivIcon options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "divicon-l-divicon"
        }
       },
       "type": "factory",
       "id": "divicon-factory"
      }
     },
     "id": "divicon-factory"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "divicon-event"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "divicon-method"
    }
   },
   "inherits": [
    "Icon"
   ],
   "id": "divicon"
  },
  "Control.Zoom": {
   "name": "Control.Zoom",
   "aka": [
    "L.Control.Zoom"
   ],
   "comments": [
    "A basic zoom control with two buttons (zoom in and zoom out). It is put on the map by default unless you set its [`zoomControl` option](#map-zoomcontrol) to `false`. Extends `Control`.",
    " "
   ],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Control.Zoom options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "zoomInText": {
         "name": "zoomInText",
         "aka": [],
         "comments": [
          "The text set on the 'zoom in' button."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'+'",
         "id": "control-zoom-zoomintext"
        },
        "zoomInTitle": {
         "name": "zoomInTitle",
         "aka": [],
         "comments": [
          "The title set on the 'zoom in' button."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'Zoom in'",
         "id": "control-zoom-zoomintitle"
        },
        "zoomOutText": {
         "name": "zoomOutText",
         "aka": [],
         "comments": [
          "The text set on the 'zoom out' button."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'-'",
         "id": "control-zoom-zoomouttext"
        },
        "zoomOutTitle": {
         "name": "zoomOutTitle",
         "aka": [],
         "comments": [
          "The title set on the 'zoom out' button."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'Zoom out'",
         "id": "control-zoom-zoomouttitle"
        }
       },
       "type": "option",
       "id": "control-zoom-option"
      }
     },
     "id": "control-zoom-option"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.control.zoom": {
         "name": "L.control.zoom",
         "aka": [],
         "comments": [
          "Creates a zoom control"
         ],
         "params": {
          "options": {
           "name": "options",
           "type": "Control.Zoom options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "control-zoom-l-control-zoom"
        }
       },
       "type": "factory",
       "id": "control-zoom-factory"
      }
     },
     "id": "control-zoom-factory"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "control-zoom-method"
    }
   },
   "inherits": [
    "Control"
   ],
   "id": "control-zoom"
  },
  "Control.Attribution": {
   "name": "Control.Attribution",
   "aka": [
    "L.Control.Attribution"
   ],
   "comments": [
    "The attribution control allows you to display attribution data in a small text box on a map. It is put on the map by default unless you set its [`attributionControl` option](#map-attributioncontrol) to `false`, and it fetches attribution texts from layers with the [`getAttribution` method](#layer-getattribution) automatically. Extends Control.",
    " "
   ],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Control.Attribution options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "prefix": {
         "name": "prefix",
         "aka": [],
         "comments": [
          "The HTML text shown before the attributions. Pass `false` to disable."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'Leaflet'",
         "id": "control-attribution-prefix"
        }
       },
       "type": "option",
       "id": "control-attribution-option"
      }
     },
     "id": "control-attribution-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "setPrefix": {
         "name": "setPrefix",
         "aka": [],
         "comments": [
          "Sets the text before the attributions."
         ],
         "params": {
          "prefix": {
           "name": "prefix",
           "type": "String"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-attribution-setprefix"
        },
        "addAttribution": {
         "name": "addAttribution",
         "aka": [],
         "comments": [
          "Adds an attribution text (e.g. `'Vector data &copy; Mapbox'`)."
         ],
         "params": {
          "text": {
           "name": "text",
           "type": "String"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-attribution-addattribution"
        },
        "removeAttribution": {
         "name": "removeAttribution",
         "aka": [],
         "comments": [
          "Removes an attribution text."
         ],
         "params": {
          "text": {
           "name": "text",
           "type": "String"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-attribution-removeattribution"
        }
       },
       "type": "method",
       "id": "control-attribution-method"
      }
     },
     "id": "control-attribution-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.control.attribution": {
         "name": "L.control.attribution",
         "aka": [],
         "comments": [
          "Creates an attribution control."
         ],
         "params": {
          "options": {
           "name": "options",
           "type": "Control.Attribution options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "control-attribution-l-control-attribution"
        }
       },
       "type": "factory",
       "id": "control-attribution-factory"
      }
     },
     "id": "control-attribution-factory"
    }
   },
   "inherits": [
    "Control"
   ],
   "id": "control-attribution"
  },
  "Control.Layers": {
   "name": "Control.Layers",
   "aka": [
    "L.Control.Layers"
   ],
   "comments": [
    "The layers control gives users the ability to switch between different base layers and switch overlays on/off (check out the [detailed example](http://leafletjs.com/examples/layers-control.html)). Extends `Control`."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var baseLayers = {",
          "\t\"Mapbox\": mapbox,",
          "\t\"OpenStreetMap\": osm",
          "};",
          "var overlays = {",
          "\t\"Marker\": marker,",
          "\t\"Roads\": roadsLayer",
          "};",
          "L.control.layers(baseLayers, overlays).addTo(map);",
          "```",
          "The `baseLayers` and `overlays` parameters are object literals with layer names as keys and `Layer` objects as values:",
          "```js",
          "{",
          "    \"<someName1>\": layer1,",
          "    \"<someName2>\": layer2",
          "}",
          "```",
          "The layer names can contain HTML, which allows you to add additional styling to the items:",
          "```js",
          "{\"<img src='my-layer-icon' /> <span class='my-layer-item'>My Layer</span>\": myLayer}",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "control-layers-example"
      }
     },
     "id": "control-layers-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Control.Layers options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "collapsed": {
         "name": "collapsed",
         "aka": [],
         "comments": [
          "If `true`, the control will be collapsed into an icon and expanded on mouse hover or touch."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "control-layers-collapsed"
        },
        "autoZIndex": {
         "name": "autoZIndex",
         "aka": [],
         "comments": [
          "If `true`, the control will assign zIndexes in increasing order to all of its layers so that the order is preserved when switching them on/off."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "control-layers-autozindex"
        },
        "hideSingleBase": {
         "name": "hideSingleBase",
         "aka": [],
         "comments": [
          "If `true`, the base layers in the control will be hidden when there is only one."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "control-layers-hidesinglebase"
        },
        "sortLayers": {
         "name": "sortLayers",
         "aka": [],
         "comments": [
          "Whether to sort the layers. When `false`, layers will keep the order",
          "in which they were added to the control."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "control-layers-sortlayers"
        },
        "sortFunction": {
         "name": "sortFunction",
         "aka": [],
         "comments": [
          "A [compare function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)",
          "that will be used for sorting the layers, when `sortLayers` is `true`.",
          "The function receives both the `L.Layer` instances and their names, as in",
          "`sortFunction(layerA, layerB, nameA, nameB)`.",
          "By default, it sorts layers alphabetically by their name."
         ],
         "params": {},
         "type": "Function",
         "optional": false,
         "defaultValue": "*",
         "id": "control-layers-sortfunction"
        }
       },
       "type": "option",
       "id": "control-layers-option"
      }
     },
     "id": "control-layers-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "addBaseLayer": {
         "name": "addBaseLayer",
         "aka": [],
         "comments": [
          "Adds a base layer (radio button entry) with the given name to the control."
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          },
          "name": {
           "name": "name",
           "type": "String"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-layers-addbaselayer"
        },
        "addOverlay": {
         "name": "addOverlay",
         "aka": [],
         "comments": [
          "Adds an overlay (checkbox entry) with the given name to the control."
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          },
          "name": {
           "name": "name",
           "type": "String"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-layers-addoverlay"
        },
        "removeLayer": {
         "name": "removeLayer",
         "aka": [],
         "comments": [
          "Remove the given layer from the control."
         ],
         "params": {
          "layer": {
           "name": "layer",
           "type": "Layer"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-layers-removelayer"
        },
        "expand": {
         "name": "expand",
         "aka": [],
         "comments": [
          "Expand the control container if collapsed."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-layers-expand"
        },
        "collapse": {
         "name": "collapse",
         "aka": [],
         "comments": [
          "Collapse the control container if expanded."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-layers-collapse"
        }
       },
       "type": "method",
       "id": "control-layers-method"
      }
     },
     "id": "control-layers-method"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.control.layers": {
         "name": "L.control.layers",
         "aka": [],
         "comments": [
          "Creates an attribution control with the given layers. Base layers will be switched with radio buttons, while overlays will be switched with checkboxes. Note that all base layers should be passed in the base layers object, but only one should be added to the map during map instantiation."
         ],
         "params": {
          "baselayers?": {
           "name": "baselayers?",
           "type": "Object"
          },
          "overlays?": {
           "name": "overlays?",
           "type": "Object"
          },
          "options?": {
           "name": "options?",
           "type": "Control.Layers options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "control-layers-l-control-layers"
        }
       },
       "type": "factory",
       "id": "control-layers-factory"
      }
     },
     "id": "control-layers-factory"
    }
   },
   "inherits": [
    "Control"
   ],
   "id": "control-layers"
  },
  "Control.Scale": {
   "name": "Control.Scale",
   "aka": [
    "L.Control.Scale"
   ],
   "comments": [
    "A simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems. Extends `Control`."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "L.control.scale().addTo(map);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "control-scale-example"
      }
     },
     "id": "control-scale-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Control.Scale options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "maxWidth": {
         "name": "maxWidth",
         "aka": [],
         "comments": [
          "Maximum width of the control in pixels. The width is set dynamically to show round values (e.g. 100, 200, 500)."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "100",
         "id": "control-scale-maxwidth"
        },
        "metric": {
         "name": "metric",
         "aka": [],
         "comments": [
          "Whether to show the metric scale line (m/km)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "True",
         "id": "control-scale-metric"
        },
        "imperial": {
         "name": "imperial",
         "aka": [],
         "comments": [
          "Whether to show the imperial scale line (mi/ft)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "True",
         "id": "control-scale-imperial"
        },
        "updateWhenIdle": {
         "name": "updateWhenIdle",
         "aka": [],
         "comments": [
          "If `true`, the control is updated on [`moveend`](#map-moveend), otherwise it's always up-to-date (updated on [`move`](#map-move))."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "control-scale-updatewhenidle"
        }
       },
       "type": "option",
       "id": "control-scale-option"
      }
     },
     "id": "control-scale-option"
    },
    "factory": {
     "name": "factory",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.control.scale": {
         "name": "L.control.scale",
         "aka": [],
         "comments": [
          "Creates an scale control with the given options."
         ],
         "params": {
          "options?": {
           "name": "options?",
           "type": "Control.Scale options"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "control-scale-l-control-scale"
        }
       },
       "type": "factory",
       "id": "control-scale-factory"
      }
     },
     "id": "control-scale-factory"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "control-scale-method"
    }
   },
   "inherits": [
    "Control"
   ],
   "id": "control-scale"
  },
  "Browser": {
   "name": "Browser",
   "aka": [
    "L.Browser"
   ],
   "comments": [
    "A namespace with static properties for browser/feature detection used by Leaflet internally."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "if (L.Browser.ielt9) {",
          "  alert('Upgrade your browser, dude!');",
          "}",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "browser-example"
      }
     },
     "id": "browser-example"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "ie": {
         "name": "ie",
         "aka": [],
         "comments": [
          "`true` for all Internet Explorer versions (not Edge)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-ie"
        },
        "ielt9": {
         "name": "ielt9",
         "aka": [],
         "comments": [
          "`true` for Internet Explorer versions less than 9."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-ielt9"
        },
        "edge": {
         "name": "edge",
         "aka": [],
         "comments": [
          "`true` for the Edge web browser."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-edge"
        },
        "webkit": {
         "name": "webkit",
         "aka": [],
         "comments": [
          "`true` for webkit-based browsers like Chrome and Safari (including mobile versions)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-webkit"
        },
        "gecko": {
         "name": "gecko",
         "aka": [],
         "comments": [
          "`true` for gecko-based browsers like Firefox."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-gecko"
        },
        "android": {
         "name": "android",
         "aka": [],
         "comments": [
          "`true` for any browser running on an Android platform."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-android"
        },
        "android23": {
         "name": "android23",
         "aka": [],
         "comments": [
          "`true` for browsers running on Android 2 or Android 3."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-android23"
        },
        "chrome": {
         "name": "chrome",
         "aka": [],
         "comments": [
          "`true` for the Chrome browser."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-chrome"
        },
        "safari": {
         "name": "safari",
         "aka": [],
         "comments": [
          "`true` for the Safari browser."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-safari"
        },
        "win": {
         "name": "win",
         "aka": [],
         "comments": [
          "`true` when the browser is running in a Windows platform"
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-win"
        },
        "ie3d": {
         "name": "ie3d",
         "aka": [],
         "comments": [
          "`true` for all Internet Explorer versions supporting CSS transforms."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-ie3d"
        },
        "webkit3d": {
         "name": "webkit3d",
         "aka": [],
         "comments": [
          "`true` for webkit-based browsers supporting CSS transforms."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-webkit3d"
        },
        "gecko3d": {
         "name": "gecko3d",
         "aka": [],
         "comments": [
          "`true` for gecko-based browsers supporting CSS transforms."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-gecko3d"
        },
        "opera12": {
         "name": "opera12",
         "aka": [],
         "comments": [
          "`true` for the Opera browser supporting CSS transforms (version 12 or later)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-opera12"
        },
        "any3d": {
         "name": "any3d",
         "aka": [],
         "comments": [
          "`true` for all browsers supporting CSS transforms."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-any3d"
        },
        "mobile": {
         "name": "mobile",
         "aka": [],
         "comments": [
          "`true` for all browsers running in a mobile device."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-mobile"
        },
        "mobileWebkit": {
         "name": "mobileWebkit",
         "aka": [],
         "comments": [
          "`true` for all webkit-based browsers in a mobile device."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-mobilewebkit"
        },
        "mobileWebkit3d": {
         "name": "mobileWebkit3d",
         "aka": [],
         "comments": [
          "`true` for all webkit-based browsers in a mobile device supporting CSS transforms."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-mobilewebkit3d"
        },
        "mobileOpera": {
         "name": "mobileOpera",
         "aka": [],
         "comments": [
          "`true` for the Opera browser in a mobile device."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-mobileopera"
        },
        "mobileGecko": {
         "name": "mobileGecko",
         "aka": [],
         "comments": [
          "`true` for gecko-based browsers running in a mobile device."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-mobilegecko"
        },
        "touch": {
         "name": "touch",
         "aka": [],
         "comments": [
          "`true` for all browsers supporting [touch events](https://developer.mozilla.org/docs/Web/API/Touch_events)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-touch"
        },
        "msPointer": {
         "name": "msPointer",
         "aka": [],
         "comments": [
          "`true` for browsers implementing the Microsoft touch events model (notably IE10)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-mspointer"
        },
        "pointer": {
         "name": "pointer",
         "aka": [],
         "comments": [
          "`true` for all browsers supporting [pointer events](https://msdn.microsoft.com/en-us/library/dn433244%28v=vs.85%29.aspx)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-pointer"
        },
        "retina": {
         "name": "retina",
         "aka": [],
         "comments": [
          "`true` for browsers on a high-resolution \"retina\" screen."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-retina"
        },
        "canvas": {
         "name": "canvas",
         "aka": [],
         "comments": [
          "`true` when the browser supports [`<canvas>`](https://developer.mozilla.org/docs/Web/API/Canvas_API)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-canvas"
        },
        "vml": {
         "name": "vml",
         "aka": [],
         "comments": [
          "`true` if the browser supports [VML](https://en.wikipedia.org/wiki/Vector_Markup_Language)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-vml"
        },
        "svg": {
         "name": "svg",
         "aka": [],
         "comments": [
          "`true` when the browser supports [SVG](https://developer.mozilla.org/docs/Web/SVG)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "browser-svg"
        }
       },
       "type": "property",
       "id": "browser-property"
      }
     },
     "id": "browser-property"
    }
   },
   "inherits": [],
   "id": "browser"
  },
  "Util": {
   "name": "Util",
   "aka": [],
   "comments": [
    "Various utility functions, used by Leaflet internally.",
    " "
   ],
   "supersections": {
    "function": {
     "name": "function",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "extend": {
         "name": "extend",
         "aka": [],
         "comments": [
          "Merges the properties of the `src` object (or multiple objects) into `dest` object and returns the latter. Has an `L.extend` shortcut."
         ],
         "params": {
          "dest": {
           "name": "dest",
           "type": "Object"
          },
          "src?": {
           "name": "src?",
           "type": "Object"
          }
         },
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "util-extend"
        },
        "create": {
         "name": "create",
         "aka": [],
         "comments": [
          "Compatibility polyfill for [Object.create](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/create)"
         ],
         "params": {
          "proto": {
           "name": "proto",
           "type": "Object"
          },
          "properties?": {
           "name": "properties?",
           "type": "Object"
          }
         },
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "util-create"
        },
        "bind": {
         "name": "bind",
         "aka": [],
         "comments": [
          "Returns a new function bound to the arguments passed, like [Function.prototype.bind](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).",
          "Has a `L.bind()` shortcut."
         ],
         "params": {
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "…": {
           "name": "…"
          }
         },
         "type": "Function",
         "optional": false,
         "defaultValue": null,
         "id": "util-bind"
        },
        "stamp": {
         "name": "stamp",
         "aka": [],
         "comments": [
          "Returns the unique ID of an object, assiging it one if it doesn't have it."
         ],
         "params": {
          "obj": {
           "name": "obj",
           "type": "Object"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "util-stamp"
        },
        "throttle": {
         "name": "throttle",
         "aka": [],
         "comments": [
          "Returns a function which executes function `fn` with the given scope `context`",
          "(so that the `this` keyword refers to `context` inside `fn`'s code). The function",
          "`fn` will be called no more than one time per given amount of `time`. The arguments",
          "received by the bound function will be any arguments passed when binding the",
          "function, followed by any arguments passed when invoking the bound function.",
          "Has an `L.bind` shortcut."
         ],
         "params": {
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "time": {
           "name": "time",
           "type": "Number"
          },
          "context": {
           "name": "context",
           "type": "Object"
          }
         },
         "type": "Function",
         "optional": false,
         "defaultValue": null,
         "id": "util-throttle"
        },
        "wrapNum": {
         "name": "wrapNum",
         "aka": [],
         "comments": [
          "Returns the number `num` modulo `range` in such a way so it lies within",
          "`range[0]` and `range[1]`. The returned value will be always smaller than",
          "`range[1]` unless `includeMax` is set to `true`."
         ],
         "params": {
          "num": {
           "name": "num",
           "type": "Number"
          },
          "range": {
           "name": "range",
           "type": "Number[]"
          },
          "includeMax?": {
           "name": "includeMax?",
           "type": "Boolean"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "util-wrapnum"
        },
        "falseFn": {
         "name": "falseFn",
         "aka": [],
         "comments": [
          "Returns a function which always returns `false`."
         ],
         "params": {},
         "type": "Function",
         "optional": false,
         "defaultValue": null,
         "id": "util-falsefn"
        },
        "formatNum": {
         "name": "formatNum",
         "aka": [],
         "comments": [
          "Returns the number `num` rounded to `digits` decimals, or to 5 decimals by default."
         ],
         "params": {
          "num": {
           "name": "num",
           "type": "Number"
          },
          "digits?": {
           "name": "digits?",
           "type": "Number"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "util-formatnum"
        },
        "trim": {
         "name": "trim",
         "aka": [],
         "comments": [
          "Compatibility polyfill for [String.prototype.trim](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)"
         ],
         "params": {
          "str": {
           "name": "str",
           "type": "String"
          }
         },
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "util-trim"
        },
        "splitWords": {
         "name": "splitWords",
         "aka": [],
         "comments": [
          "Trims and splits the string on whitespace and returns the array of parts."
         ],
         "params": {
          "str": {
           "name": "str",
           "type": "String"
          }
         },
         "type": "String[]",
         "optional": false,
         "defaultValue": null,
         "id": "util-splitwords"
        },
        "setOptions": {
         "name": "setOptions",
         "aka": [],
         "comments": [
          "Merges the given properties to the `options` of the `obj` object, returning the resulting options. See `Class options`. Has an `L.setOptions` shortcut."
         ],
         "params": {
          "obj": {
           "name": "obj",
           "type": "Object"
          },
          "options": {
           "name": "options",
           "type": "Object"
          }
         },
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "util-setoptions"
        },
        "getParamString": {
         "name": "getParamString",
         "aka": [],
         "comments": [
          "Converts an object into a parameter URL string, e.g. `{a: \"foo\", b: \"bar\"}`",
          "translates to `'?a=foo&b=bar'`. If `existingUrl` is set, the parameters will",
          "be appended at the end. If `uppercase` is `true`, the parameter names will",
          "be uppercased (e.g. `'?A=foo&B=bar'`)"
         ],
         "params": {
          "obj": {
           "name": "obj",
           "type": "Object"
          },
          "existingUrl?": {
           "name": "existingUrl?",
           "type": "String"
          },
          "uppercase?": {
           "name": "uppercase?",
           "type": "Boolean"
          }
         },
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "util-getparamstring"
        },
        "template": {
         "name": "template",
         "aka": [],
         "comments": [
          "Simple templating facility, accepts a template string of the form `'Hello {a}, {b}'`",
          "and a data object like `{a: 'foo', b: 'bar'}`, returns evaluated string",
          "`('Hello foo, bar')`. You can also specify functions instead of strings for",
          "data values — they will be evaluated passing `data` as an argument."
         ],
         "params": {
          "str": {
           "name": "str",
           "type": "String"
          },
          "data": {
           "name": "data",
           "type": "Object"
          }
         },
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "util-template"
        },
        "isArray": {
         "name": "isArray",
         "aka": [],
         "comments": [
          "Compatibility polyfill for [Array.isArray](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)"
         ],
         "params": {
          "obj": {
           "name": "obj"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "util-isarray"
        },
        "indexOf": {
         "name": "indexOf",
         "aka": [],
         "comments": [
          "Compatibility polyfill for [Array.prototype.indexOf](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)"
         ],
         "params": {
          "array": {
           "name": "array",
           "type": "Array"
          },
          "el": {
           "name": "el",
           "type": "Object"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "util-indexof"
        },
        "requestAnimFrame": {
         "name": "requestAnimFrame",
         "aka": [],
         "comments": [
          "Schedules `fn` to be executed when the browser repaints. `fn` is bound to",
          "`context` if given. When `immediate` is set, `fn` is called immediately if",
          "the browser doesn't have native support for",
          "[`window.requestAnimationFrame`](https://developer.mozilla.org/docs/Web/API/window/requestAnimationFrame),",
          "otherwise it's delayed. Returns a request ID that can be used to cancel the request."
         ],
         "params": {
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          },
          "immediate?": {
           "name": "immediate?",
           "type": "Boolean"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "util-requestanimframe"
        },
        "cancelAnimFrame": {
         "name": "cancelAnimFrame",
         "aka": [],
         "comments": [
          "Cancels a previous `requestAnimFrame`. See also [window.cancelAnimationFrame](https://developer.mozilla.org/docs/Web/API/window/cancelAnimationFrame)."
         ],
         "params": {
          "id": {
           "name": "id",
           "type": "Number"
          }
         },
         "type": "undefined",
         "optional": false,
         "defaultValue": null,
         "id": "util-cancelanimframe"
        }
       },
       "type": "function",
       "id": "util-function"
      }
     },
     "id": "util-function"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "lastId": {
         "name": "lastId",
         "aka": [],
         "comments": [
          "Last unique ID used by [`stamp()`](#util-stamp)"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "util-lastid"
        },
        "emptyImageUrl": {
         "name": "emptyImageUrl",
         "aka": [],
         "comments": [
          "Data URI string containing a base64-encoded empty GIF image.",
          "Used as a hack to free memory from unused images on WebKit-powered",
          "mobile devices (by setting image `src` to this string)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "util-emptyimageurl"
        }
       },
       "type": "property",
       "id": "util-property"
      }
     },
     "id": "util-property"
    }
   },
   "inherits": [],
   "id": "util"
  },
  "Transformation": {
   "name": "Transformation",
   "aka": [
    "L.Transformation"
   ],
   "comments": [
    "Represents an affine transformation: a set of coefficients `a`, `b`, `c`, `d`",
    "for transforming a point of a form `(x, y)` into `(a*x + b, c*y + d)` and doing",
    "the reverse. Used by Leaflet in its projections code."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var transformation = new L.Transformation(2, 5, -1, 10),",
          "\tp = L.point(1, 2),",
          "\tp2 = transformation.transform(p), //  L.point(7, 8)",
          "\tp3 = transformation.untransform(p2); //  L.point(1, 2)",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "transformation-example"
      }
     },
     "id": "transformation-example"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "transform": {
         "name": "transform",
         "aka": [],
         "comments": [
          "Returns a transformed point, optionally multiplied by the given scale.",
          "Only accepts actual `L.Point` instances, not arrays."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          },
          "scale?": {
           "name": "scale?",
           "type": "Number"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "transformation-transform"
        },
        "untransform": {
         "name": "untransform",
         "aka": [],
         "comments": [
          "Returns the reverse transformation of the given point, optionally divided",
          "by the given scale. Only accepts actual `L.Point` instances, not arrays."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          },
          "scale?": {
           "name": "scale?",
           "type": "Number"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "transformation-untransform"
        }
       },
       "type": "method",
       "id": "transformation-method"
      }
     },
     "id": "transformation-method"
    }
   },
   "inherits": [],
   "id": "transformation"
  },
  "LineUtil": {
   "name": "LineUtil",
   "aka": [],
   "comments": [
    "Various utility functions for polyine points processing, used by Leaflet internally to make polylines lightning-fast.",
    " "
   ],
   "supersections": {
    "function": {
     "name": "function",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "simplify": {
         "name": "simplify",
         "aka": [],
         "comments": [
          "Dramatically reduces the number of points in a polyline while retaining",
          "its shape and returns a new array of simplified points, using the",
          "[Douglas-Peucker algorithm](http://en.wikipedia.org/wiki/Douglas-Peucker_algorithm).",
          "Used for a huge performance boost when processing/displaying Leaflet polylines for",
          "each zoom level and also reducing visual noise. tolerance affects the amount of",
          "simplification (lesser value means higher quality but slower and with more points).",
          "Also released as a separated micro-library [Simplify.js](http://mourner.github.com/simplify-js/)."
         ],
         "params": {
          "points": {
           "name": "points",
           "type": "Point[]"
          },
          "tolerance": {
           "name": "tolerance",
           "type": "Number"
          }
         },
         "type": "Point[]",
         "optional": false,
         "defaultValue": null,
         "id": "lineutil-simplify"
        },
        "pointToSegmentDistance": {
         "name": "pointToSegmentDistance",
         "aka": [],
         "comments": [
          "Returns the distance between point `p` and segment `p1` to `p2`."
         ],
         "params": {
          "p": {
           "name": "p",
           "type": "Point"
          },
          "p1": {
           "name": "p1",
           "type": "Point"
          },
          "p2": {
           "name": "p2",
           "type": "Point"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "lineutil-pointtosegmentdistance"
        },
        "closestPointOnSegment": {
         "name": "closestPointOnSegment",
         "aka": [],
         "comments": [
          "Returns the closest point from a point `p` on a segment `p1` to `p2`."
         ],
         "params": {
          "p": {
           "name": "p",
           "type": "Point"
          },
          "p1": {
           "name": "p1",
           "type": "Point"
          },
          "p2": {
           "name": "p2",
           "type": "Point"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "lineutil-closestpointonsegment"
        },
        "clipSegment": {
         "name": "clipSegment",
         "aka": [],
         "comments": [
          "Clips the segment a to b by rectangular bounds with the",
          "[Cohen-Sutherland algorithm](https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm)",
          "(modifying the segment points directly!). Used by Leaflet to only show polyline",
          "points that are on the screen or near, increasing performance."
         ],
         "params": {
          "a": {
           "name": "a",
           "type": "Point"
          },
          "b": {
           "name": "b",
           "type": "Point"
          },
          "bounds": {
           "name": "bounds",
           "type": "Bounds"
          },
          "useLastCode?": {
           "name": "useLastCode?",
           "type": "Boolean"
          },
          "round?": {
           "name": "round?",
           "type": "Boolean"
          }
         },
         "type": "Point[]|Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "lineutil-clipsegment"
        }
       },
       "type": "function",
       "id": "lineutil-function"
      }
     },
     "id": "lineutil-function"
    }
   },
   "inherits": [],
   "id": "lineutil"
  },
  "PolyUtil": {
   "name": "PolyUtil",
   "aka": [],
   "comments": [
    "Various utility functions for polygon geometries.",
    " "
   ],
   "supersections": {
    "function": {
     "name": "function",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "clipPolygon": {
         "name": "clipPolygon",
         "aka": [],
         "comments": [
          "Clips the polygon geometry defined by the given `points` by the given bounds (using the [Sutherland-Hodgeman algorithm](https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm)).",
          "Used by Leaflet to only show polygon points that are on the screen or near, increasing",
          "performance. Note that polygon points needs different algorithm for clipping",
          "than polyline, so there's a seperate method for it.",
          " "
         ],
         "params": {
          "points": {
           "name": "points",
           "type": "Point[]"
          },
          "bounds": {
           "name": "bounds",
           "type": "Bounds"
          },
          "round?": {
           "name": "round?",
           "type": "Boolean"
          }
         },
         "type": "Point[]",
         "optional": false,
         "defaultValue": null,
         "id": "polyutil-clippolygon"
        }
       },
       "type": "function",
       "id": "polyutil-function"
      }
     },
     "id": "polyutil-function"
    }
   },
   "inherits": [],
   "id": "polyutil"
  },
  "DomEvent": {
   "name": "DomEvent",
   "aka": [],
   "comments": [
    "Utility functions to work with the [DOM events](https://developer.mozilla.org/docs/Web/API/Event), used by Leaflet internally.",
    " "
   ],
   "supersections": {
    "function": {
     "name": "function",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "on": {
         "name": "on",
         "aka": [],
         "comments": [
          "Adds a listener function (`fn`) to a particular DOM event type of the",
          "element `el`. You can optionally specify the context of the listener",
          "(object the `this` keyword will point to). You can also pass several",
          "space-separated types (e.g. `'click dblclick'`)."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "types": {
           "name": "types",
           "type": "String"
          },
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-on"
        },
        "on-alternative-1": {
         "name": "on",
         "aka": [],
         "comments": [
          "Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`"
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "eventMap": {
           "name": "eventMap",
           "type": "Object"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-on"
        },
        "off": {
         "name": "off",
         "aka": [],
         "comments": [
          "Removes a previously added listener function. If no function is specified,",
          "it will remove all the listeners of that particular DOM event from the element.",
          "Note that if you passed a custom context to on, you must pass the same",
          "context to `off` in order to remove the listener."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "types": {
           "name": "types",
           "type": "String"
          },
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-off"
        },
        "off-alternative-1": {
         "name": "off",
         "aka": [],
         "comments": [
          "Removes a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`"
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "eventMap": {
           "name": "eventMap",
           "type": "Object"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-off"
        },
        "stopPropagation": {
         "name": "stopPropagation",
         "aka": [],
         "comments": [
          "Stop the given event from propagation to parent elements. Used inside the listener functions:",
          "```js",
          "L.DomEvent.on(div, 'click', function (ev) {",
          "\tL.DomEvent.stopPropagation(ev);",
          "});",
          "```"
         ],
         "params": {
          "ev": {
           "name": "ev",
           "type": "DOMEvent"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-stoppropagation"
        },
        "disableScrollPropagation": {
         "name": "disableScrollPropagation",
         "aka": [],
         "comments": [
          "Adds `stopPropagation` to the element's `'mousewheel'` events (plus browser variants)."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-disablescrollpropagation"
        },
        "disableClickPropagation": {
         "name": "disableClickPropagation",
         "aka": [],
         "comments": [
          "Adds `stopPropagation` to the element's `'click'`, `'doubleclick'`,",
          "`'mousedown'` and `'touchstart'` events (plus browser variants)."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-disableclickpropagation"
        },
        "preventDefault": {
         "name": "preventDefault",
         "aka": [],
         "comments": [
          "Prevents the default action of the DOM Event `ev` from happening (such as",
          "following a link in the href of the a element, or doing a POST request",
          "with page reload when a `<form>` is submitted).",
          "Use it inside listener functions."
         ],
         "params": {
          "ev": {
           "name": "ev",
           "type": "DOMEvent"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-preventdefault"
        },
        "stop": {
         "name": "stop",
         "aka": [],
         "comments": [
          "Does `stopPropagation` and `preventDefault` at the same time."
         ],
         "params": {
          "ev": {
           "name": "ev"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-stop"
        },
        "getMousePosition": {
         "name": "getMousePosition",
         "aka": [],
         "comments": [
          "Gets normalized mouse position from a DOM event relative to the",
          "`container` or to the whole page if not specified."
         ],
         "params": {
          "ev": {
           "name": "ev",
           "type": "DOMEvent"
          },
          "container?": {
           "name": "container?",
           "type": "HTMLElement"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-getmouseposition"
        },
        "getWheelDelta": {
         "name": "getWheelDelta",
         "aka": [],
         "comments": [
          "Gets normalized wheel delta from a mousewheel DOM event, in vertical",
          "pixels scrolled (negative if scrolling down).",
          "Events from pointing devices without precise scrolling are mapped to",
          "a best guess of 60 pixels."
         ],
         "params": {
          "ev": {
           "name": "ev",
           "type": "DOMEvent"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-getwheeldelta"
        },
        "addListener": {
         "name": "addListener",
         "aka": [],
         "comments": [
          "Alias to [`L.DomEvent.on`](#domevent-on)"
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-addlistener"
        },
        "removeListener": {
         "name": "removeListener",
         "aka": [],
         "comments": [
          "Alias to [`L.DomEvent.off`](#domevent-off)"
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "domevent-removelistener"
        }
       },
       "type": "function",
       "id": "domevent-function"
      }
     },
     "id": "domevent-function"
    }
   },
   "inherits": [],
   "id": "domevent"
  },
  "DomUtil": {
   "name": "DomUtil",
   "aka": [],
   "comments": [
    "Utility functions to work with the [DOM](https://developer.mozilla.org/docs/Web/API/Document_Object_Model)",
    "tree, used by Leaflet internally.",
    "Most functions expecting or returning a `HTMLElement` also work for",
    "SVG elements. The only difference is that classes refer to CSS classes",
    "in HTML and SVG classes in SVG.",
    " "
   ],
   "supersections": {
    "function": {
     "name": "function",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "get": {
         "name": "get",
         "aka": [],
         "comments": [
          "Returns an element given its DOM id, or returns the element itself",
          "if it was passed directly."
         ],
         "params": {
          "id": {
           "name": "id",
           "type": "String|HTMLElement"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-get"
        },
        "getStyle": {
         "name": "getStyle",
         "aka": [],
         "comments": [
          "Returns the value for a certain style attribute on an element,",
          "including computed values or values set through CSS."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "styleAttrib": {
           "name": "styleAttrib",
           "type": "String"
          }
         },
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-getstyle"
        },
        "create": {
         "name": "create",
         "aka": [],
         "comments": [
          "Creates an HTML element with `tagName`, sets its class to `className`, and optionally appends it to `container` element."
         ],
         "params": {
          "tagName": {
           "name": "tagName",
           "type": "String"
          },
          "className?": {
           "name": "className?",
           "type": "String"
          },
          "container?": {
           "name": "container?",
           "type": "HTMLElement"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-create"
        },
        "remove": {
         "name": "remove",
         "aka": [],
         "comments": [
          "Removes `el` from its parent element"
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-remove"
        },
        "empty": {
         "name": "empty",
         "aka": [],
         "comments": [
          "Removes all of `el`'s children elements from `el`"
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-empty"
        },
        "toFront": {
         "name": "toFront",
         "aka": [],
         "comments": [
          "Makes `el` the last children of its parent, so it renders in front of the other children."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-tofront"
        },
        "toBack": {
         "name": "toBack",
         "aka": [],
         "comments": [
          "Makes `el` the first children of its parent, so it renders back from the other children."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-toback"
        },
        "hasClass": {
         "name": "hasClass",
         "aka": [],
         "comments": [
          "Returns `true` if the element's class attribute contains `name`."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "name": {
           "name": "name",
           "type": "String"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-hasclass"
        },
        "addClass": {
         "name": "addClass",
         "aka": [],
         "comments": [
          "Adds `name` to the element's class attribute."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "name": {
           "name": "name",
           "type": "String"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-addclass"
        },
        "removeClass": {
         "name": "removeClass",
         "aka": [],
         "comments": [
          "Removes `name` from the element's class attribute."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "name": {
           "name": "name",
           "type": "String"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-removeclass"
        },
        "setClass": {
         "name": "setClass",
         "aka": [],
         "comments": [
          "Sets the element's class."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "name": {
           "name": "name",
           "type": "String"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-setclass"
        },
        "getClass": {
         "name": "getClass",
         "aka": [],
         "comments": [
          "Returns the element's class."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-getclass"
        },
        "setOpacity": {
         "name": "setOpacity",
         "aka": [],
         "comments": [
          "Set the opacity of an element (including old IE support).",
          "`opacity` must be a number from `0` to `1`."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "opacity": {
           "name": "opacity",
           "type": "Number"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-setopacity"
        },
        "testProp": {
         "name": "testProp",
         "aka": [],
         "comments": [
          "Goes through the array of style names and returns the first name",
          "that is a valid style name for an element. If no such name is found,",
          "it returns false. Useful for vendor-prefixed styles like `transform`."
         ],
         "params": {
          "props": {
           "name": "props",
           "type": "String[]"
          }
         },
         "type": "String|false",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-testprop"
        },
        "setTransform": {
         "name": "setTransform",
         "aka": [],
         "comments": [
          "Resets the 3D CSS transform of `el` so it is translated by `offset` pixels",
          "and optionally scaled by `scale`. Does not have an effect if the",
          "browser doesn't support 3D CSS transforms."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "offset": {
           "name": "offset",
           "type": "Point"
          },
          "scale?": {
           "name": "scale?",
           "type": "Number"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-settransform"
        },
        "setPosition": {
         "name": "setPosition",
         "aka": [],
         "comments": [
          "Sets the position of `el` to coordinates specified by `position`,",
          "using CSS translate or top/left positioning depending on the browser",
          "(used by Leaflet internally to position its layers)."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "position": {
           "name": "position",
           "type": "Point"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-setposition"
        },
        "getPosition": {
         "name": "getPosition",
         "aka": [],
         "comments": [
          "Returns the coordinates of an element previously positioned with setPosition."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-getposition"
        },
        "disableTextSelection": {
         "name": "disableTextSelection",
         "aka": [],
         "comments": [
          "Prevents the user from generating `selectstart` DOM events, usually generated",
          "when the user drags the mouse through a page with text. Used internally",
          "by Leaflet to override the behaviour of any click-and-drag interaction on",
          "the map. Affects drag interactions on the whole document."
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-disabletextselection"
        },
        "enableTextSelection": {
         "name": "enableTextSelection",
         "aka": [],
         "comments": [
          "Cancels the effects of a previous [`L.DomUtil.disableTextSelection`](#domutil-disabletextselection)."
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-enabletextselection"
        },
        "disableImageDrag": {
         "name": "disableImageDrag",
         "aka": [],
         "comments": [
          "As [`L.DomUtil.disableTextSelection`](#domutil-disabletextselection), but",
          "for `dragstart` DOM events, usually generated when the user drags an image."
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-disableimagedrag"
        },
        "enableImageDrag": {
         "name": "enableImageDrag",
         "aka": [],
         "comments": [
          "Cancels the effects of a previous [`L.DomUtil.disableImageDrag`](#domutil-disabletextselection)."
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-enableimagedrag"
        },
        "preventOutline": {
         "name": "preventOutline",
         "aka": [],
         "comments": [
          "Makes the [outline](https://developer.mozilla.org/docs/Web/CSS/outline)",
          "of the element `el` invisible. Used internally by Leaflet to prevent",
          "focusable elements from displaying an outline when the user performs a",
          "drag interaction on them."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-preventoutline"
        },
        "restoreOutline": {
         "name": "restoreOutline",
         "aka": [],
         "comments": [
          "Cancels the effects of a previous [`L.DomUtil.preventOutline`]()."
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "domutil-restoreoutline"
        }
       },
       "type": "function",
       "id": "domutil-function"
      }
     },
     "id": "domutil-function"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "TRANSFORM": {
         "name": "TRANSFORM",
         "aka": [],
         "comments": [
          "Vendor-prefixed fransform style name (e.g. `'webkitTransform'` for WebKit)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-transform"
        },
        "TRANSITION": {
         "name": "TRANSITION",
         "aka": [],
         "comments": [
          "Vendor-prefixed transform style name."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "domutil-transition"
        }
       },
       "type": "property",
       "id": "domutil-property"
      }
     },
     "id": "domutil-property"
    }
   },
   "inherits": [],
   "id": "domutil"
  },
  "PosAnimation": {
   "name": "PosAnimation",
   "aka": [
    "L.PosAnimation"
   ],
   "comments": [
    "Used internally for panning animations, utilizing CSS3 Transitions for modern browsers and a timer fallback for IE6-9."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var fx = new L.PosAnimation();",
          "fx.run(el, [300, 500], 0.5);",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "posanimation-example"
      }
     },
     "id": "posanimation-example"
    },
    "constructor": {
     "name": "constructor",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.PosAnimation": {
         "name": "L.PosAnimation",
         "aka": [],
         "comments": [
          "Creates a `PosAnimation` object.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "posanimation-l-posanimation"
        }
       },
       "type": "constructor",
       "id": "posanimation-constructor"
      }
     },
     "id": "posanimation-constructor"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "run": {
         "name": "run",
         "aka": [],
         "comments": [
          "Run an animation of a given element to a new position, optionally setting",
          "duration in seconds (`0.25` by default) and easing linearity factor (3rd",
          "argument of the [cubic bezier curve](http://cubic-bezier.com/#0,0,.5,1),",
          "`0.5` by default)."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "newPos": {
           "name": "newPos",
           "type": "Point"
          },
          "duration?": {
           "name": "duration?",
           "type": "Number"
          },
          "easeLinearity?": {
           "name": "easeLinearity?",
           "type": "Number"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "posanimation-run"
        },
        "stop": {
         "name": "stop",
         "aka": [],
         "comments": [
          "Stops the animation (if currently running)."
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "posanimation-stop"
        }
       },
       "type": "method",
       "id": "posanimation-method"
      }
     },
     "id": "posanimation-method"
    },
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "start": {
         "name": "start",
         "aka": [],
         "comments": [
          "Fired when the animation starts"
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "posanimation-start"
        },
        "step": {
         "name": "step",
         "aka": [],
         "comments": [
          "Fired continuously during the animation."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "posanimation-step"
        },
        "end": {
         "name": "end",
         "aka": [],
         "comments": [
          "Fired when the animation ends."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "posanimation-end"
        }
       },
       "type": "event",
       "id": "posanimation-event"
      }
     },
     "id": "posanimation-event"
    }
   },
   "inherits": [
    "Evented"
   ],
   "id": "posanimation"
  },
  "Draggable": {
   "name": "Draggable",
   "aka": [
    "L.Draggable"
   ],
   "comments": [
    "A class for making DOM elements draggable (including touch support).",
    "Used internally for map and marker dragging. Only works for elements",
    "that were positioned with [`L.DomUtil.setPosition`](#domutil-setposition)."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var draggable = new L.Draggable(elementToDrag);",
          "draggable.enable();",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "draggable-example"
      }
     },
     "id": "draggable-example"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "clickTolerance": {
         "name": "clickTolerance",
         "aka": [],
         "comments": [
          "The max number of pixels a user can shift the mouse pointer during a click",
          "for it to be considered a valid click (as opposed to a mouse drag)."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "3",
         "id": "draggable-clicktolerance"
        }
       },
       "type": "option",
       "id": "draggable-option"
      }
     },
     "id": "draggable-option"
    },
    "constructor": {
     "name": "constructor",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.Draggable": {
         "name": "L.Draggable",
         "aka": [],
         "comments": [
          "Creates a `Draggable` object for moving `el` when you start dragging the `dragHandle` element (equals `el` itself by default)."
         ],
         "params": {
          "el": {
           "name": "el",
           "type": "HTMLElement"
          },
          "dragHandle?": {
           "name": "dragHandle?",
           "type": "HTMLElement"
          },
          "preventOutline": {
           "name": "preventOutline",
           "type": "Boolean"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "draggable-l-draggable"
        }
       },
       "type": "constructor",
       "id": "draggable-constructor"
      }
     },
     "id": "draggable-constructor"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "enable": {
         "name": "enable",
         "aka": [],
         "comments": [
          "Enables the dragging ability"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "draggable-enable"
        },
        "disable": {
         "name": "disable",
         "aka": [],
         "comments": [
          "Disables the dragging ability"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "draggable-disable"
        }
       },
       "type": "method",
       "id": "draggable-method"
      }
     },
     "id": "draggable-method"
    },
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "down": {
         "name": "down",
         "aka": [],
         "comments": [
          "Fired when a drag is about to start."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "draggable-down"
        },
        "dragstart": {
         "name": "dragstart",
         "aka": [],
         "comments": [
          "Fired when a drag starts"
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "draggable-dragstart"
        },
        "predrag": {
         "name": "predrag",
         "aka": [],
         "comments": [
          "Fired continuously during dragging *before* each corresponding",
          "update of the element's position."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "draggable-predrag"
        },
        "drag": {
         "name": "drag",
         "aka": [],
         "comments": [
          "Fired continuously during dragging."
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "draggable-drag"
        },
        "dragend": {
         "name": "dragend",
         "aka": [],
         "comments": [
          "Fired when the drag ends."
         ],
         "params": {},
         "type": "DragEndEvent",
         "optional": false,
         "defaultValue": null,
         "id": "draggable-dragend"
        }
       },
       "type": "event",
       "id": "draggable-event"
      }
     },
     "id": "draggable-event"
    }
   },
   "inherits": [
    "Evented"
   ],
   "id": "draggable"
  },
  "Class": {
   "name": "Class",
   "aka": [
    "L.Class",
    "L.Class"
   ],
   "comments": [
    "L.Class powers the OOP facilities of Leaflet and is used to create almost all of the Leaflet classes documented here.",
    "In addition to implementing a simple classical inheritance model, it introduces several special properties for convenient code organization — options, includes and statics."
   ],
   "supersections": {
    "function": {
     "name": "function",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": true,
       "documentables": {
        "extend": {
         "name": "extend",
         "aka": [],
         "comments": [
          "[Extends the current class](#class-inheritance) given the properties to be included.",
          "Returns a Javascript function that is a class constructor (to be called with `new`)."
         ],
         "params": {
          "props": {
           "name": "props",
           "type": "Object"
          }
         },
         "type": "Function",
         "optional": false,
         "defaultValue": null,
         "id": "class-extend"
        },
        "include": {
         "name": "include",
         "aka": [],
         "comments": [
          "[Includes a mixin](#class-includes) into the current class."
         ],
         "params": {
          "properties": {
           "name": "properties",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "class-include"
        },
        "mergeOptions": {
         "name": "mergeOptions",
         "aka": [],
         "comments": [
          "[Merges `options`](#class-options) into the defaults of the class."
         ],
         "params": {
          "options": {
           "name": "options",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "class-mergeoptions"
        },
        "addInitHook": {
         "name": "addInitHook",
         "aka": [],
         "comments": [
          "Adds a [constructor hook](#class-constructor-hooks) to the class."
         ],
         "params": {
          "fn": {
           "name": "fn",
           "type": "Function"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "class-addinithook"
        }
       },
       "type": "function",
       "id": "class-function"
      }
     },
     "id": "class-function"
    },
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var MyClass = L.Class.extend({",
          "initialize: function (greeter) {",
          "\tthis.greeter = greeter;",
          "\t// class constructor",
          "},",
          "greet: function (name) {",
          "\talert(this.greeter + ', ' + name)",
          "\t}",
          "});",
          "// create instance of MyClass, passing \"Hello\" to the constructor",
          "var a = new MyClass(\"Hello\");",
          "// call greet method, alerting \"Hello, World\"",
          "a.greet(\"World\");",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "class-example"
      },
      "Class Factories": {
       "name": "Class Factories",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "You may have noticed that Leaflet objects are created without using",
          "the `new` keyword. This is achieved by complementing each class with a",
          "lowercase factory method:",
          "```js",
          "new L.Map('map'); // becomes:",
          "L.map('map');",
          "```",
          "The factories are implemented very easily, and you can do this for your own classes:",
          "```js",
          "L.map = function (id, options) {",
          "    return new L.Map(id, options);",
          "};",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "class-class-factories"
      },
      "Inheritance": {
       "name": "Inheritance",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "You use L.Class.extend to define new classes, but you can use the same method on any class to inherit from it:",
          "```js",
          "var MyChildClass = MyClass.extend({",
          "    // ... new properties and methods",
          "});",
          "```",
          "This will create a class that inherits all methods and properties of the parent class (through a proper prototype chain), adding or overriding the ones you pass to extend. It will also properly react to instanceof:",
          "```js",
          "var a = new MyChildClass();",
          "a instanceof MyChildClass; // true",
          "a instanceof MyClass; // true",
          "```",
          "You can call parent methods (including constructor) from corresponding child ones (as you do with super calls in other languages) by accessing parent class prototype and using JavaScript's call or apply:",
          "```",
          "var MyChildClass = MyClass.extend({",
          "    initialize: function () {",
          "        MyClass.prototype.initialize.call(this, \"Yo\");",
          "    },",
          "    greet: function (name) {",
          "        MyClass.prototype.greet.call(this, 'bro ' + name + '!');",
          "    }",
          "});",
          "var a = new MyChildClass();",
          "a.greet('Jason'); // alerts \"Yo, bro Jason!\"",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "class-inheritance"
      },
      "Options": {
       "name": "Options",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "`options` is a special property that unlike other objects that you pass",
          "to `extend` will be merged with the parent one instead of overriding it",
          "completely, which makes managing configuration of objects and default",
          "values convenient:",
          "```js",
          "var MyClass = L.Class.extend({",
          "    options: {",
          "        myOption1: 'foo',",
          "        myOption2: 'bar'",
          "    }",
          "});",
          "var MyChildClass = MyClass.extend({",
          "    options: {",
          "        myOption1: 'baz',",
          "        myOption3: 5",
          "    }",
          "});",
          "var a = new MyChildClass();",
          "a.options.myOption1; // 'baz'",
          "a.options.myOption2; // 'bar'",
          "a.options.myOption3; // 5",
          "```",
          "There's also [`L.Util.setOptions`](#util-setoptions), a method for",
          "conveniently merging options passed to constructor with the defaults",
          "defines in the class:",
          "```js",
          "var MyClass = L.Class.extend({",
          "    options: {",
          "        foo: 'bar',",
          "        bla: 5",
          "    },",
          "    initialize: function (options) {",
          "        L.Util.setOptions(this, options);",
          "        ...",
          "    }",
          "});",
          "var a = new MyClass({bla: 10});",
          "a.options; // {foo: 'bar', bla: 10}",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "class-options"
      },
      "Includes": {
       "name": "Includes",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "`includes` is a special class property that merges all specified objects into the class (such objects are called mixins).",
          "```js",
          " var MyMixin = {",
          "    foo: function () { ... },",
          "    bar: 5",
          "};",
          "var MyClass = L.Class.extend({",
          "    includes: MyMixin",
          "});",
          "var a = new MyClass();",
          "a.foo();",
          "```",
          "You can also do such includes in runtime with the `include` method:",
          "```js",
          "MyClass.include(MyMixin);",
          "```",
          "`statics` is just a convenience property that injects specified object properties as the static properties of the class, useful for defining constants:",
          "```js",
          "var MyClass = L.Class.extend({",
          "    statics: {",
          "        FOO: 'bar',",
          "        BLA: 5",
          "    }",
          "});",
          "MyClass.FOO; // 'bar'",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "class-includes"
      },
      "Constructor hooks": {
       "name": "Constructor hooks",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "If you're a plugin developer, you often need to add additional initialization code to existing classes (e.g. editing hooks for `L.Polyline`). Leaflet comes with a way to do it easily using the `addInitHook` method:",
          "```js",
          "MyClass.addInitHook(function () {",
          "    // ... do something in constructor additionally",
          "    // e.g. add event listeners, set custom properties etc.",
          "});",
          "```",
          "You can also use the following shortcut when you just need to make one additional method call:",
          "```js",
          "MyClass.addInitHook('methodName', arg1, arg2, …);",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "class-constructor-hooks"
      }
     },
     "id": "class-example"
    }
   },
   "inherits": [],
   "id": "class"
  },
  "Evented": {
   "name": "Evented",
   "aka": [
    "L.Evented"
   ],
   "comments": [
    "A set of methods shared between event-powered classes (like `Map` and `Marker`). Generally, events allow you to execute some function when something happens with an object (e.g. the user clicks on the map, causing the map to fire `'click'` event)."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "map.on('click', function(e) {",
          "\talert(e.latlng);",
          "} );",
          "```",
          "Leaflet deals with event listeners by reference, so if you want to add a listener and then remove it, define it as a function:",
          "```js",
          "function onClick(e) { ... }",
          "map.on('click', onClick);",
          "map.off('click', onClick);",
          "```",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "evented-example"
      }
     },
     "id": "evented-example"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "on": {
         "name": "on",
         "aka": [],
         "comments": [
          "Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`)."
         ],
         "params": {
          "type": {
           "name": "type",
           "type": "String"
          },
          "fn": {
           "name": "fn",
           "type": "Function"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-on"
        },
        "on-alternative-1": {
         "name": "on",
         "aka": [],
         "comments": [
          "Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`",
          "\t "
         ],
         "params": {
          "eventMap": {
           "name": "eventMap",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-on"
        },
        "off": {
         "name": "off",
         "aka": [],
         "comments": [
          "Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener."
         ],
         "params": {
          "type": {
           "name": "type",
           "type": "String"
          },
          "fn?": {
           "name": "fn?",
           "type": "Function"
          },
          "context?": {
           "name": "context?",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-off"
        },
        "off-alternative-1": {
         "name": "off",
         "aka": [],
         "comments": [
          "Removes a set of type/listener pairs."
         ],
         "params": {
          "eventMap": {
           "name": "eventMap",
           "type": "Object"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-off"
        },
        "off-alternative-2": {
         "name": "off",
         "aka": [],
         "comments": [
          "Removes all listeners to all events on the object.",
          "\t "
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-off"
        },
        "fire": {
         "name": "fire",
         "aka": [],
         "comments": [
          "Fires an event of the specified type. You can optionally provide an data",
          "object — the first argument of the listener function will contain its",
          "properties. The event can optionally be propagated to event parents."
         ],
         "params": {
          "type": {
           "name": "type",
           "type": "String"
          },
          "data?": {
           "name": "data?",
           "type": "Object"
          },
          "propagate?": {
           "name": "propagate?",
           "type": "Boolean"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-fire"
        },
        "listens": {
         "name": "listens",
         "aka": [],
         "comments": [
          "Returns `true` if a particular event type has any listeners attached to it."
         ],
         "params": {
          "type": {
           "name": "type",
           "type": "String"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "evented-listens"
        },
        "once": {
         "name": "once",
         "aka": [],
         "comments": [
          "Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed."
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-once"
        },
        "addEventParent": {
         "name": "addEventParent",
         "aka": [],
         "comments": [
          "Adds an event parent - an `Evented` that will receive propagated events"
         ],
         "params": {
          "obj": {
           "name": "obj",
           "type": "Evented"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-addeventparent"
        },
        "removeEventParent": {
         "name": "removeEventParent",
         "aka": [],
         "comments": [
          "Removes an event parent, so it will stop receiving propagated events"
         ],
         "params": {
          "obj": {
           "name": "obj",
           "type": "Evented"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-removeeventparent"
        },
        "addEventListener": {
         "name": "addEventListener",
         "aka": [],
         "comments": [
          "Alias to [`on(…)`](#evented-on)"
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-addeventlistener"
        },
        "removeEventListener": {
         "name": "removeEventListener",
         "aka": [],
         "comments": [
          "Alias to [`off(…)`](#evented-off)"
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-removeeventlistener"
        },
        "clearAllEventListeners": {
         "name": "clearAllEventListeners",
         "aka": [],
         "comments": [
          "Alias to [`off()`](#evented-off)"
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-clearalleventlisteners"
        },
        "addOneTimeEventListener": {
         "name": "addOneTimeEventListener",
         "aka": [],
         "comments": [
          "Alias to [`once(…)`](#evented-once)"
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-addonetimeeventlistener"
        },
        "fireEvent": {
         "name": "fireEvent",
         "aka": [],
         "comments": [
          "Alias to [`fire(…)`](#evented-fire)"
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "evented-fireevent"
        },
        "hasEventListeners": {
         "name": "hasEventListeners",
         "aka": [],
         "comments": [
          "Alias to [`listens(…)`](#evented-listens)"
         ],
         "params": {
          "…": {
           "name": "…"
          }
         },
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "evented-haseventlisteners"
        }
       },
       "type": "method",
       "id": "evented-method"
      }
     },
     "id": "evented-method"
    }
   },
   "inherits": [
    "Class"
   ],
   "id": "evented"
  },
  "Layer": {
   "name": "Layer",
   "aka": [
    "L.Layer",
    "ILayer"
   ],
   "comments": [
    "A set of methods from the Layer base class that all Leaflet layers use.",
    "Inherits all methods, options and events from `L.Evented`."
   ],
   "supersections": {
    "example": {
     "name": "example",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "__default": {
         "name": "__default",
         "aka": [],
         "comments": [
          "```js",
          "var layer = L.Marker(latlng).addTo(map);",
          "layer.addTo(map);",
          "layer.remove();",
          "```"
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null
        }
       },
       "type": "example",
       "id": "layer-example"
      }
     },
     "id": "layer-example"
    },
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "add": {
         "name": "add",
         "aka": [],
         "comments": [
          "Fired after the layer is added to a map"
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "layer-add"
        },
        "remove": {
         "name": "remove",
         "aka": [],
         "comments": [
          "Fired after the layer is removed from a map",
          " "
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "layer-remove"
        }
       },
       "type": "event",
       "id": "layer-event"
      },
      "Popup events": {
       "name": "Popup events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "popupopen": {
         "name": "popupopen",
         "aka": [],
         "comments": [
          "Fired when a popup bound to this layer is opened"
         ],
         "params": {},
         "type": "PopupEvent",
         "optional": false,
         "defaultValue": null,
         "id": "layer-popupopen"
        },
        "popupclose": {
         "name": "popupclose",
         "aka": [],
         "comments": [
          "Fired when a popup bound to this layer is closed"
         ],
         "params": {},
         "type": "PopupEvent",
         "optional": false,
         "defaultValue": null,
         "id": "layer-popupclose"
        }
       },
       "type": "event",
       "id": "layer-popup-events"
      },
      "Tooltip events": {
       "name": "Tooltip events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "tooltipopen": {
         "name": "tooltipopen",
         "aka": [],
         "comments": [
          "Fired when a tooltip bound to this layer is opened."
         ],
         "params": {},
         "type": "TooltipEvent",
         "optional": false,
         "defaultValue": null,
         "id": "layer-tooltipopen"
        },
        "tooltipclose": {
         "name": "tooltipclose",
         "aka": [],
         "comments": [
          "Fired when a tooltip bound to this layer is closed."
         ],
         "params": {},
         "type": "TooltipEvent",
         "optional": false,
         "defaultValue": null,
         "id": "layer-tooltipclose"
        }
       },
       "type": "event",
       "id": "layer-tooltip-events"
      }
     },
     "id": "layer-event"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "pane": {
         "name": "pane",
         "aka": [],
         "comments": [
          "By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'overlayPane'",
         "id": "layer-pane"
        },
        "attribution": {
         "name": "attribution",
         "aka": [],
         "comments": [
          "String to be shown in the attribution control, describes the layer data, e.g. \"© Mapbox\"."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "null",
         "id": "layer-attribution"
        }
       },
       "type": "option",
       "id": "layer-option"
      }
     },
     "id": "layer-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "Classes extending `L.Layer` will inherit the following methods:"
       ],
       "uninheritable": false,
       "documentables": {
        "addTo": {
         "name": "addTo",
         "aka": [],
         "comments": [
          "Adds the layer to the given map",
          "\t "
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-addto"
        },
        "remove": {
         "name": "remove",
         "aka": [],
         "comments": [
          "Removes the layer from the map it is currently active on."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-remove"
        },
        "removeFrom": {
         "name": "removeFrom",
         "aka": [],
         "comments": [
          "Removes the layer from the given map"
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-removefrom"
        },
        "getPane": {
         "name": "getPane",
         "aka": [],
         "comments": [
          "Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer."
         ],
         "params": {
          "name?": {
           "name": "name?",
           "type": "String"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "layer-getpane"
        },
        "getAttribution": {
         "name": "getAttribution",
         "aka": [],
         "comments": [
          "Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "layer-getattribution"
        }
       },
       "type": "method",
       "id": "layer-method"
      },
      "Extension methods": {
       "name": "Extension methods",
       "aka": [],
       "comments": [
        "Every layer should extend from `L.Layer` and (re-)implement the following methods."
       ],
       "uninheritable": true,
       "documentables": {
        "onAdd": {
         "name": "onAdd",
         "aka": [],
         "comments": [
          "Should contain code that creates DOM elements for the layer, adds them to `map panes` where they should belong and puts listeners on relevant map events. Called on [`map.addLayer(layer)`](#map-addlayer)."
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-onadd"
        },
        "onRemove": {
         "name": "onRemove",
         "aka": [],
         "comments": [
          "Should contain all clean up code that removes the layer's elements from the DOM and removes listeners previously added in [`onAdd`](#layer-onadd). Called on [`map.removeLayer(layer)`](#map-removelayer)."
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-onremove"
        },
        "getEvents": {
         "name": "getEvents",
         "aka": [],
         "comments": [
          "This optional method should return an object like `{ viewreset: this._reset }` for [`addEventListener`](#evented-addeventlistener). The event handlers in this object will be automatically added and removed from the map with your layer."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "layer-getevents"
        },
        "getAttribution": {
         "name": "getAttribution",
         "aka": [],
         "comments": [
          "This optional method should return a string containing HTML to be shown on the `Attribution control` whenever the layer is visible."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "layer-getattribution"
        },
        "beforeAdd": {
         "name": "beforeAdd",
         "aka": [],
         "comments": [
          "Optional method. Called on [`map.addLayer(layer)`](#map-addlayer), before the layer is added to the map, before events are initialized, without waiting until the map is in a usable state. Use for early initialization only.",
          " "
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-beforeadd"
        }
       },
       "type": "method",
       "id": "layer-extension-methods"
      },
      "Popup methods": {
       "name": "Popup methods",
       "aka": [],
       "comments": [
        "All layers share a set of methods convenient for binding popups to it.",
        "```js",
        "var layer = L.Polygon(latlngs).bindPopup('Hi There!').addTo(map);",
        "layer.openPopup();",
        "layer.closePopup();",
        "```",
        "Popups will also be automatically opened when the layer is clicked on and closed when the layer is removed from the map or another popup is opened.",
        " "
       ],
       "uninheritable": false,
       "documentables": {
        "bindPopup": {
         "name": "bindPopup",
         "aka": [],
         "comments": [
          "Binds a popup to the layer with the passed `content` and sets up the",
          "neccessary event listeners. If a `Function` is passed it will receive",
          "the layer as the first argument and should return a `String` or `HTMLElement`."
         ],
         "params": {
          "content": {
           "name": "content",
           "type": "String|HTMLElement|Function|Popup"
          },
          "options?": {
           "name": "options?",
           "type": "Popup options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-bindpopup"
        },
        "unbindPopup": {
         "name": "unbindPopup",
         "aka": [],
         "comments": [
          "Removes the popup previously bound with `bindPopup`."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-unbindpopup"
        },
        "openPopup": {
         "name": "openPopup",
         "aka": [],
         "comments": [
          "Opens the bound popup at the specificed `latlng` or at the default popup anchor if no `latlng` is passed."
         ],
         "params": {
          "latlng?": {
           "name": "latlng?",
           "type": "LatLng"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-openpopup"
        },
        "closePopup": {
         "name": "closePopup",
         "aka": [],
         "comments": [
          "Closes the popup bound to this layer if it is open."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-closepopup"
        },
        "togglePopup": {
         "name": "togglePopup",
         "aka": [],
         "comments": [
          "Opens or closes the popup bound to this layer depending on its current state."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-togglepopup"
        },
        "isPopupOpen": {
         "name": "isPopupOpen",
         "aka": [],
         "comments": [
          "Returns `true` if the popup bound to this layer is currently open."
         ],
         "params": {},
         "type": "boolean",
         "optional": false,
         "defaultValue": null,
         "id": "layer-ispopupopen"
        },
        "setPopupContent": {
         "name": "setPopupContent",
         "aka": [],
         "comments": [
          "Sets the content of the popup bound to this layer."
         ],
         "params": {
          "content": {
           "name": "content",
           "type": "String|HTMLElement|Popup"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-setpopupcontent"
        },
        "getPopup": {
         "name": "getPopup",
         "aka": [],
         "comments": [
          "Returns the popup bound to this layer."
         ],
         "params": {},
         "type": "Popup",
         "optional": false,
         "defaultValue": null,
         "id": "layer-getpopup"
        }
       },
       "type": "method",
       "id": "layer-popup-methods"
      },
      "Tooltip methods": {
       "name": "Tooltip methods",
       "aka": [],
       "comments": [
        "All layers share a set of methods convenient for binding tooltips to it.",
        "```js",
        "var layer = L.Polygon(latlngs).bindTooltip('Hi There!').addTo(map);",
        "layer.openTooltip();",
        "layer.closeTooltip();",
        "```",
        " "
       ],
       "uninheritable": false,
       "documentables": {
        "bindTooltip": {
         "name": "bindTooltip",
         "aka": [],
         "comments": [
          "Binds a tooltip to the layer with the passed `content` and sets up the",
          "neccessary event listeners. If a `Function` is passed it will receive",
          "the layer as the first argument and should return a `String` or `HTMLElement`."
         ],
         "params": {
          "content": {
           "name": "content",
           "type": "String|HTMLElement|Function|Tooltip"
          },
          "options?": {
           "name": "options?",
           "type": "Tooltip options"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-bindtooltip"
        },
        "unbindTooltip": {
         "name": "unbindTooltip",
         "aka": [],
         "comments": [
          "Removes the tooltip previously bound with `bindTooltip`."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-unbindtooltip"
        },
        "openTooltip": {
         "name": "openTooltip",
         "aka": [],
         "comments": [
          "Opens the bound tooltip at the specificed `latlng` or at the default tooltip anchor if no `latlng` is passed."
         ],
         "params": {
          "latlng?": {
           "name": "latlng?",
           "type": "LatLng"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-opentooltip"
        },
        "closeTooltip": {
         "name": "closeTooltip",
         "aka": [],
         "comments": [
          "Closes the tooltip bound to this layer if it is open."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-closetooltip"
        },
        "toggleTooltip": {
         "name": "toggleTooltip",
         "aka": [],
         "comments": [
          "Opens or closes the tooltip bound to this layer depending on its current state."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-toggletooltip"
        },
        "isTooltipOpen": {
         "name": "isTooltipOpen",
         "aka": [],
         "comments": [
          "Returns `true` if the tooltip bound to this layer is currently open."
         ],
         "params": {},
         "type": "boolean",
         "optional": false,
         "defaultValue": null,
         "id": "layer-istooltipopen"
        },
        "setTooltipContent": {
         "name": "setTooltipContent",
         "aka": [],
         "comments": [
          "Sets the content of the tooltip bound to this layer."
         ],
         "params": {
          "content": {
           "name": "content",
           "type": "String|HTMLElement|Tooltip"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "layer-settooltipcontent"
        },
        "getTooltip": {
         "name": "getTooltip",
         "aka": [],
         "comments": [
          "Returns the tooltip bound to this layer."
         ],
         "params": {},
         "type": "Tooltip",
         "optional": false,
         "defaultValue": null,
         "id": "layer-gettooltip"
        }
       },
       "type": "method",
       "id": "layer-tooltip-methods"
      }
     },
     "id": "layer-method"
    }
   },
   "inherits": [
    "Evented"
   ],
   "id": "layer"
  },
  "Interactive layer": {
   "name": "Interactive layer",
   "aka": [],
   "comments": [
    "Some `Layer`s can be made interactive - when the user interacts",
    "with such a layer, mouse events like `click` and `mouseover` can be handled.",
    "Use the [event handling methods](#evented-method) to handle these events."
   ],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "interactive": {
         "name": "interactive",
         "aka": [],
         "comments": [
          "If `false`, the layer will not emit mouse events and will act as a part of the underlying map."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "true",
         "id": "interactive-layer-interactive"
        }
       },
       "type": "option",
       "id": "interactive-layer-option"
      }
     },
     "id": "interactive-layer-option"
    },
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "Mouse events": {
       "name": "Mouse events",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "click": {
         "name": "click",
         "aka": [],
         "comments": [
          "Fired when the user clicks (or taps) the layer."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "interactive-layer-click"
        },
        "dblclick": {
         "name": "dblclick",
         "aka": [],
         "comments": [
          "Fired when the user double-clicks (or double-taps) the layer."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "interactive-layer-dblclick"
        },
        "mousedown": {
         "name": "mousedown",
         "aka": [],
         "comments": [
          "Fired when the user pushes the mouse button on the layer."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "interactive-layer-mousedown"
        },
        "mouseover": {
         "name": "mouseover",
         "aka": [],
         "comments": [
          "Fired when the mouse enters the layer."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "interactive-layer-mouseover"
        },
        "mouseout": {
         "name": "mouseout",
         "aka": [],
         "comments": [
          "Fired when the mouse leaves the layer."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "interactive-layer-mouseout"
        },
        "contextmenu": {
         "name": "contextmenu",
         "aka": [],
         "comments": [
          "Fired when the user right-clicks on the layer, prevents",
          "default browser context menu from showing if there are listeners on",
          "this event. Also fired on mobile when the user holds a single touch",
          "for a second (also called long press)."
         ],
         "params": {},
         "type": "MouseEvent",
         "optional": false,
         "defaultValue": null,
         "id": "interactive-layer-contextmenu"
        }
       },
       "type": "event",
       "id": "interactive-layer-mouse-events"
      }
     },
     "id": "interactive-layer-event"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "interactive-layer-method"
    }
   },
   "inherits": [
    "Layer"
   ],
   "id": "interactive-layer"
  },
  "Control": {
   "name": "Control",
   "aka": [
    "L.Control"
   ],
   "comments": [
    "L.Control is a base class for implementing map controls. Handles positioning.",
    "All other controls extend from this class.",
    " "
   ],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Control options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "position": {
         "name": "position",
         "aka": [],
         "comments": [
          "The position of the control (one of the map corners). Possible values are `'topleft'`,",
          "`'topright'`, `'bottomleft'` or `'bottomright'`"
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'topright'",
         "id": "control-position"
        }
       },
       "type": "option",
       "id": "control-option"
      }
     },
     "id": "control-option"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "Classes extending L.Control will inherit the following methods:"
       ],
       "uninheritable": false,
       "documentables": {
        "getPosition": {
         "name": "getPosition",
         "aka": [],
         "comments": [
          "Returns the position of the control.",
          "\t "
         ],
         "params": {},
         "type": "string",
         "optional": false,
         "defaultValue": null,
         "id": "control-getposition"
        },
        "setPosition": {
         "name": "setPosition",
         "aka": [],
         "comments": [
          "Sets the position of the control."
         ],
         "params": {
          "position": {
           "name": "position",
           "type": "string"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-setposition"
        },
        "getContainer": {
         "name": "getContainer",
         "aka": [],
         "comments": [
          "Returns the HTMLElement that contains the control."
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "control-getcontainer"
        },
        "addTo": {
         "name": "addTo",
         "aka": [],
         "comments": [
          "Adds the control to the given map."
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-addto"
        },
        "remove": {
         "name": "remove",
         "aka": [],
         "comments": [
          "Removes the control from the map it is currently active on."
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "control-remove"
        }
       },
       "type": "method",
       "id": "control-method"
      },
      "Extension methods": {
       "name": "Extension methods",
       "aka": [],
       "comments": [
        "Every control should extend from `L.Control` and (re-)implement the following methods."
       ],
       "uninheritable": true,
       "documentables": {
        "onAdd": {
         "name": "onAdd",
         "aka": [],
         "comments": [
          "Should return the container DOM element for the control and add listeners on relevant map events. Called on [`control.addTo(map)`](#control-addTo)."
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "control-onadd"
        },
        "onRemove": {
         "name": "onRemove",
         "aka": [],
         "comments": [
          "Optional method. Should contain all clean up code that removes the listeners previously added in [`onAdd`](#control-onadd). Called on [`control.remove()`](#control-remove).",
          " "
         ],
         "params": {
          "map": {
           "name": "map",
           "type": "Map"
          }
         },
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "control-onremove"
        }
       },
       "type": "method",
       "id": "control-extension-methods"
      }
     },
     "id": "control-method"
    }
   },
   "inherits": [
    "Class"
   ],
   "id": "control"
  },
  "Handler": {
   "name": "Handler",
   "aka": [
    "L.Handler"
   ],
   "comments": [
    "Abstract class for map interaction handlers"
   ],
   "supersections": {
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "enable": {
         "name": "enable",
         "aka": [],
         "comments": [
          "Enables the handler"
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "handler-enable"
        },
        "disable": {
         "name": "disable",
         "aka": [],
         "comments": [
          "Disables the handler"
         ],
         "params": {},
         "type": "this",
         "optional": false,
         "defaultValue": null,
         "id": "handler-disable"
        },
        "enabled": {
         "name": "enabled",
         "aka": [],
         "comments": [
          "Returns `true` if the handler is enabled"
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "handler-enabled"
        }
       },
       "type": "method",
       "id": "handler-method"
      },
      "Extension methods": {
       "name": "Extension methods",
       "aka": [],
       "comments": [
        "Classes inheriting from `Handler` must implement the two following methods:"
       ],
       "uninheritable": false,
       "documentables": {
        "addHooks": {
         "name": "addHooks",
         "aka": [],
         "comments": [
          "Called when the handler is enabled, should add event hooks."
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "handler-addhooks"
        },
        "removeHooks": {
         "name": "removeHooks",
         "aka": [],
         "comments": [
          "Called when the handler is disabled, should remove the event hooks added previously."
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "handler-removehooks"
        }
       },
       "type": "method",
       "id": "handler-extension-methods"
      }
     },
     "id": "handler-method"
    }
   },
   "inherits": [],
   "id": "handler"
  },
  "Projection": {
   "name": "Projection",
   "aka": [],
   "comments": [
    "An object with methods for projecting geographical coordinates of the world onto",
    "a flat surface (and back). See [Map projection](http://en.wikipedia.org/wiki/Map_projection)."
   ],
   "supersections": {
    "projection": {
     "name": "projection",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "Leaflet comes with a set of already defined Projections out of the box:"
       ],
       "uninheritable": false,
       "documentables": {
        "L.Projection.LonLat": {
         "name": "L.Projection.LonLat",
         "aka": [],
         "comments": [
          "Equirectangular, or Plate Carree projection — the most simple projection,",
          "mostly used by GIS enthusiasts. Directly maps `x` as longitude, and `y` as",
          "latitude. Also suitable for flat worlds, e.g. game maps. Used by the",
          "`EPSG:3395` and `Simple` CRS.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "projection-l-projection-lonlat"
        },
        "L.Projection.Mercator": {
         "name": "L.Projection.Mercator",
         "aka": [],
         "comments": [
          "Elliptical Mercator projection — more complex than Spherical Mercator. Takes into account that Earth is a geoid, not a perfect sphere. Used by the EPSG:3395 CRS.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "projection-l-projection-mercator"
        },
        "L.Projection.SphericalMercator": {
         "name": "L.Projection.SphericalMercator",
         "aka": [],
         "comments": [
          "Spherical Mercator projection — the most common projection for online maps,",
          "used by almost all free and commercial tile providers. Assumes that Earth is",
          "a sphere. Used by the `EPSG:3857` CRS.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "projection-l-projection-sphericalmercator"
        }
       },
       "type": "projection",
       "id": "projection-projection"
      }
     },
     "id": "projection-projection"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "bounds": {
         "name": "bounds",
         "aka": [],
         "comments": [
          "The bounds (specified in CRS units) where the projection is valid"
         ],
         "params": {},
         "type": "Bounds",
         "optional": false,
         "defaultValue": null,
         "id": "projection-bounds"
        }
       },
       "type": "property",
       "id": "projection-property"
      }
     },
     "id": "projection-property"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "project": {
         "name": "project",
         "aka": [],
         "comments": [
          "Projects geographical coordinates into a 2D point. Only accepts actual `L.LatLng` instances, not arrays."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "projection-project"
        },
        "unproject": {
         "name": "unproject",
         "aka": [],
         "comments": [
          "The inverse of `project`. Projects a 2D point into a geographical location. Only accepts actual `L.Point` instances, not arrays."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "projection-unproject"
        }
       },
       "type": "method",
       "id": "projection-method"
      }
     },
     "id": "projection-method"
    }
   },
   "inherits": [],
   "id": "projection"
  },
  "CRS": {
   "name": "CRS",
   "aka": [
    "L.CRS"
   ],
   "comments": [
    "Abstract class that defines coordinate reference systems for projecting",
    "geographical points into pixel (screen) coordinates and back (and to",
    "coordinates in other units for [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) services). See",
    "[spatial reference system](http://en.wikipedia.org/wiki/Coordinate_reference_system).",
    "Leaflet defines the most usual CRSs by default. If you want to use a",
    "CRS not defined by default, take a look at the",
    "[Proj4Leaflet](https://github.com/kartena/Proj4Leaflet) plugin.",
    " "
   ],
   "supersections": {
    "crs": {
     "name": "crs",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "L.CRS.EPSG3395": {
         "name": "L.CRS.EPSG3395",
         "aka": [],
         "comments": [
          "Rarely used by some commercial tile providers. Uses Elliptical Mercator projection.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "crs-l-crs-epsg3395"
        },
        "L.CRS.EPSG3857": {
         "name": "L.CRS.EPSG3857",
         "aka": [],
         "comments": [
          "The most common CRS for online maps, used by almost all free and commercial",
          "tile providers. Uses Spherical Mercator projection. Set in by default in",
          "Map's `crs` option.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "crs-l-crs-epsg3857"
        },
        "L.CRS.EPSG4326": {
         "name": "L.CRS.EPSG4326",
         "aka": [],
         "comments": [
          "A common CRS among GIS enthusiasts. Uses simple Equirectangular projection.",
          "Leaflet 1.0.x complies with the [TMS coordinate scheme for EPSG:4326](https://wiki.osgeo.org/wiki/Tile_Map_Service_Specification#global-geodetic),",
          "which is a breaking change from 0.7.x behaviour.  If you are using a `TileLayer`",
          "with this CRS, ensure that there are two 256x256 pixel tiles covering the",
          "whole earth at zoom level zero, and that the tile coordinate origin is (-180,+90),",
          "or (-180,-90) for `TileLayer`s with [the `tms` option](#tilelayer-tms) set.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "crs-l-crs-epsg4326"
        },
        "L.CRS.Earth": {
         "name": "L.CRS.Earth",
         "aka": [],
         "comments": [
          "Serves as the base for CRS that are global such that they cover the earth.",
          "Can only be used as the base for other CRS and cannot be used directly,",
          "since it does not have a `code`, `projection` or `transformation`. `distance()` returns",
          "meters.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "crs-l-crs-earth"
        },
        "L.CRS.Simple": {
         "name": "L.CRS.Simple",
         "aka": [],
         "comments": [
          "A simple CRS that maps longitude and latitude into `x` and `y` directly.",
          "May be used for maps of flat surfaces (e.g. game maps). Note that the `y`",
          "axis should still be inverted (going from bottom to top). `distance()` returns",
          "simple euclidean distance.",
          " "
         ],
         "params": {},
         "type": null,
         "optional": false,
         "defaultValue": null,
         "id": "crs-l-crs-simple"
        }
       },
       "type": "crs",
       "id": "crs-crs"
      }
     },
     "id": "crs-crs"
    },
    "method": {
     "name": "method",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "latLngToPoint": {
         "name": "latLngToPoint",
         "aka": [],
         "comments": [
          "Projects geographical coordinates into pixel coordinates for a given zoom."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          },
          "zoom": {
           "name": "zoom",
           "type": "Number"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "crs-latlngtopoint"
        },
        "pointToLatLng": {
         "name": "pointToLatLng",
         "aka": [],
         "comments": [
          "The inverse of `latLngToPoint`. Projects pixel coordinates on a given",
          "zoom into geographical coordinates."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          },
          "zoom": {
           "name": "zoom",
           "type": "Number"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "crs-pointtolatlng"
        },
        "project": {
         "name": "project",
         "aka": [],
         "comments": [
          "Projects geographical coordinates into coordinates in units accepted for",
          "this CRS (e.g. meters for EPSG:3857, for passing it to WMS services)."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "crs-project"
        },
        "unproject": {
         "name": "unproject",
         "aka": [],
         "comments": [
          "Given a projected coordinate returns the corresponding LatLng.",
          "The inverse of `project`."
         ],
         "params": {
          "point": {
           "name": "point",
           "type": "Point"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "crs-unproject"
        },
        "scale": {
         "name": "scale",
         "aka": [],
         "comments": [
          "Returns the scale used when transforming projected coordinates into",
          "pixel coordinates for a particular zoom. For example, it returns",
          "`256 * 2^zoom` for Mercator-based CRS."
         ],
         "params": {
          "zoom": {
           "name": "zoom",
           "type": "Number"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "crs-scale"
        },
        "zoom": {
         "name": "zoom",
         "aka": [],
         "comments": [
          "Inverse of `scale()`, returns the zoom level corresponding to a scale",
          "factor of `scale`."
         ],
         "params": {
          "scale": {
           "name": "scale",
           "type": "Number"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "crs-zoom"
        },
        "getProjectedBounds": {
         "name": "getProjectedBounds",
         "aka": [],
         "comments": [
          "Returns the projection's bounds scaled and transformed for the provided `zoom`."
         ],
         "params": {
          "zoom": {
           "name": "zoom",
           "type": "Number"
          }
         },
         "type": "Bounds",
         "optional": false,
         "defaultValue": null,
         "id": "crs-getprojectedbounds"
        },
        "distance": {
         "name": "distance",
         "aka": [],
         "comments": [
          "Returns the distance between two geographical coordinates."
         ],
         "params": {
          "latlng1": {
           "name": "latlng1",
           "type": "LatLng"
          },
          "latlng2": {
           "name": "latlng2",
           "type": "LatLng"
          }
         },
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "crs-distance"
        },
        "wrapLatLng": {
         "name": "wrapLatLng",
         "aka": [],
         "comments": [
          "Returns a `LatLng` where lat and lng has been wrapped according to the",
          "CRS's `wrapLat` and `wrapLng` properties, if they are outside the CRS's bounds."
         ],
         "params": {
          "latlng": {
           "name": "latlng",
           "type": "LatLng"
          }
         },
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "crs-wraplatlng"
        }
       },
       "type": "method",
       "id": "crs-method"
      }
     },
     "id": "crs-method"
    },
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "code": {
         "name": "code",
         "aka": [],
         "comments": [
          "Standard code name of the CRS passed into WMS services (e.g. `'EPSG:3857'`)"
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "crs-code"
        },
        "wrapLng": {
         "name": "wrapLng",
         "aka": [],
         "comments": [
          "An array of two numbers defining whether the longitude (horizontal) coordinate",
          "axis wraps around a given range and how. Defaults to `[-180, 180]` in most",
          "geographical CRSs. If `undefined`, the longitude axis does not wrap around."
         ],
         "params": {},
         "type": "Number[]",
         "optional": false,
         "defaultValue": null,
         "id": "crs-wraplng"
        },
        "wrapLat": {
         "name": "wrapLat",
         "aka": [],
         "comments": [
          "Like `wrapLng`, but for the latitude (vertical) axis."
         ],
         "params": {},
         "type": "Number[]",
         "optional": false,
         "defaultValue": null,
         "id": "crs-wraplat"
        },
        "infinite": {
         "name": "infinite",
         "aka": [],
         "comments": [
          "If true, the coordinate space will be unbounded (infinite in both axes)"
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "crs-infinite"
        }
       },
       "type": "property",
       "id": "crs-property"
      }
     },
     "id": "crs-property"
    }
   },
   "inherits": [],
   "id": "crs"
  },
  "Renderer": {
   "name": "Renderer",
   "aka": [
    "L.Renderer"
   ],
   "comments": [
    "Base class for vector renderer implementations (`SVG`, `Canvas`). Handles the",
    "DOM container of the renderer, its bounds, and its zoom animation.",
    "A `Renderer` works as an implicit layer group for all `Path`s - the renderer",
    "itself can be added or removed to the map. All paths use a renderer, which can",
    "be implicit (the map will decide the type of renderer and use it automatically)",
    "or explicit (using the [`renderer`](#path-renderer) option of the path).",
    "Do not use this class directly, use `SVG` and `Canvas` instead."
   ],
   "supersections": {
    "event": {
     "name": "event",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "update": {
         "name": "update",
         "aka": [],
         "comments": [
          "Fired when the renderer updates its bounds, center and zoom, for example when",
          "its map has moved",
          " "
         ],
         "params": {},
         "type": "Event",
         "optional": false,
         "defaultValue": null,
         "id": "renderer-update"
        }
       },
       "type": "event",
       "id": "renderer-event"
      }
     },
     "id": "renderer-event"
    },
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "Renderer options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "padding": {
         "name": "padding",
         "aka": [],
         "comments": [
          "How much to extend the clip area around the map view (relative to its size)",
          "e.g. 0.1 would be 10% of map view in each direction"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0.1",
         "id": "renderer-padding"
        }
       },
       "type": "option",
       "id": "renderer-option"
      }
     },
     "id": "renderer-option"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "renderer-method"
    }
   },
   "inherits": [
    "Layer"
   ],
   "id": "renderer"
  },
  "Event objects": {
   "name": "Event objects",
   "aka": [],
   "comments": [
    "Whenever a class inheriting from `Evented` fires an event, a listener function",
    "will be called with an event argument, which is a plain object containing",
    "information about the event. For example:",
    "```js",
    "map.on('click', function(ev) {",
    "    alert(ev.latlng); // ev is an event object (MouseEvent in this case)",
    "});",
    "```",
    "The information available depends on the event type:"
   ],
   "supersections": {},
   "inherits": [],
   "id": "event-objects"
  },
  "Event": {
   "name": "Event",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "The base event object. All other event objects contain these properties too."
       ],
       "uninheritable": false,
       "documentables": {
        "type": {
         "name": "type",
         "aka": [],
         "comments": [
          "The event type (e.g. `'click'`)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "event-type"
        },
        "target": {
         "name": "target",
         "aka": [],
         "comments": [
          "The object that fired the event."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "event-target"
        }
       },
       "type": "property",
       "id": "event-property"
      }
     },
     "id": "event-property"
    }
   },
   "inherits": [],
   "id": "event"
  },
  "KeyboardEvent": {
   "name": "KeyboardEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "originalEvent": {
         "name": "originalEvent",
         "aka": [],
         "comments": [
          "The original [DOM `KeyboardEvent`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) that triggered this Leaflet event."
         ],
         "params": {},
         "type": "DOMEvent",
         "optional": false,
         "defaultValue": null,
         "id": "keyboardevent-originalevent"
        }
       },
       "type": "property",
       "id": "keyboardevent-property"
      }
     },
     "id": "keyboardevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "keyboardevent"
  },
  "MouseEvent": {
   "name": "MouseEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "latlng": {
         "name": "latlng",
         "aka": [],
         "comments": [
          "The geographical point where the mouse event occured."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "mouseevent-latlng"
        },
        "layerPoint": {
         "name": "layerPoint",
         "aka": [],
         "comments": [
          "Pixel coordinates of the point where the mouse event occured relative to the map layer."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "mouseevent-layerpoint"
        },
        "containerPoint": {
         "name": "containerPoint",
         "aka": [],
         "comments": [
          "Pixel coordinates of the point where the mouse event occured relative to the map сontainer."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "mouseevent-containerpoint"
        },
        "originalEvent": {
         "name": "originalEvent",
         "aka": [],
         "comments": [
          "The original [DOM `MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) or [DOM `TouchEvent`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent) that triggered this Leaflet event."
         ],
         "params": {},
         "type": "DOMEvent",
         "optional": false,
         "defaultValue": null,
         "id": "mouseevent-originalevent"
        }
       },
       "type": "property",
       "id": "mouseevent-property"
      }
     },
     "id": "mouseevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "mouseevent"
  },
  "LocationEvent": {
   "name": "LocationEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "latlng": {
         "name": "latlng",
         "aka": [],
         "comments": [
          "Detected geographical location of the user."
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "locationevent-latlng"
        },
        "bounds": {
         "name": "bounds",
         "aka": [],
         "comments": [
          "Geographical bounds of the area user is located in (with respect to the accuracy of location)."
         ],
         "params": {},
         "type": "LatLngBounds",
         "optional": false,
         "defaultValue": null,
         "id": "locationevent-bounds"
        },
        "accuracy": {
         "name": "accuracy",
         "aka": [],
         "comments": [
          "Accuracy of location in meters."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "locationevent-accuracy"
        },
        "altitude": {
         "name": "altitude",
         "aka": [],
         "comments": [
          "Height of the position above the WGS84 ellipsoid in meters."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "locationevent-altitude"
        },
        "altitudeAccuracy": {
         "name": "altitudeAccuracy",
         "aka": [],
         "comments": [
          "Accuracy of altitude in meters."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "locationevent-altitudeaccuracy"
        },
        "heading": {
         "name": "heading",
         "aka": [],
         "comments": [
          "The direction of travel in degrees counting clockwise from true North."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "locationevent-heading"
        },
        "speed": {
         "name": "speed",
         "aka": [],
         "comments": [
          "Current velocity in meters per second."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "locationevent-speed"
        },
        "timestamp": {
         "name": "timestamp",
         "aka": [],
         "comments": [
          "The time when the position was acquired."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "locationevent-timestamp"
        }
       },
       "type": "property",
       "id": "locationevent-property"
      }
     },
     "id": "locationevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "locationevent"
  },
  "ErrorEvent": {
   "name": "ErrorEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "message": {
         "name": "message",
         "aka": [],
         "comments": [
          "Error message."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "errorevent-message"
        },
        "code": {
         "name": "code",
         "aka": [],
         "comments": [
          "Error code (if applicable)."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "errorevent-code"
        }
       },
       "type": "property",
       "id": "errorevent-property"
      }
     },
     "id": "errorevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "errorevent"
  },
  "LayerEvent": {
   "name": "LayerEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "layer": {
         "name": "layer",
         "aka": [],
         "comments": [
          "The layer that was added or removed."
         ],
         "params": {},
         "type": "Layer",
         "optional": false,
         "defaultValue": null,
         "id": "layerevent-layer"
        }
       },
       "type": "property",
       "id": "layerevent-property"
      }
     },
     "id": "layerevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "layerevent"
  },
  "LayersControlEvent": {
   "name": "LayersControlEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "layer": {
         "name": "layer",
         "aka": [],
         "comments": [
          "The layer that was added or removed."
         ],
         "params": {},
         "type": "Layer",
         "optional": false,
         "defaultValue": null,
         "id": "layerscontrolevent-layer"
        },
        "name": {
         "name": "name",
         "aka": [],
         "comments": [
          "The name of the layer that was added or removed."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "layerscontrolevent-name"
        }
       },
       "type": "property",
       "id": "layerscontrolevent-property"
      }
     },
     "id": "layerscontrolevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "layerscontrolevent"
  },
  "TileEvent": {
   "name": "TileEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "tile": {
         "name": "tile",
         "aka": [],
         "comments": [
          "The tile element (image)."
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "tileevent-tile"
        },
        "coords": {
         "name": "coords",
         "aka": [],
         "comments": [
          "Point object with the tile's `x`, `y`, and `z` (zoom level) coordinates."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "tileevent-coords"
        }
       },
       "type": "property",
       "id": "tileevent-property"
      }
     },
     "id": "tileevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "tileevent"
  },
  "TileErrorEvent": {
   "name": "TileErrorEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "tile": {
         "name": "tile",
         "aka": [],
         "comments": [
          "The tile element (image)."
         ],
         "params": {},
         "type": "HTMLElement",
         "optional": false,
         "defaultValue": null,
         "id": "tileerrorevent-tile"
        },
        "coords": {
         "name": "coords",
         "aka": [],
         "comments": [
          "Point object with the tile's `x`, `y`, and `z` (zoom level) coordinates."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "tileerrorevent-coords"
        },
        "error": {
         "name": "error",
         "aka": [],
         "comments": [
          "Error passed to the tile's `done()` callback."
         ],
         "params": {},
         "type": "*",
         "optional": false,
         "defaultValue": null,
         "id": "tileerrorevent-error"
        }
       },
       "type": "property",
       "id": "tileerrorevent-property"
      }
     },
     "id": "tileerrorevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "tileerrorevent"
  },
  "ResizeEvent": {
   "name": "ResizeEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "oldSize": {
         "name": "oldSize",
         "aka": [],
         "comments": [
          "The old size before resize event."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "resizeevent-oldsize"
        },
        "newSize": {
         "name": "newSize",
         "aka": [],
         "comments": [
          "The new size after the resize event."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": null,
         "id": "resizeevent-newsize"
        }
       },
       "type": "property",
       "id": "resizeevent-property"
      }
     },
     "id": "resizeevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "resizeevent"
  },
  "GeoJSONEvent": {
   "name": "GeoJSONEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "layer": {
         "name": "layer",
         "aka": [],
         "comments": [
          "The layer for the GeoJSON feature that is being added to the map."
         ],
         "params": {},
         "type": "Layer",
         "optional": false,
         "defaultValue": null,
         "id": "geojsonevent-layer"
        },
        "properties": {
         "name": "properties",
         "aka": [],
         "comments": [
          "GeoJSON properties of the feature."
         ],
         "params": {},
         "type": "Object",
         "optional": false,
         "defaultValue": null,
         "id": "geojsonevent-properties"
        },
        "geometryType": {
         "name": "geometryType",
         "aka": [],
         "comments": [
          "GeoJSON geometry type of the feature."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "geojsonevent-geometrytype"
        },
        "id": {
         "name": "id",
         "aka": [],
         "comments": [
          "GeoJSON ID of the feature (if present)."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "geojsonevent-id"
        }
       },
       "type": "property",
       "id": "geojsonevent-property"
      }
     },
     "id": "geojsonevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "geojsonevent"
  },
  "PopupEvent": {
   "name": "PopupEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "popup": {
         "name": "popup",
         "aka": [],
         "comments": [
          "The popup that was opened or closed."
         ],
         "params": {},
         "type": "Popup",
         "optional": false,
         "defaultValue": null,
         "id": "popupevent-popup"
        }
       },
       "type": "property",
       "id": "popupevent-property"
      }
     },
     "id": "popupevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "popupevent"
  },
  "TooltipEvent": {
   "name": "TooltipEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "tooltip": {
         "name": "tooltip",
         "aka": [],
         "comments": [
          "The tooltip that was opened or closed."
         ],
         "params": {},
         "type": "Tooltip",
         "optional": false,
         "defaultValue": null,
         "id": "tooltipevent-tooltip"
        }
       },
       "type": "property",
       "id": "tooltipevent-property"
      }
     },
     "id": "tooltipevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "tooltipevent"
  },
  "ZoomAnimEvent": {
   "name": "ZoomAnimEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "center": {
         "name": "center",
         "aka": [],
         "comments": [
          "The current center of the map"
         ],
         "params": {},
         "type": "LatLng",
         "optional": false,
         "defaultValue": null,
         "id": "zoomanimevent-center"
        },
        "zoom": {
         "name": "zoom",
         "aka": [],
         "comments": [
          "The current zoom level of the map"
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "zoomanimevent-zoom"
        },
        "noUpdate": {
         "name": "noUpdate",
         "aka": [],
         "comments": [
          "Whether layers should update their contents due to this event"
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "zoomanimevent-noupdate"
        }
       },
       "type": "property",
       "id": "zoomanimevent-property"
      }
     },
     "id": "zoomanimevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "zoomanimevent"
  },
  "DragEndEvent": {
   "name": "DragEndEvent",
   "aka": [],
   "comments": [],
   "supersections": {
    "property": {
     "name": "property",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "distance": {
         "name": "distance",
         "aka": [],
         "comments": [
          "The distance in pixels the draggable element was moved by."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": null,
         "id": "dragendevent-distance"
        }
       },
       "type": "property",
       "id": "dragendevent-property"
      }
     },
     "id": "dragendevent-property"
    }
   },
   "inherits": [
    "Event"
   ],
   "id": "dragendevent"
  },
  "DivOverlay": {
   "name": "DivOverlay",
   "aka": [
    "L.DivOverlay"
   ],
   "comments": [
    "Base model for L.Popup and L.Tooltip. Inherit from it for custom popup like plugins.",
    " "
   ],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [
        "DivOverlay options"
       ],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "offset": {
         "name": "offset",
         "aka": [],
         "comments": [
          "The offset of the popup position. Useful to control the anchor",
          "of the popup when opening it on some overlays."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "Point(0, 7)",
         "id": "divoverlay-offset"
        },
        "className": {
         "name": "className",
         "aka": [],
         "comments": [
          "A custom CSS class name to assign to the popup."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "''",
         "id": "divoverlay-classname"
        },
        "pane": {
         "name": "pane",
         "aka": [],
         "comments": [
          "`Map pane` where the popup will be added."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": "'popupPane'",
         "id": "divoverlay-pane"
        }
       },
       "type": "option",
       "id": "divoverlay-option"
      }
     },
     "id": "divoverlay-option"
    },
    "event": {
     "name": "event",
     "sections": {},
     "id": "divoverlay-event"
    },
    "method": {
     "name": "method",
     "sections": {},
     "id": "divoverlay-method"
    }
   },
   "inherits": [
    "Layer"
   ],
   "id": "divoverlay"
  },
  "Icon.Default": {
   "name": "Icon.Default",
   "aka": [
    "L.Icon.Default"
   ],
   "comments": [],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "A trivial subclass of `Icon`, represents the icon to use in `Marker`s when",
        "no icon is specified. Points to the blue marker image distributed with Leaflet",
        "releases.",
        "In order to customize the default icon, just change the properties of `L.Icon.Default.prototype.options`",
        "(which is a set of `Icon options`).",
        "If you want to _completely_ replace the default icon, override the",
        "`L.Marker.prototype.options.icon` with your own icon instead.",
        " "
       ],
       "uninheritable": false,
       "documentables": {
        "imagePath": {
         "name": "imagePath",
         "aka": [],
         "comments": [
          "`L.Icon.Default` will try to auto-detect the absolute location of the",
          "blue icon images. If you are placing these images in a non-standard",
          "way, set this option to point to the right absolute path."
         ],
         "params": {},
         "type": "String",
         "optional": false,
         "defaultValue": null,
         "id": "icon-default-imagepath"
        }
       },
       "type": "option",
       "id": "icon-default-option"
      }
     },
     "id": "icon-default-option"
    }
   },
   "inherits": [],
   "id": "icon-default"
  },
  "Locate options": {
   "name": "Locate options",
   "aka": [
    "locate options"
   ],
   "comments": [],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "Some of the geolocation methods for `Map` take in an `options` parameter. This",
        "is a plain javascript object with the following optional components:"
       ],
       "uninheritable": false,
       "documentables": {
        "watch": {
         "name": "watch",
         "aka": [],
         "comments": [
          "If `true`, starts continous watching of location changes (instead of detecting it",
          "once) using W3C `watchPosition` method. You can later stop watching using",
          "`map.stopLocate()` method."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "locate-options-watch"
        },
        "setView": {
         "name": "setView",
         "aka": [],
         "comments": [
          "If `true`, automatically sets the map view to the user location with respect to",
          "detection accuracy, or to world view if geolocation failed."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "locate-options-setview"
        },
        "maxZoom": {
         "name": "maxZoom",
         "aka": [],
         "comments": [
          "The maximum zoom for automatic view setting when using `setView` option."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "Infinity",
         "id": "locate-options-maxzoom"
        },
        "timeout": {
         "name": "timeout",
         "aka": [],
         "comments": [
          "Number of milliseconds to wait for a response from geolocation before firing a",
          "`locationerror` event."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "10000",
         "id": "locate-options-timeout"
        },
        "maximumAge": {
         "name": "maximumAge",
         "aka": [],
         "comments": [
          "Maximum age of detected location. If less than this amount of milliseconds",
          "passed since last geolocation response, `locate` will return a cached location."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0",
         "id": "locate-options-maximumage"
        },
        "enableHighAccuracy": {
         "name": "enableHighAccuracy",
         "aka": [],
         "comments": [
          "Enables high accuracy, see [description in the W3C spec](http://dev.w3.org/geo/api/spec-source.html#high-accuracy)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "locate-options-enablehighaccuracy"
        }
       },
       "type": "option",
       "id": "locate-options-option"
      }
     },
     "id": "locate-options-option"
    }
   },
   "inherits": [],
   "id": "locate-options"
  },
  "Zoom options": {
   "name": "Zoom options",
   "aka": [
    "zoom options"
   ],
   "comments": [],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "Some of the `Map` methods which modify the zoom level take in an `options`",
        "parameter. This is a plain javascript object with the following optional",
        "components:"
       ],
       "uninheritable": false,
       "documentables": {
        "animate": {
         "name": "animate",
         "aka": [],
         "comments": [
          "If not specified, zoom animation will happen if the zoom origin is inside the",
          "current view. If `true`, the map will attempt animating zoom disregarding where",
          "zoom origin is. Setting `false` will make it always reset the view completely",
          "without animation."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "zoom-options-animate"
        }
       },
       "type": "option",
       "id": "zoom-options-option"
      }
     },
     "id": "zoom-options-option"
    }
   },
   "inherits": [],
   "id": "zoom-options"
  },
  "Pan options": {
   "name": "Pan options",
   "aka": [
    "pan options"
   ],
   "comments": [],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [
        "Some of the `Map` methods which modify the center of the map take in an `options`",
        "parameter. This is a plain javascript object with the following optional",
        "components:"
       ],
       "uninheritable": false,
       "documentables": {
        "animate": {
         "name": "animate",
         "aka": [],
         "comments": [
          "If `true`, panning will always be animated if possible. If `false`, it will",
          "not animate panning, either resetting the map view if panning more than a",
          "screen away, or just setting a new offset for the map pane (except for `panBy`",
          "which always does the latter)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": null,
         "id": "pan-options-animate"
        },
        "duration": {
         "name": "duration",
         "aka": [],
         "comments": [
          "Duration of animated panning, in seconds."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0.25",
         "id": "pan-options-duration"
        },
        "easeLinearity": {
         "name": "easeLinearity",
         "aka": [],
         "comments": [
          "The curvature factor of panning animation easing (third parameter of the",
          "[Cubic Bezier curve](http://cubic-bezier.com/)). 1.0 means linear animation,",
          "and the smaller this number, the more bowed the curve."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "0.25",
         "id": "pan-options-easelinearity"
        },
        "noMoveStart": {
         "name": "noMoveStart",
         "aka": [],
         "comments": [
          "If `true`, panning won't fire `movestart` event on start (used internally for",
          "panning inertia)."
         ],
         "params": {},
         "type": "Boolean",
         "optional": false,
         "defaultValue": "false",
         "id": "pan-options-nomovestart"
        }
       },
       "type": "option",
       "id": "pan-options-option"
      }
     },
     "id": "pan-options-option"
    }
   },
   "inherits": [],
   "id": "pan-options"
  },
  "Zoom/pan options": {
   "name": "Zoom/pan options",
   "aka": [
    "zoom/pan options"
   ],
   "comments": [],
   "supersections": {
    "option": {
     "name": "option",
     "sections": {},
     "id": "zoom/pan-options-option"
    }
   },
   "inherits": [
    "Zoom options",
    "Pan options"
   ],
   "id": "zoom/pan-options"
  },
  "FitBounds options": {
   "name": "FitBounds options",
   "aka": [
    "fitBounds options"
   ],
   "comments": [],
   "supersections": {
    "option": {
     "name": "option",
     "aka": [],
     "comments": [],
     "sections": {
      "__default": {
       "name": "__default",
       "aka": [],
       "comments": [],
       "uninheritable": false,
       "documentables": {
        "paddingTopLeft": {
         "name": "paddingTopLeft",
         "aka": [],
         "comments": [
          "Sets the amount of padding in the top left corner of a map container that",
          "shouldn't be accounted for when setting the view to fit bounds. Useful if you",
          "have some control overlays on the map like a sidebar and you don't want them",
          "to obscure objects you're zooming to."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "[0, 0]",
         "id": "fitbounds-options-paddingtopleft"
        },
        "paddingBottomRight": {
         "name": "paddingBottomRight",
         "aka": [],
         "comments": [
          "The same for the bottom right corner of the map."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "[0, 0]",
         "id": "fitbounds-options-paddingbottomright"
        },
        "padding": {
         "name": "padding",
         "aka": [],
         "comments": [
          "Equivalent of setting both top left and bottom right padding to the same value."
         ],
         "params": {},
         "type": "Point",
         "optional": false,
         "defaultValue": "[0, 0]",
         "id": "fitbounds-options-padding"
        },
        "maxZoom": {
         "name": "maxZoom",
         "aka": [],
         "comments": [
          "The maximum possible zoom to use."
         ],
         "params": {},
         "type": "Number",
         "optional": false,
         "defaultValue": "null",
         "id": "fitbounds-options-maxzoom"
        }
       },
       "type": "option",
       "id": "fitbounds-options-option"
      }
     },
     "id": "fitbounds-options-option"
    }
   },
   "inherits": [
    "Zoom/pan options"
   ],
   "id": "fitbounds-options"
  },
  "Global Switches": {
   "name": "Global Switches",
   "aka": [],
   "comments": [
    "Global switches are created for rare cases and generally make",
    "Leaflet to not detect a particular browser feature even if it's",
    "there. You need to set the switch as a global variable to true",
    "before including Leaflet on the page, like this:",
    "```html",
    "<script>L_NO_TOUCH = true;</script>",
    "<script src=\"leaflet.js\"></script>",
    "```",
    "| Switch         |   Description    |",
    "| -------------- | ---------------- |",
    "| `L_NO_TOUCH`   | Forces Leaflet to not use touch events even if it detects them. |",
    "| `L_DISABLE_3D` | Forces Leaflet to not use hardware-accelerated CSS 3D transforms for positioning (which may cause glitches in some rare environments) even if they're supported. |"
   ],
   "supersections": {},
   "inherits": [],
   "id": "global-switches"
  },
  "noConflict": {
   "name": "noConflict",
   "aka": [],
   "comments": [
    "This method restores the `L` global variable to the original value",
    "it had before Leaflet inclusion, and returns the real Leaflet",
    "namespace so you can put it elsewhere, like this:",
    "```html",
    "<script src='libs/l.js'>",
    "<!-- L points to some other library -->",
    "<script src='leaflet.js'>",
    "<!-- you include Leaflet, it replaces the L variable to Leaflet namespace -->",
    "<script>",
    "var Leaflet = L.noConflict();",
    "// now L points to that other library again, and you can use Leaflet.Map etc.",
    "</script>",
    "```"
   ],
   "supersections": {},
   "inherits": [],
   "id": "noconflict"
  },
  "version": {
   "name": "version",
   "aka": [],
   "comments": [
    "A constant that represents the Leaflet version in use.",
    "```js",
    "L.version; // contains \"1.0.0\" (or whatever version is currently in use)",
    "```"
   ],
   "supersections": {},
   "inherits": [],
   "id": "version"
  }
 },
 "miniclasses": {
  "Event": "Event objects",
  "KeyboardEvent": "Event objects",
  "MouseEvent": "Event objects",
  "LocationEvent": "Event objects",
  "ErrorEvent": "Event objects",
  "LayerEvent": "Event objects",
  "LayersControlEvent": "Event objects",
  "TileEvent": "Event objects",
  "TileErrorEvent": "Event objects",
  "ResizeEvent": "Event objects",
  "GeoJSONEvent": "Event objects",
  "PopupEvent": "Event objects",
  "TooltipEvent": "Event objects",
  "ZoomAnimEvent": "Event ojects",
  "DragEndEvent": "Event objects",
  "Icon.Default": "Icon",
  "Locate options": "Map",
  "Zoom options": "Map",
  "Pan options": "Map",
  "Zoom/pan options": "Map",
  "FitBounds options": "Map"
 }
}